<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>vue、webpack、express、mongodb搭建简单跑通全栈项目</title>
    <url>/2020/10/19/vue%E3%80%81webpack%E3%80%81express%E3%80%81mongodb%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E8%B7%91%E9%80%9A%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/4958474-953bcb50323ee13b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="project.png"></p>
<blockquote>
<p>本文会使用vue搭建一个简单单页应用，并且使用webpack打包，使用express框架服务，并使用mongodb管理数据存储，在服务器端部署，可以实现ip访问</p>
</blockquote>
<p>项目效果预览</p>
<p><a href="http://119.29.208.124:8080/#/" target="_blank" rel="noopener">http://119.29.208.124:8080/#/</a></p>
<h2 id="环境前提"><a href="#环境前提" class="headerlink" title="环境前提"></a>环境前提</h2><p> <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a> (&gt;=4.x, 6.x preferred), npm version 3+ and <a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>.</p>
<p>不论是本地开发还是服务器部署，都需要node环境，次处就不细讲如何在windows和linux配置nodejs环境了</p>
<h2 id="1-vue-cli快速搭建项目"><a href="#1-vue-cli快速搭建项目" class="headerlink" title="1.vue-cli快速搭建项目"></a>1.vue-cli快速搭建项目</h2><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure>
<p>创建集成了webpack的项目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue init webpack my-project</span><br></pre></td></tr></table></figure>
<p>接下来会进入安装阶段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Project name (my-project) </span><br><span class="line">&#x2F;&#x2F;项目名称，可以自己指定，也可直接回车，按照括号中默认名字（注意这里的名字不能有大写字母，如果有会报错Sorry, name &#x2F;&#x2F;can no longer contain capital letters），阮一峰老师博客为什么文件名要小写 ，可以参考一下。</span><br><span class="line">Project description (A Vue.js project)  &#x2F;&#x2F;项目描述，也可直接点击回车，使用默认名字</span><br><span class="line">Author (...) </span><br><span class="line">&#x2F;&#x2F;选择部分</span><br><span class="line">Runtime + Compiler: recommended for most users    &#x2F;&#x2F;运行加编译，推荐选择</span><br><span class="line">Install vue-router? (Y&#x2F;n)  &#x2F;&#x2F;是否安装vue-router，这是官方的路由,比较适合构建单页应用，于是我在此处选择了使用</span><br><span class="line">Use ESLint to lint your code? (Y&#x2F;n)    &#x2F;&#x2F;是否使用ESLint管理代码，ESLint是个代码风格管理工具，是用来统一代码风格，新手建议不用，不然回多出来很多语法上不规范而引起的错误</span><br><span class="line">Setup unit tests with Karma + Mocha? (Y&#x2F;n)  &#x2F;&#x2F;是否安装单元测试，此项目没用到</span><br><span class="line"></span><br><span class="line">Setup e2e tests with Nightwatch(Y&#x2F;n)?     &#x2F;&#x2F;是否安装e2e测试 ，此项目没用到</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/4958474-94cf678da54a8375.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="project.png"></p>
<ul>
<li>build目录 npm build *运行时执行的文件存放在此处，还有很重要的webpack配置文件</li>
<li>config目录 确定了执行run dev 和run build时的一些配置文件</li>
<li>dist目录 存放的是build命令执行后生成的产品文件</li>
<li>node_modules目录 存放的是依赖</li>
<li>src目录 存放的就是源码</li>
</ul>
<p>在cmd里面切换到项目目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd my-project</span><br></pre></td></tr></table></figure>
<p>安装依赖，此时才会生成node_modules目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>这个命令会自动读取package.json里面含有的所有的依赖信息和版本</p>
<p>等待安装完毕，就可以尝试启动项目了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<p>这个时候，会自动拉起浏览器，自主访问http:\\\localhost:8080</p>
<p>此时，在这个页面会出现一个vue的默认界面<br><img src="http://upload-images.jianshu.io/upload_images/4958474-447693fac7933236.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vue.png"></p>
<p>此处建议使用chrome浏览器，安装一个vue-tool插件，会比较方便的进行vue开发</p>
<p>接下来就可以进入到我们的项目开发阶段</p>
<h2 id="2-完成本地环境下项目开发"><a href="#2-完成本地环境下项目开发" class="headerlink" title="2.完成本地环境下项目开发"></a>2.完成本地环境下项目开发</h2><p>由于涉及到xhr请求，所以还需要下载vue-resource,样式方面选择了bootstrap框架，所以先安装依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i vue-resource bootstrap --save</span><br></pre></td></tr></table></figure>
<p>然后我们需要在main.js中引入我们的依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; The Vue build version to load with the &#96;import&#96; command</span><br><span class="line">&#x2F;&#x2F; (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span><br><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App&#39;</span><br><span class="line">import router from &#39;.&#x2F;router&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;需要我们引入的</span><br><span class="line">import VueResource from &#39;vue-resource&#39;</span><br><span class="line">import &#39;bootstrap&#x2F;dist&#x2F;css&#x2F;bootstrap.css&#39;</span><br><span class="line">import &#39;bootstrap&#x2F;dist&#x2F;js&#x2F;bootstrap.js&#39;</span><br><span class="line">Vue.use(VueResource);</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip &#x3D; false</span><br><span class="line"></span><br><span class="line">&#x2F;* eslint-disable no-new *&#x2F;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  router,</span><br><span class="line">  template: &#39;&lt;App&#x2F;&gt;&#39;,</span><br><span class="line">  components: &#123; App &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="2-1统一部分编写"><a href="#2-1统一部分编写" class="headerlink" title="2.1统一部分编写"></a>2.1统一部分编写</h3><p>我们可以看到src源码目录的结构如下</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4958474-27646cff4bca06a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="dir.png"></p>
<p>我们可以把app.vue当做是主组件，其他组件的入口，所以在app.vue编写的部分，在每个路由下的页面都会存在</p>
<p>，我们可以在此处，为我们的项目编写一个导航栏和页脚</p>
<p>此时的app.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;wrapper&quot;&gt;</span><br><span class="line">    &lt;nav class&#x3D;&quot;navbar navbar-default&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;navbar-header&quot;&gt;</span><br><span class="line">          &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;navbar-toggle collapsed&quot; data-toggle&#x3D;&quot;collapse&quot; data-target&#x3D;&quot;#bs-example-navbar-collapse-1&quot; aria-expanded&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;span class&#x3D;&quot;sr-only&quot;&gt;Toggle navigation&lt;&#x2F;span&gt;</span><br><span class="line">            &lt;span class&#x3D;&quot;icon-bar&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">            &lt;span class&#x3D;&quot;icon-bar&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">            &lt;span class&#x3D;&quot;icon-bar&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">          &lt;&#x2F;button&gt;</span><br><span class="line">          &lt;a class&#x3D;&quot;navbar-brand&quot; href&#x3D;&quot;&#x2F;home&quot;&gt;</span><br><span class="line">            &lt;i class&#x3D;&quot;glyphicon glyphicon-check&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">            丁丁</span><br><span class="line">          &lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;collapse navbar-collapse&quot; id&#x3D;&quot;bs-example-navbar-collapse-1&quot;&gt;</span><br><span class="line">          &lt;ul class&#x3D;&quot;nav navbar-nav&quot; &gt;</span><br><span class="line">            &lt;li&gt;&lt;router-link to&#x3D;&quot;&#x2F;home&quot;&gt;首页&lt;&#x2F;router-link&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;&lt;router-link to&#x3D;&quot;&#x2F;vedios&quot;&gt;视频&lt;&#x2F;router-link&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;&lt;router-link to&#x3D;&quot;&#x2F;books&quot;&gt;书籍&lt;&#x2F;router-link&gt;&lt;&#x2F;li&gt;</span><br><span class="line">          &lt;&#x2F;ul&gt;</span><br><span class="line">          &lt;form class&#x3D;&quot;navbar-form navbar-left&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">              &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;Search&quot;&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;button type&#x3D;&quot;submit&quot; class&#x3D;&quot;btn btn-default&quot;&gt;搜索&lt;&#x2F;button&gt;</span><br><span class="line">          &lt;&#x2F;form&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;nav&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;col-sm-12&quot;&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;footer&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-sm-3&quot;&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li class&#x3D;&quot;li-head&quot;&gt;产品&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li class&#x3D;&quot;li-item&quot;&gt; &lt;router-link to&#x3D;&quot;&#x2F;books&quot;&gt;视频&lt;&#x2F;router-link&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li class&#x3D;&quot;li-item&quot;&gt;&lt;router-link to&#x3D;&quot;&#x2F;vedios&quot;&gt;书籍&lt;&#x2F;router-link&gt;&lt;&#x2F;li&gt;</span><br><span class="line">          &lt;&#x2F;ul&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-sm-3&quot;&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li class&#x3D;&quot;li-head&quot;&gt;关于&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li class&#x3D;&quot;li-item&quot;&gt; &lt;router-link to&#x3D;&quot;&#x2F;about&quot;&gt;了解我们&lt;&#x2F;router-link&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li class&#x3D;&quot;li-item&quot;&gt;&lt;router-link to&#x3D;&quot;&#x2F;about&quot;&gt;加入我们&lt;&#x2F;router-link&gt;&lt;&#x2F;li&gt;</span><br><span class="line">          &lt;&#x2F;ul&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-sm-3&quot;&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li class&#x3D;&quot;li-head&quot;&gt;服务支持&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li class&#x3D;&quot;li-item&quot;&gt; &lt;a href&#x3D;&quot;www.decadexun.cn&quot;&gt;技术支持&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li class&#x3D;&quot;li-item&quot;&gt;&lt;router-link to&#x3D;&quot;&#x2F;books&quot;&gt;售后服务&lt;&#x2F;router-link&gt;&lt;&#x2F;li&gt;</span><br><span class="line">          &lt;&#x2F;ul&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-sm-3&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;head&quot;&gt;100-800-200&lt;&#x2F;div&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;box&quot;&gt; 联系客服&lt;&#x2F;div&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;time&quot;&gt;周一至周日 9:00 - 22:00&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;app&#39;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.footer&#123;</span><br><span class="line">  border-top:#e7e7e7 1px solid;</span><br><span class="line">  background: #f8f8f8;</span><br><span class="line">  padding: 30px 0;</span><br><span class="line">&#125;</span><br><span class="line">li&#123;</span><br><span class="line">  list-style: none;</span><br><span class="line">&#125;</span><br><span class="line">.li-head&#123;</span><br><span class="line">  font-size: 18px;</span><br><span class="line">  margin-bottom: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.li-item&#123;</span><br><span class="line">  margin-top:10px;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 30px;</span><br><span class="line">  background: #337ab7;</span><br><span class="line">  margin: 10px 0;</span><br><span class="line">  text-align: center;</span><br><span class="line">  line-height: 30px;</span><br><span class="line">  color:#fff;</span><br><span class="line">&#125;</span><br><span class="line">.head&#123;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.time&#123;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
<p>由于用到了bootstrap的自适应合并、轮播图组件，所以，如果此时你run dev，会报一个缺少jQuery的错误，所以，我们可以去网上找一个jquery的cdn库，找到根目录的index.html,这是我们的首页入口页面，加入如下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;jquery&#x2F;3.2.1&#x2F;jquery.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>由于bootstrap是一个可以自适应手机端的ui库，所以你也可以顺手加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1, user-scalable&#x3D;no&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>于是在手机上访问的时候，也会 有较好的效果</p>
<p>此时的index.html</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1, user-scalable&#x3D;no&quot;&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;jquery&#x2F;3.2.1&#x2F;jquery.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- built files will be auto injected --&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>然后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<p>此时的效果</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4958474-fdeca4ef9eecec27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="index1.png"></p>
<h3 id="2-2创建首页组件"><a href="#2-2创建首页组件" class="headerlink" title="2.2创建首页组件"></a>2.2创建首页组件</h3><p>看到上图的中间部分，这就是<code>&lt;router-view&gt;&lt;/router-view&gt;</code>渲染的效果，此时的首页默认是components下的vue组件，于是我可以写一个自己的首页组件，取代中间的部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;col-sm-9&quot;&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;carousel-example-generic&quot; class&#x3D;&quot;carousel slide&quot; data-ride&#x3D;&quot;carousel&quot;&gt;</span><br><span class="line">          &lt;!-- Indicators --&gt;</span><br><span class="line">          &lt;ol class&#x3D;&quot;carousel-indicators&quot;&gt;</span><br><span class="line">            &lt;li data-target&#x3D;&quot;#carousel-example-generic&quot; data-slide-to&#x3D;&quot;0&quot; class&#x3D;&quot;active&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li data-target&#x3D;&quot;#carousel-example-generic&quot; data-slide-to&#x3D;&quot;1&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li data-target&#x3D;&quot;#carousel-example-generic&quot; data-slide-to&#x3D;&quot;2&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">          &lt;&#x2F;ol&gt;</span><br><span class="line"></span><br><span class="line">          &lt;!-- Wrapper for slides --&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;carousel-inner&quot; role&#x3D;&quot;listbox&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;item active&quot;&gt;</span><br><span class="line">              &lt;img src&#x3D;&quot;http:&#x2F;&#x2F;res.cloudinary.com&#x2F;dyb29pfpm&#x2F;image&#x2F;upload&#x2F;v1507608949&#x2F;1507513417919_h1vcov.jpg&quot; alt&#x3D;&quot;#&quot;&gt;</span><br><span class="line">              &lt;div class&#x3D;&quot;carousel-caption&quot;&gt;</span><br><span class="line">                1</span><br><span class="line">              &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;item&quot;&gt;</span><br><span class="line">              &lt;img src&#x3D;&quot;http:&#x2F;&#x2F;res.cloudinary.com&#x2F;dyb29pfpm&#x2F;image&#x2F;upload&#x2F;v1507608948&#x2F;1507514383114_ksq1ib.jpg&quot; alt&#x3D;&quot;#&quot;&gt;</span><br><span class="line">              &lt;div class&#x3D;&quot;carousel-caption&quot;&gt;</span><br><span class="line">                2</span><br><span class="line">              &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;item&quot;&gt;</span><br><span class="line">              &lt;img src&#x3D;&quot;http:&#x2F;&#x2F;res.cloudinary.com&#x2F;dyb29pfpm&#x2F;image&#x2F;upload&#x2F;v1507608944&#x2F;1507514233895_bv935a.jpg&quot; alt&#x3D;&quot;#&quot;&gt;</span><br><span class="line">              &lt;div class&#x3D;&quot;carousel-caption&quot;&gt;</span><br><span class="line">                2</span><br><span class="line">              &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">          &lt;!-- Controls --&gt;</span><br><span class="line">          &lt;a class&#x3D;&quot;left carousel-control&quot; href&#x3D;&quot;#carousel-example-generic&quot; role&#x3D;&quot;button&quot; data-slide&#x3D;&quot;prev&quot;&gt;</span><br><span class="line">            &lt;span class&#x3D;&quot;glyphicon glyphicon-chevron-left&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">            &lt;span class&#x3D;&quot;sr-only&quot;&gt;Previous&lt;&#x2F;span&gt;</span><br><span class="line">          &lt;&#x2F;a&gt;</span><br><span class="line">          &lt;a class&#x3D;&quot;right carousel-control&quot; href&#x3D;&quot;#carousel-example-generic&quot; role&#x3D;&quot;button&quot; data-slide&#x3D;&quot;next&quot;&gt;</span><br><span class="line">            &lt;span class&#x3D;&quot;glyphicon glyphicon-chevron-right&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">            &lt;span class&#x3D;&quot;sr-only&quot;&gt;Next&lt;&#x2F;span&gt;</span><br><span class="line">          &lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;col-sm-3&quot;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>这是一个轮播图，但是我们需要怎样才可以看到效果呢，怎样取代中间部分，这就涉及到了路由的问题了，vue-router可以登场了</p>
<p>在刚才的src目录下，还有一个router目录，查看里面的index.js文件,此时是这样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import Router from &#39;vue-router&#39;</span><br><span class="line">import HelloWorld from &#39;@&#x2F;components&#x2F;HelloWorld&#39;</span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;&#39;,</span><br><span class="line">      name: &#39;Hello&#39;,</span><br><span class="line">      component: HelloWorld</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>于是我们明白为什么，首页会显示helloworld效果，是因为路由指定读取了在路径为’’/‘’的时候读取该组件，于是我们将该部分换成我们自己的组件</p>
<p>此时的index.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import Router from &#39;vue-router&#39;</span><br><span class="line">import Home from &#39;@&#x2F;components&#x2F;Home&#39;</span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;&#39;,</span><br><span class="line">      name: &#39;Home&#39;,</span><br><span class="line">      component: Home</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>修改后，我们可以查看效果</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4958474-a71dff1975f7d1af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="index2.png"></p>
<p>现在的效果就比较优雅了，但是右边好像比较空虚，于是我们可以设置一个侧边栏，考虑到，不仅仅在首页要用到侧边栏，于是我们将侧边栏写成一个组件，方便多个页面调用该组件</p>
<h3 id="2-3创建通用部分组件"><a href="#2-3创建通用部分组件" class="headerlink" title="2.3创建通用部分组件"></a>2.3创建通用部分组件</h3><p>Sidebar.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;panel panel-default&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;panel-heading&quot;&gt;</span><br><span class="line">        热门课程</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;http:&#x2F;&#x2F;res.cloudinary.com&#x2F;dyb29pfpm&#x2F;image&#x2F;upload&#x2F;v1507608952&#x2F;1507514293423_jv25xh.jpg&quot; class&#x3D;&quot;img-responsive&quot; alt&#x3D;&quot;Responsive image&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;http:&#x2F;&#x2F;res.cloudinary.com&#x2F;dyb29pfpm&#x2F;image&#x2F;upload&#x2F;v1507608952&#x2F;1507514293423_jv25xh.jpg&quot; class&#x3D;&quot;img-responsive&quot; alt&#x3D;&quot;Responsive image&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;http:&#x2F;&#x2F;res.cloudinary.com&#x2F;dyb29pfpm&#x2F;image&#x2F;upload&#x2F;v1507608952&#x2F;1507514293423_jv25xh.jpg&quot; class&#x3D;&quot;img-responsive&quot; alt&#x3D;&quot;Responsive image&quot;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>那我们该怎样在父组件Home.vue里面加入组件</p>
<p>template部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">      &lt;div class&#x3D;&quot;col-sm-3&quot;&gt;</span><br><span class="line">        &lt;sidebar&gt;&lt;&#x2F;sidebar&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>
<p>script部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import Sidebar from &quot;.&#x2F;Sidebar.vue&quot;</span><br><span class="line">export default &#123;</span><br><span class="line">  components:&#123;</span><br><span class="line">    &#39;sidebar&#39;: Sidebar,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>此时由于热加载，直接就可以看到加入了侧边栏后的效果</p>
<p>于是一个完全没有数据交互的展示型首页就出现了，接下来我们要创建一些有其他功能的界面</p>
<h3 id="2-4创建录入书籍页面"><a href="#2-4创建录入书籍页面" class="headerlink" title="2.4创建录入书籍页面"></a>2.4创建录入书籍页面</h3><p>录入页面可以算是控制台了，为了管理方便，肯定是会有一个控制台页面进行集成，但此处我们只讲实现这一个功能的页面</p>
<p>创建BookAdmin.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;panel panel-default&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;panel-heading&quot;&gt;</span><br><span class="line">      录入书籍</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;panel-body&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;form-horizontal&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;col-sm-12&quot;&gt;</span><br><span class="line">            &lt;label&gt;书籍名称&lt;&#x2F;label&gt;</span><br><span class="line">            &lt;input</span><br><span class="line">              type&#x3D;&quot;text&quot;</span><br><span class="line">              class&#x3D;&quot;form-control&quot;</span><br><span class="line">              v-model&#x3D;&quot;book.name&quot;</span><br><span class="line">              placeholder&#x3D;&quot;name&quot;</span><br><span class="line">            &#x2F;&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;col-sm-12&quot;&gt;</span><br><span class="line">            &lt;label&gt;编写老师&lt;&#x2F;label&gt;</span><br><span class="line">            &lt;input</span><br><span class="line">              type&#x3D;&quot;text&quot;</span><br><span class="line">              class&#x3D;&quot;form-control&quot;</span><br><span class="line">              v-model&#x3D;&quot;book.teacher&quot;</span><br><span class="line">              placeholder&#x3D;&quot;teacher&quot;</span><br><span class="line">            &#x2F;&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;col-sm-12&quot;&gt;</span><br><span class="line">            &lt;label&gt;书籍简介&lt;&#x2F;label&gt;</span><br><span class="line">            &lt;input</span><br><span class="line">              type&#x3D;&quot;text&quot;</span><br><span class="line">              class&#x3D;&quot;form-control&quot;</span><br><span class="line">              v-model&#x3D;&quot;book.introduction&quot;</span><br><span class="line">              placeholder&#x3D;&quot;introduction&quot;</span><br><span class="line">            &#x2F;&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;col-sm-12&quot;&gt;</span><br><span class="line">            &lt;label&gt;购买链接&lt;&#x2F;label&gt;</span><br><span class="line">            &lt;input</span><br><span class="line">              type&#x3D;&quot;text&quot;</span><br><span class="line">              class&#x3D;&quot;form-control&quot;</span><br><span class="line">              v-model&#x3D;&quot;book.shopUrl&quot;</span><br><span class="line">              placeholder&#x3D;&quot;shopUrl&quot;</span><br><span class="line">            &#x2F;&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;col-sm-12&quot;&gt;</span><br><span class="line">            &lt;label&gt;图片链接&lt;&#x2F;label&gt;</span><br><span class="line">            &lt;input</span><br><span class="line">              type&#x3D;&quot;text&quot;</span><br><span class="line">              class&#x3D;&quot;form-control&quot;</span><br><span class="line">              v-model&#x3D;&quot;book.pictureUrl&quot;</span><br><span class="line">              placeholder&#x3D;&quot;pictureUrl&quot;</span><br><span class="line">            &#x2F;&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;button class&#x3D;&quot;btn btn-primary&quot; @click&#x3D;&quot;save()&quot;&gt;录入&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;router-link to&#x3D;&quot;&#x2F;&quot; class&#x3D;&quot;btn btn-danger&quot;&gt;取消&lt;&#x2F;router-link&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">        name : &#39;BookAdmin&#39;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">              book:&#123;</span><br><span class="line">                name : &#39;&#39;,</span><br><span class="line">                teacher : &#39;&#39;,</span><br><span class="line">                introduction : &#39;&#39;,</span><br><span class="line">                shopUrl : &#39;&#39;,</span><br><span class="line">                pictureUrl : &#39;&#39;,</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">          save() &#123;</span><br><span class="line">            this.$http.post(&#39;localhost:8080&#x2F;createBook&#39;,&#123;</span><br><span class="line">              name : this.book.name,</span><br><span class="line">              teacher : this.book.teacher,</span><br><span class="line">              shopUrl : this.book.shopUrl,</span><br><span class="line">              pictureUrl : this.book.pictureUrl,</span><br><span class="line">              introduction : this.book.introduction</span><br><span class="line">            &#125;).then(function(ret)&#123;</span><br><span class="line">              console.log(ret);</span><br><span class="line">              let book &#x3D; this.book</span><br><span class="line">              console.log(book);</span><br><span class="line">              location.href&#x3D;&quot;&#x2F;#&#x2F;books&quot;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>为了能够反问到我们的页面，我们都知道该去添加新的路由了</p>
<p>index.js修改成如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import BookAdmin from &#39;@&#x2F;components&#x2F;BookAdmin&#39;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">routes: [</span><br><span class="line">   &#123;</span><br><span class="line">     path: &#39;&#x2F;&#39;,</span><br><span class="line">     name: &#39;Home&#39;,</span><br><span class="line">     component: Home</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">     path: &#39;&#x2F;bookAdmin&#39;,</span><br><span class="line">     name: &#39;BookAdmin&#39;,</span><br><span class="line">     component: BookAdmin</span><br><span class="line">   &#125;</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure>
<p>然后在浏览器访问<a href="http://localhost:8080/#/bookAdmin" target="_blank" rel="noopener">http://localhost:8080/#/bookAdmin</a></p>
<p>此时的效果如下</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4958474-4bf0a401430b1f31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="bookadmin.png"></p>
<p>那我们该怎样向后台post表单数据呢</p>
<p>大家可以看组件的script部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">        name : &#39;BookAdmin&#39;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">              book:&#123;</span><br><span class="line">                name : &#39;&#39;,</span><br><span class="line">                teacher : &#39;&#39;,</span><br><span class="line">                introduction : &#39;&#39;,</span><br><span class="line">                shopUrl : &#39;&#39;,</span><br><span class="line">                pictureUrl : &#39;&#39;,</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">          save() &#123;</span><br><span class="line">            this.$http.post(&#39;localhost:8080&#x2F;createBook&#39;,&#123;</span><br><span class="line">              name : this.book.name,</span><br><span class="line">              teacher : this.book.teacher,</span><br><span class="line">              shopUrl : this.book.shopUrl,</span><br><span class="line">              pictureUrl : this.book.pictureUrl,</span><br><span class="line">              introduction : this.book.introduction</span><br><span class="line">            &#125;).then(function(ret)&#123;</span><br><span class="line">              console.log(ret);</span><br><span class="line">              let book &#x3D; this.book</span><br><span class="line">              console.log(book);</span><br><span class="line">              location.href&#x3D;&quot;&#x2F;#&#x2F;books&quot;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>首先使用了一个data()方法，返回的book对象，里面包含了我们需要接收关于一个book 的所有属性，此时为空，然后我再下面又引入了一个methods对象，里面包含了点击按钮触发的save()方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$http.post(&#39;localhost:8080&#x2F;createBook&#39;,&#123;&#125;).then(function()&#123;&#125;)</span><br></pre></td></tr></table></figure>
<p>便是vue-resource的使用方法，此处的url-‘localhost:8080/createBook’,便是发送的请求链接，于是大家便知道，我们接下来要定义后台的监听端口，并定义/createBook方法，才能使这个方法生效</p>
<h3 id="2-5完成数据交互"><a href="#2-5完成数据交互" class="headerlink" title="2.5完成数据交互"></a>2.5完成数据交互</h3><p>首先安装需要的依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install express morgan mongodb body-parser --save-dev</span><br></pre></td></tr></table></figure>
<p>Morgan和body-parser，分别用来log美化和解析参数。然后再根目录创建app.js作为入口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var express &#x3D; require(&#39;express&#39;);</span><br><span class="line">var app &#x3D; express();</span><br><span class="line">var bodyParser &#x3D; require(&#39;body-parser&#39;);</span><br><span class="line">var morgan &#x3D; require(&#39;morgan&#39;);</span><br><span class="line">var MongoClient &#x3D; require(&#39;mongodb&#39;).MongoClient;</span><br><span class="line">&#x2F;&#x2F;确定数据库名称vuetest</span><br><span class="line">var mongoUrl &#x3D; &#39;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;vuetest&#39;;</span><br><span class="line">var _db;</span><br><span class="line">app.use(morgan(&#39;dev&#39;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(express.static(&#39;dist&#39;));</span><br><span class="line">MongoClient.connect(mongoUrl, function (err, db) &#123;</span><br><span class="line">  if(err) &#123;</span><br><span class="line">    console.error(err);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(&#39;mongodb have connected your project&#39;);</span><br><span class="line">  _db &#x3D; db;</span><br><span class="line">  &#x2F;&#x2F;监听端口8080</span><br><span class="line">  app.listen(8080, function () &#123;</span><br><span class="line">    console.log(&#39;server is running at 8080&#39;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>通过上面的配置，我们创建了名为vuetest的数据库，确定了监听端口8080</p>
<p>接下来继续在app.js编写/createBook方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;增加书籍</span><br><span class="line">app.post(&#39;&#x2F;createBook&#39;, function(req, res, next) &#123;</span><br><span class="line">var request &#x3D; req.body;</span><br><span class="line">&#x2F;&#x2F;接受请求</span><br><span class="line">var collection &#x3D; _db.collection(&#39;book&#39;);</span><br><span class="line">&#x2F;&#x2F;创建名为book的数据表</span><br><span class="line">if(!request.name || !request.teacher || !request.introduction || !request.shopUrl || !request.pictureUrl) &#123;</span><br><span class="line">  res.send(&#123;errcode:-1,errmsg:&quot;参数不完整&quot;&#125;);</span><br><span class="line">  return;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;插入数据表</span><br><span class="line">collection.insert(&#123;name: request.name, teacher: request.teacher,introduction: request.introduction,shopUrl: request.shopUrl,pictureUrl: request.pictureUrl,&#125;, function (err, ret) &#123;</span><br><span class="line">  if(err) &#123;</span><br><span class="line">    console.error(err);</span><br><span class="line">    res.status(500).end();</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    res.send(&#123;errcode:0,errmsg:&quot;ok&quot;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>接下来需要开启我们的mongodb服务，本地开发，就得在本机的windows或者mac上安装mongodb</p>
<p>完成了mongodb安装之后</p>
<p>切换到mongodb目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;mongod --dbpath E:\data</span><br></pre></td></tr></table></figure>
<p>使用这个命令启动mongodb服务 dbpath是为了确定数据存储的路径，我的本地数据库存储路径就是E:\data</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4958474-7c3fa20caa07871c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mongo.png"></p>
<p>有上图的显示表示开启成功</p>
<p>接下来,打包构建并运行我们的项目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run build</span><br><span class="line">node app.js</span><br></pre></td></tr></table></figure>
<p>可以在localhost:8080访问我们的项目，直接<a href="http://localhost:8080/#/bookAdmin到达录入页" target="_blank" rel="noopener">http://localhost:8080/#/bookAdmin到达录入页</a></p>
<p>输入一些信息进行测试</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4958474-722cce00f6e535f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="test.png"></p>
<p>在XHR请求里面可以看到一切正常，数据已经插入到数据库，并且此时已经跳转到了/books列表页了，由于没有写列表页，所以中间部分是空白的</p>
<h3 id="2-6创建数据展示组建-列表页"><a href="#2-6创建数据展示组建-列表页" class="headerlink" title="2.6创建数据展示组建-列表页"></a>2.6创建数据展示组建-列表页</h3><p>BookList.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;col-sm-9&quot;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;i class&#x3D;&quot;glyphicon glyphicon-list-alt&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">        书籍列表</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;hr&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p v-if&#x3D;&quot;!books.length&quot;&gt;&lt;strong&gt;还没有任何书籍&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class&#x3D;&quot;list-group&quot;&gt;</span><br><span class="line">          &lt;a class&#x3D;&quot;list-group-item&quot; v-for&#x3D;&quot;(book,index) in books&quot; :href&#x3D;&quot;book.shopUrl&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">              &lt;div class&#x3D;&quot;col-sm-3 book-avatar&quot;&gt;</span><br><span class="line">                &lt;img :src&#x3D;&quot;book.pictureUrl&quot; class&#x3D;&quot;avatar img-responsive&quot; &#x2F;&gt;</span><br><span class="line">              &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">              &lt;div class&#x3D;&quot;col-sm-4 text-center&quot;&gt;</span><br><span class="line">                &lt;h5 class&#x3D;&quot;list-group-item-text total-time&quot;&gt;</span><br><span class="line">                  &lt;i class&#x3D;&quot;glyphicon glyphicon-book&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">                  &#123;&#123; book.name &#125;&#125;</span><br><span class="line">                &lt;&#x2F;h5&gt;</span><br><span class="line">                &lt;p class&#x3D;&quot;label label-primary text-center&quot;&gt;</span><br><span class="line">                  &lt;i class&#x3D;&quot;glyphicon glyphicon-user&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">                  &#123;&#123; book.teacher &#125;&#125;</span><br><span class="line">                &lt;&#x2F;p&gt;</span><br><span class="line">              &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">              &lt;div class&#x3D;&quot;col-sm-5&quot;&gt;</span><br><span class="line">                &lt;p&gt;&#123;&#123; book.introduction &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">              &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;col-sm-3&quot;&gt;</span><br><span class="line">        &lt;sidebar&gt;&lt;&#x2F;sidebar&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Sidebar from &quot;.&#x2F;Sidebar.vue&quot;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components:&#123;</span><br><span class="line">          &#39;sidebar&#39;: Sidebar,</span><br><span class="line">        &#125;,</span><br><span class="line">        name : &#39;BookList&#39;,</span><br><span class="line">        data()&#123;</span><br><span class="line">          return &#123;</span><br><span class="line">            books:[]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        created()&#123;</span><br><span class="line">          document.title&#x3D;&quot;书籍列表&quot;</span><br><span class="line">          this.$http.get(&#39;http:&#x2F;&#x2F;localhost:8080&#x2F;book-list&#39;)</span><br><span class="line">            .then(function(ret) &#123;</span><br><span class="line">              this.books &#x3D; ret.data;</span><br><span class="line">              console.log(ret.data)</span><br><span class="line">            &#125;)</span><br><span class="line">            .then(function(err) &#123;</span><br><span class="line">              console.log(err);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.avatar &#123;</span><br><span class="line">    width:100%;</span><br><span class="line">    margin-top: 10px;</span><br><span class="line">    margin-bottom: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  .book-avatar &#123;</span><br><span class="line">    width:100%;</span><br><span class="line">    background-color: #f5f5f5;</span><br><span class="line">    border-top: 18px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
<p>套路和之前一模一样</p>
<p>再到router的index.js插入路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">import BookList from &#39;@&#x2F;components&#x2F;BookList&#39;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;books&#39;,</span><br><span class="line">      component: BookList,</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
<p>然后回到app.js添加控制方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;获取书籍列表</span><br><span class="line">app.get(&#39;&#x2F;book-list&#39;, function(req, res, next) &#123;</span><br><span class="line">  var collection &#x3D; _db.collection(&#39;book&#39;);</span><br><span class="line">  &#x2F;&#x2F;使用了数据表查找全部的方法</span><br><span class="line">  collection.find(&#123;&#125;).toArray(function (err, ret) &#123;</span><br><span class="line">    if(err) &#123;</span><br><span class="line">      console.error(err);</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    res.json(ret);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>然后我又去<a href="http://localhost:8080/#/bookAdmin录入了一本书，此时跳转之后的效果" target="_blank" rel="noopener">http://localhost:8080/#/bookAdmin录入了一本书，此时跳转之后的效果</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4958474-56f020e1b465e96e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="book-list.png"></p>
<p>感觉还是不错的</p>
<p>于是到此处，关于本地环境下的项目，已经跑通全栈，接下来，便是服务器跑通的环节</p>
<h2 id="3-完成服务器环境下的项目开发"><a href="#3-完成服务器环境下的项目开发" class="headerlink" title="3.完成服务器环境下的项目开发"></a>3.完成服务器环境下的项目开发</h2><h3 id="3-1首先是先将项目上传到服务器"><a href="#3-1首先是先将项目上传到服务器" class="headerlink" title="3.1首先是先将项目上传到服务器"></a>3.1首先是先将项目上传到服务器</h3><p>在此处我选择使用git，然后考虑我们应该上传哪些到服务器，dist生成文件肯定是要的，然后是app.js涉及到的部分,不需要的在.gitgignore里面便可以再上传时被忽视</p>
<p>现在github上创建一个git仓库<a href="https://github.com/decadeheart/vue-example.git" target="_blank" rel="noopener">https://github.com/decadeheart/vue-example.git</a></p>
<p>在本地</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init </span><br><span class="line">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;decadeheart&#x2F;vue-example.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;上传服务器&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<p>这个时候可以切换到服务器了</p>
<p>至于服务的来源，推荐腾讯云，学生优惠之前可以抢1元一个月的，现在我买的是10元一个月，最低配置，但也可以拿来耍耍</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh root@xxx.xx.xx.xx</span><br><span class="line">&#x2F;&#x2F;后面的是ip</span><br></pre></td></tr></table></figure>
<p>登录上去之后，首先将项目文件拉取下来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;home</span><br><span class="line">mkdir vue-exmaple</span><br><span class="line">cd vue-exmaple</span><br><span class="line">git init</span><br><span class="line">&#x2F;&#x2F;前提是你的服务器安装好了git</span><br><span class="line"> git remote add origin https:&#x2F;&#x2F;github.com&#x2F;decadeheart&#x2F;vue-example.git</span><br><span class="line">git pull origin master</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>
<p>接下来就是想要运行node app.js来运行项目了</p>
<p>但是肯定是需要依赖的，首先便就是服务器上的nodejs，还有服务器上的mongodb</p>
<h3 id="3-2安装服务器上的依赖"><a href="#3-2安装服务器上的依赖" class="headerlink" title="3.2安装服务器上的依赖"></a>3.2安装服务器上的依赖</h3><p>顺序应该是</p>
<ul>
<li>安装nodejs，可以参考<a href="http://blog.csdn.net/qq_21794603/article/details/68067821" target="_blank" rel="noopener">Linux系统（Centos）下安装nodejs并配置环境</a></li>
<li>安装mongodb<a href="http://www.cnblogs.com/roam/p/5762459.html" target="_blank" rel="noopener">MongoDB系列一：CentOS7.2下安装mongoDB3.2.8</a></li>
<li>安装nginx <a href="http://www.jianshu.com/p/d5114a2a2052" target="_blank" rel="noopener">Centos下 Nginx安装与配置</a></li>
</ul>
<p>在我们启动了mongodb之后。可以考虑来安装运行app.js的依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i express body-parser morgan mongodb</span><br><span class="line">&#x2F;&#x2F;安装完成后尝试运行</span><br><span class="line">node app.js</span><br></pre></td></tr></table></figure>
<p>访问<a href="http://ip:8080/#/就可以在网页看到网上的效果" target="_blank" rel="noopener">http://ip:8080/#/就可以在网页看到网上的效果</a></p>
<p>但是这个时候，我们所有的交互数据都出现了问题，报下面这个错误</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4958474-91772392d7e628b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="error.png"></p>
<p>这是因为我们发送的请求loacalhost并不是我们现在的服务器ip，所以连接的不是服务器数据库，被拒绝，需要修改成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;119.29.208.124:8080&#x2F;createBook</span><br><span class="line">http:&#x2F;&#x2F;119.29.208.124:8080&#x2F;book-list</span><br></pre></td></tr></table></figure>
<p>然后重新打包，打包之后上传git再拉下来更新，就发现我们可以正常录入信息到数据库了，作为在服务器上运行的项目，肯定是希望他在服务器上永久运行，所以可以安装pm2或者forever等工具使得项目永久在服务器上运行</p>
<p>由于我的服务器原因，下载pm2老是失败，所以我选择了forever</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i forever g</span><br><span class="line">forever start app.js</span><br></pre></td></tr></table></figure>
<p>常用命令如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install forever -g   #安装</span><br><span class="line">$ forever start app.js          #启动</span><br><span class="line">$ forever stop app.js           #关闭</span><br><span class="line">$ forever start -l forever.log -o out.log -e err.log app.js   #输出日志和错误</span><br></pre></td></tr></table></figure>
<p>然后你就可以推出当前目录去做其他事情了</p>
<p>讲道理，这个项目现在已经可以在服务器自主运行，终于完结撒花了</p>
<p>最后附上github地址</p>
<p><a href="https://github.com/decadeheart/vue-example.git" target="_blank" rel="noopener">https://github.com/decadeheart/vue-example.git</a></p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>linux、nginx、php、mysql环境下搭建wordpress博客</title>
    <url>/2020/10/19/linux%E3%80%81nginx%E3%80%81php%E3%80%81mysql%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAwordpress%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<blockquote>
<p>之前写过一篇，<a href="http://www.jianshu.com/p/2957ab783e03" target="_blank" rel="noopener">腾讯云+wordpress搭建个人博客</a>，但是是使用amh面板，简单粗暴构建的，其实amh面板也是集成了nginx，mysql，php，所以这次使用了原始的方法，构建了一下个人博客</p>
</blockquote>
<h2 id="1-数据库的安装及配置"><a href="#1-数据库的安装及配置" class="headerlink" title="1.数据库的安装及配置"></a>1.数据库的安装及配置</h2><p>安装方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install mysql mysql-server</span><br></pre></td></tr></table></figure>
<p>数据库启动命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;mysqld start</span><br></pre></td></tr></table></figure>
<p>数据库登录命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root –p</span><br></pre></td></tr></table></figure>
<p>会出现如下反馈</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4958474-fec1ba303b21e8e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mysql.png"></p>
<p>没有设置密码的话就可以直接进入到mysql命令行</p>
<p>接下来设置密码就在mysql命令行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update user set password&#x3D;password(&#39;yourpassword&#39;) where user&#x3D;&#39;root&#39;;</span><br><span class="line">flush privileges;</span><br><span class="line">exit</span><br><span class="line">&#x2F;&#x2F;在原命令行</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;mysqld restart</span><br><span class="line">&#x2F;&#x2F;重启数据库</span><br></pre></td></tr></table></figure>
<blockquote>
<p>设置密码如果出现问题，还可以选择这个方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>
<p>回车，根据提示输入Y<br>输入2次密码，回车<br>根据提示一路输入Y</p>
</blockquote>
<p>开启mysql数据库远程访问权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"></span><br><span class="line">update user set host&#x3D;&#39;%&#39; where user&#x3D;&#39;root&#39;;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<p>有可能会显示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR 1062 (23000): Duplicate entry &#39;%-root&#39; for key &#39;PRIMARY&#39;</span><br></pre></td></tr></table></figure>
<p>这说明host已经有了%这个值，所以可以直接运行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<p>然后在试图远程连接服务器数据库，再自己的电脑主机安装navicat for mysql</p>
<p>安装好之后</p>
<p>创建新的mysql连接，一定不要选择ssh连接，就选择常规连接，主机名填自己的服务器ip，用户名和密码就是自己设置的服务器用户名和密码</p>
<p>然后就可以来创建wordpress使用的数据库表了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE wordpress;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>然后创建新用户及密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE USER wordpressuser@localhost;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET PASSWORD FOR wordpressuser@localhost&#x3D; PASSWORD(&quot;password&quot;);</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>创建wordpress数据库和用户联系</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost IDENTIFIED BY &#39;password&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>
<h2 id="2-安装php和其他的组件"><a href="#2-安装php和其他的组件" class="headerlink" title="2.安装php和其他的组件"></a>2.安装php和其他的组件</h2><p>1.1安装php5</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install php</span><br></pre></td></tr></table></figure>
<p>1.2安装php其他组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install php-mysql php-fpm php-gd libjpeg* php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-mcrypt php-bcmath php-mhash libmcrypt</span><br></pre></td></tr></table></figure>
<p>1.3启动php-fpm，查看是否监听端口以及地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;php-fpm start</span><br><span class="line">chkconfig php-fpm on</span><br><span class="line"></span><br><span class="line">netstat -tunlp |grep 9000</span><br><span class="line"></span><br><span class="line">ps aux |grep php-fpm</span><br></pre></td></tr></table></figure>
<h2 id="3-nginx安装和配置"><a href="#3-nginx安装和配置" class="headerlink" title="3.nginx安装和配置"></a>3.nginx安装和配置</h2><p>首先得安装一些必要的库,pcre、zlib等软件包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install pcre* zlib*</span><br></pre></td></tr></table></figure>
<p>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库。命令：</p>
<p>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib  库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure>
<p>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure>
<p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。<br>nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。</p>
<p>然后就是安装nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd &#x2F;usr&#x2F;local&#x2F;</span><br><span class="line">$ wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.8.0.tar.gz</span><br><span class="line">$ tar -zxvf nginx-1.8.0.tar.gz</span><br><span class="line">$ cd nginx-1.8.0  </span><br><span class="line">$ .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx </span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure>
<p>启动命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx</span><br></pre></td></tr></table></figure>
<p>检验一下是否成功</p>
<p>打开浏览器访问此机器的 IP，如果浏览器出现 Welcome to nginx! 则表示 Nginx 已经安装并运行成功</p>
<p>一些其他的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">重启：</span><br><span class="line">$ &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx –s reload</span><br><span class="line"></span><br><span class="line">停止：</span><br><span class="line">$ &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx –s stop</span><br><span class="line"></span><br><span class="line">测试配置文件是否正常：</span><br><span class="line">$ &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx –t</span><br><span class="line"></span><br><span class="line">强制关闭：</span><br><span class="line">$ pkill nginx</span><br></pre></td></tr></table></figure>
<p>可以想办法将nginx设定为系统服务，这样可以不用输入长串的命令来启动和重启</p>
<p>1.1新建文件：<code>vim /etc/init.d/nginx</code></p>
<p>1.2在该文件添加如下的内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh </span><br><span class="line"># </span><br><span class="line"># nginx - this script starts and stops the nginx daemon </span><br><span class="line"># </span><br><span class="line"># chkconfig:   - 85 15 </span><br><span class="line"># description: Nginx is an HTTP(S) server, HTTP(S) reverse  </span><br><span class="line">#               proxy and IMAP&#x2F;POP3 proxy server </span><br><span class="line"># processname: nginx </span><br><span class="line"># config:      &#x2F;etc&#x2F;nginx&#x2F;nginx.conf </span><br><span class="line"># config:      &#x2F;etc&#x2F;sysconfig&#x2F;nginx </span><br><span class="line"># pidfile:     &#x2F;var&#x2F;run&#x2F;nginx.pid </span><br><span class="line"> </span><br><span class="line"># Source function library. </span><br><span class="line">. &#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;functions </span><br><span class="line"> </span><br><span class="line"># Source networking configuration. </span><br><span class="line">. &#x2F;etc&#x2F;sysconfig&#x2F;network </span><br><span class="line"> </span><br><span class="line"># Check that networking is up. </span><br><span class="line">[ &quot;$NETWORKING&quot; &#x3D; &quot;no&quot; ] &amp;&amp; exit 0 </span><br><span class="line"> </span><br><span class="line"># 这里要根据实际情况修改</span><br><span class="line">nginx&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx&quot; </span><br><span class="line">prog&#x3D;$(basename $nginx) </span><br><span class="line"> </span><br><span class="line"># 这里要根据实际情况修改</span><br><span class="line">NGINX_CONF_FILE&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf&quot; </span><br><span class="line"> </span><br><span class="line">[ -f &#x2F;etc&#x2F;sysconfig&#x2F;nginx ] &amp;&amp; . &#x2F;etc&#x2F;sysconfig&#x2F;nginx </span><br><span class="line"> </span><br><span class="line">lockfile&#x3D;&#x2F;var&#x2F;lock&#x2F;subsys&#x2F;nginx </span><br><span class="line"> </span><br><span class="line">start() &#123; </span><br><span class="line">    [ -x $nginx ] || exit 5 </span><br><span class="line">    [ -f $NGINX_CONF_FILE ] || exit 6 </span><br><span class="line">    echo -n $&quot;Starting $prog: &quot; </span><br><span class="line">    daemon $nginx -c $NGINX_CONF_FILE </span><br><span class="line">    retval&#x3D;$? </span><br><span class="line">    echo </span><br><span class="line">    [ $retval -eq 0 ] &amp;&amp; touch $lockfile </span><br><span class="line">    return $retval </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">stop() &#123; </span><br><span class="line">    echo -n $&quot;Stopping $prog: &quot; </span><br><span class="line">    killproc $prog -QUIT </span><br><span class="line">    retval&#x3D;$? </span><br><span class="line">    echo </span><br><span class="line">    [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile </span><br><span class="line">    return $retval </span><br><span class="line">    killall -9 nginx </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">restart() &#123; </span><br><span class="line">    configtest || return $? </span><br><span class="line">    stop </span><br><span class="line">    sleep 1 </span><br><span class="line">    start </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">reload() &#123; </span><br><span class="line">    configtest || return $? </span><br><span class="line">    echo -n $&quot;Reloading $prog: &quot; </span><br><span class="line">    killproc $nginx -HUP </span><br><span class="line">    RETVAL&#x3D;$? </span><br><span class="line">    echo </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">force_reload() &#123; </span><br><span class="line">    restart </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">configtest() &#123; </span><br><span class="line">    $nginx -t -c $NGINX_CONF_FILE </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">rh_status() &#123; </span><br><span class="line">    status $prog </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">rh_status_q() &#123; </span><br><span class="line">    rh_status &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">case &quot;$1&quot; in </span><br><span class="line">    start) </span><br><span class="line">        rh_status_q &amp;&amp; exit 0 </span><br><span class="line">        $1 </span><br><span class="line">        ;; </span><br><span class="line">    stop) </span><br><span class="line">        rh_status_q || exit 0 </span><br><span class="line">        $1 </span><br><span class="line">        ;; </span><br><span class="line">    restart|configtest) </span><br><span class="line">        $1 </span><br><span class="line">        ;; </span><br><span class="line">    reload) </span><br><span class="line">        rh_status_q || exit 7 </span><br><span class="line">        $1 </span><br><span class="line">        ;; </span><br><span class="line">    force-reload) </span><br><span class="line">        force_reload </span><br><span class="line">        ;; </span><br><span class="line">    status) </span><br><span class="line">        rh_status </span><br><span class="line">        ;; </span><br><span class="line">    condrestart|try-restart) </span><br><span class="line">        rh_status_q || exit 0 </span><br><span class="line">        ;; </span><br><span class="line">    *)    </span><br><span class="line">      echo $&quot;Usage: $0 &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;&quot; </span><br><span class="line">        exit 2 </span><br><span class="line">esac</span><br></pre></td></tr></table></figure>
<p>1.3修改权限并开机启动</p>
<p>修改权限:<code>chmod 755 /etc/init.d/nginx</code></p>
<p>开机启动:<code>chkconfig nginx on</code></p>
<p>1.4这个时候的启动命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动服务：service nginx start</span><br><span class="line">停止服务：service nginx stop</span><br><span class="line">重启服务：service nginx reload</span><br></pre></td></tr></table></figure>
<p>这个时候修改nginx的nginx.conf配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line"></span><br><span class="line">root html;</span><br><span class="line"></span><br><span class="line">fastcgi_pass 127.0.0.1:9000;</span><br><span class="line"></span><br><span class="line">fastcgi_index index.php;</span><br><span class="line"></span><br><span class="line">fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line"></span><br><span class="line">include fastcgi_params;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">一定要注意将此处的scripts改成$document_root</span><br><span class="line">然后在上方</span><br><span class="line">location &#x2F; &#123;</span><br><span class="line"></span><br><span class="line">root html;</span><br><span class="line"></span><br><span class="line">index index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">加入index.php选项</span><br></pre></td></tr></table></figure>
<p>现在我们来测试下，nginx有关php的配置是否正确。编辑index.php文件，加入&lt;?php phpinfo();?&gt;，如下：</p>
<figure class="highlight plain"><figcaption><span>./html/index.php```</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">并删除index.html</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;rm -f .&#x2F;hrml&#x2F;index.html</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>nginx reload```生效</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">再次打开自己的ip地址</span><br><span class="line"></span><br><span class="line">如果出现phpinfo（）界面则成功</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 4.wordpress安装和配置</span><br><span class="line"></span><br><span class="line">1.1安装</span><br></pre></td></tr></table></figure>
<p>wget <a href="http://wordpress.org/latest.tar.gz" target="_blank" rel="noopener">http://wordpress.org/latest.tar.gz</a><br>tar-xzvf latest.tar.gz<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1.2配置</span><br></pre></td></tr></table></figure><br>cp ~/wordpress/wp-config-sample.php ~/wordpress/wp-config.php<br>sudo nano ~/wordpress/wp-config.php</p>
<p>然后修改数据库名，用户名和密码<br>// <strong> MySQL settings - You can get this info from your web host </strong> //<br>/<em>* The name of the database for WordPress </em>/<br>define(‘DB_NAME’, ‘wordpress’);</p>
<p>/<em>* MySQL database username </em>/<br>define(‘DB_USER’, ‘wordpressuser’);</p>
<p>/<em>* MySQL database password </em>/<br>define(‘DB_PASSWORD’, ‘password’);<br>```</p>
<p>这个时候你重启nginx，重启数据库你就会发现，你可以进入到wordpress安装界面，开始你的安装吧</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>腾讯云</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo生成静态页面时主页只显示dom文本无法正常显示</title>
    <url>/2020/08/18/hexo%E7%94%9F%E6%88%90%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E6%97%B6%E4%B8%BB%E9%A1%B5%E5%8F%AA%E6%98%BE%E7%A4%BAdom%E6%96%87%E6%9C%AC%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
    <content><![CDATA[<p>​        今天打算将原来在windows电脑上部署的hexo博客给迁移到macbook上，却遇到了很多问题，在网上找遍了很多却没有合适的答案，算是一个踩坑经历，特此记录。其中最主要的便是，当我hexo d -g生成静态页面之后，打开页面，没有渲染的主页，只有dom文本，打开生成的html文件，和显示在网页上的一致。</p>
<h2 id="主页无法显示的问题"><a href="#主页无法显示的问题" class="headerlink" title="主页无法显示的问题"></a>主页无法显示的问题</h2><p>在网页上的显示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#39;_layout.swig&#39; %&#125; &#123;% import &#39;_macro&#x2F;post.swig&#39; as post_template %&#125; &#123;% import &#39;_macro&#x2F;sidebar.swig&#39; as sidebar_template %&#125; &#123;% block title %&#125;&#123;&#123; config.title &#125;&#125;&#123;% if theme.index_with_subtitle and config.subtitle %&#125; - &#123;&#123;config.subtitle &#125;&#125;&#123;% endif %&#125;&#123;% endblock %&#125; &#123;% block page_class %&#125; &#123;% if is_home() %&#125;page-home&#123;% endif -%&#125; &#123;% endblock %&#125; &#123;% block content %&#125;</span><br><span class="line">&#123;% for post in page.posts %&#125; &#123;&#123; post_template.render(post, true) &#125;&#125; &#123;% endfor %&#125;</span><br><span class="line">&#123;% include &#39;_partials&#x2F;pagination.swig&#39; %&#125; &#123;% endblock %&#125; &#123;% block sidebar %&#125; &#123;&#123; sidebar_template.render(false) &#125;&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
<p>​        经过检索我现在知乎上发现了一个类似的问题-hexo页面无法正常显示：、</p>
<p><img src="https://pic1.zhimg.com/36a113f975708ddb6d87c8001488a8e0_r.jpg" alt=""></p>
<p>解决方案是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo某个版本没有添加</span><br><span class="line">hexo-renderer-ejs</span><br><span class="line">hexo-renderer-marked</span><br><span class="line">hexo-renderer-stylus</span><br><span class="line">这几个插件</span><br></pre></td></tr></table></figure>
<p>​        然而当我安装了这个插件时，依然没有发生变化，虽然这个答案没有解决问题，但是却给了我启发，因为我迁移到macbook上的时候，安装的依赖都是最新的，于是我开始怀疑我的hexo版本问题。当我检查新旧两个版本的hexo时果然发生了差异</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;输入hexo -v之后</span><br><span class="line">hexo: 5.0.2</span><br><span class="line">hexo-cli: 4.2.0</span><br><span class="line">os: Darwin 19.6.0 darwin x64</span><br><span class="line">node: 12.18.2</span><br><span class="line">v8: 7.8.279.23-node.39</span><br><span class="line">uv: 1.38.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.7</span><br><span class="line">ares: 1.16.0</span><br><span class="line">modules: 72</span><br><span class="line">nghttp2: 1.41.0</span><br><span class="line">napi: 6</span><br><span class="line">llhttp: 2.0.4</span><br><span class="line">http_parser: 2.9.3</span><br><span class="line">openssl: 1.1.1g</span><br><span class="line">cldr: 37.0</span><br><span class="line">icu: 67.1</span><br><span class="line">tz: 2019c</span><br><span class="line">unicode: 13.0</span><br></pre></td></tr></table></figure>
<p>​        下面是我原来windows电脑上的的package.json</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;hexo&quot;: &#123;</span><br><span class="line">  &quot;version&quot;: &quot;4.2.1&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">  &quot;hexo&quot;: &quot;^4.2.1&quot;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​        于是我删掉了安装的node_module,修改了package.json的hexo版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;重新安装</span><br><span class="line">npm install</span><br><span class="line">&#x2F;&#x2F;一键三连</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p>​        最终终于显示了原来的博客主页，<a href="https://decadeheart.github.io/">欢迎大家来访问我的博客</a></p>
<p>​    <img src="https://res.cloudinary.com/dyb29pfpm/image/upload/v1597732877/%E6%88%AA%E5%B1%8F2020-08-18_%E4%B8%8B%E5%8D%882.35.52_exs6hk.png" alt=""></p>
<h2 id="迁移博客的其他问题"><a href="#迁移博客的其他问题" class="headerlink" title="迁移博客的其他问题"></a>迁移博客的其他问题</h2><p>​        在我想下载回原来的依赖时，发现了一些warning，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(node:37667) Warning: Accessing non-existent property &#39;lineno&#39; of module exports inside circular dependency</span><br><span class="line">(Use &#96;node --trace-warnings ...&#96; to show where the warning was created)</span><br><span class="line">(node:37667) Warning: Accessing non-existent property &#39;column&#39; of module exports inside circular dependency</span><br><span class="line">(node:37667) Warning: Accessing non-existent property &#39;filename&#39; of module exports inside circular dependency</span><br><span class="line">(node:37667) Warning: Accessing non-existent property &#39;lineno&#39; of module exports inside circular dependency</span><br><span class="line">(node:37667) Warning: Accessing non-existent property &#39;column&#39; of module exports inside circular dependency</span><br><span class="line">(node:37667) Warning: Accessing non-existent property &#39;filename&#39; of module exports inside circular dependency</span><br><span class="line">(node:37667) Warning: Accessing non-existent property &#39;lineno&#39; of module exports inside circular dependency</span><br><span class="line">(node:37667) Warning: Accessing non-existent property &#39;column&#39; of module exports inside circular dependency</span><br><span class="line">(node:37667) Warning: Accessing non-existent property &#39;filename&#39; of module exports inside circular dependency</span><br><span class="line">(node:37667) Warning: Accessing non-existent property &#39;lineno&#39; of module exports inside circular dependency</span><br><span class="line">(node:37667) Warning: Accessing non-existent property &#39;column&#39; of module exports inside circular dependency</span><br><span class="line">(node:37667) Warning: Accessing non-existent property &#39;filename&#39; of module exports inside circular dependency</span><br></pre></td></tr></table></figure>
<p>​        通过在网上搜索，发现是node版本的问题，我在mac上是用brew直接下载的最新版本v14，然后网上的答案显示v12版本的node是没有问题的，所以更新了node版本，解决了问题。</p>
<h2 id="在mac上如何重新安装某一版本的node"><a href="#在mac上如何重新安装某一版本的node" class="headerlink" title="在mac上如何重新安装某一版本的node"></a>在mac上如何重新安装某一版本的node</h2><h3 id="完全卸载本地环境原来的node"><a href="#完全卸载本地环境原来的node" class="headerlink" title="完全卸载本地环境原来的node"></a>完全卸载本地环境原来的node</h3><p>在安装node前，首先要考虑后续会不会切换版本，如果需要，<strong>必须要求nvm在Node安装之前</strong></p>
<ul>
<li><p>先安装nvm</p>
</li>
<li><p>在通过nvm安装自己需要的node</p>
<p>否则，在nvm安装之前的安装的node是不会被nvm管理起来的！</p>
</li>
</ul>
<p>那如果已经安装了node，却还要使用nvm管理版本的话，怎么办？我很不幸的告诉你，你需要删除已安装的node。</p>
<p> 下面是删除的Node和npm的命令，在终端中执行即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo npm uninstall npm -g</span><br><span class="line">sudo rm -rf &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules &#x2F;var&#x2F;db&#x2F;receipts&#x2F;org.nodejs.*</span><br><span class="line">sudo rm -rf &#x2F;usr&#x2F;local&#x2F;include&#x2F;node &#x2F;Users&#x2F;$USER&#x2F;.npm</span><br><span class="line">sudo rm &#x2F;usr&#x2F;local&#x2F;bin&#x2F;node</span><br><span class="line">sudo rm &#x2F;usr&#x2F;local&#x2F;share&#x2F;man&#x2F;man1&#x2F;node.1</span><br><span class="line">sudo rm &#x2F;usr&#x2F;local&#x2F;lib&#x2F;dtrace&#x2F;node.d</span><br></pre></td></tr></table></figure>
<h3 id="下载nvm，使用nvm来管理Node版本"><a href="#下载nvm，使用nvm来管理Node版本" class="headerlink" title="下载nvm，使用nvm来管理Node版本"></a>下载nvm，使用nvm来管理Node版本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -o- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;nvm-sh&#x2F;nvm&#x2F;v0.34.0&#x2F;install.sh | bash</span><br></pre></td></tr></table></figure>
<p>此处注意不要使用brew安装，否则会掉坑。</p>
<h3 id="关闭终端nvm失效，区分zsh和bash"><a href="#关闭终端nvm失效，区分zsh和bash" class="headerlink" title="关闭终端nvm失效，区分zsh和bash"></a>关闭终端nvm失效，区分zsh和bash</h3><p>对于一般的终端，默认是bash窗口，所以在安装完nvm后，根据如下图提示，进行操作</p>
<p><img src="https://img-blog.csdnimg.cn/20200309201026300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMyMDUxNjU=,size_16,color_FFFFFF,t_70" alt=""></p>
<p>配置环境变量(无 .bash_profile)</p>
<ol>
<li><p>添加 .bash_profile在终端键入<code>touch ~/.bash_profile</code></p>
</li>
<li><p>打开 .bash_profile在终端键入<code>open -e .bash_profile</code></p>
</li>
<li><p>在 .basn_profile中输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export NVM_DIR&#x3D;&quot;$HOME&#x2F;.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR&#x2F;nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR&#x2F;nvm.sh&quot;  # This loads nvm</span><br><span class="line">[ -s &quot;$NVM_DIR&#x2F;bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR&#x2F;bash_completion&quot;  # This loads nvm bash_completion</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置生效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>此时就有坑点了，如果你不进行以下的操作，你会发现，node -v命令只会在当前窗口生效，而其他窗口node -v会说找不到指令，你可以看看你的终端名称是否是zsh，这说明我们还需要配置环境变量</p>
<p>配置环境变量</p>
<ol>
<li><p>添加 .zshrc在终端键入<code>touch ~/.zshrc</code></p>
</li>
<li><p>打开 .zshrc在终端键入<code>open -e .zshrc</code></p>
</li>
<li><p>在 .zshrc中输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export NVM_DIR&#x3D;&quot;$HOME&#x2F;.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR&#x2F;nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR&#x2F;nvm.sh&quot;  # This loads nvm</span><br><span class="line">[ -s &quot;$NVM_DIR&#x2F;bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR&#x2F;bash_completion&quot;  # This loads nvm bash_completion</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置生效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="切换node版本失效"><a href="#切换node版本失效" class="headerlink" title="切换node版本失效"></a>切换node版本失效</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 将要切换的版本设置为default</span><br><span class="line">nvm alias default 8.16.0</span><br><span class="line"># 切换版本，这样在那个窗口都可以使用切换后的版本</span><br><span class="line">nvm use 8.16.0</span><br></pre></td></tr></table></figure>
<h3 id="zsh-compinit提示“insecure-directories”怎么办"><a href="#zsh-compinit提示“insecure-directories”怎么办" class="headerlink" title="zsh compinit提示“insecure directories”怎么办"></a>zsh compinit提示“insecure directories”怎么办</h3><p>当执行<code>source ~/.zshrc</code>之后显示如下提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zsh compinit: insecure directories, run compaudit for list.</span><br><span class="line">Ignore insecure directories and continue [y] or abort compinit [n]?</span><br></pre></td></tr></table></figure>
<p>解决方法如下：</p>
<p>zsh配置的所属权限问题。执行如下命令修改权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd &#x2F;usr&#x2F;local&#x2F;share&#x2F;zsh</span><br><span class="line">$ sudo chmod -R 755 site-functions</span><br></pre></td></tr></table></figure>
<p>再次执行 <code>source ~/.zshrc</code>，如果问题还未解决，这时你就需要修改 <code>site-functions</code> 的所有者</p>
<ul>
<li>OSX 10.9及以下系统执行如下命令：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd &#x2F;usr&#x2F;local&#x2F;share&#x2F;</span><br><span class="line">$ sudo chown -R root:root site-functions</span><br></pre></td></tr></table></figure>
<p>OSX 10.9以上系统执行如下命令（user:staff 是 OSX 系统默认权限）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd &#x2F;usr&#x2F;local&#x2F;share&#x2F;</span><br><span class="line">$ sudo chmod -R 755 zsh</span><br><span class="line">$ sudo chown -R root:staff zsh</span><br></pre></td></tr></table></figure>
<p>再次执行 <code>source ~/.zshrc</code></p>
<p>终于搞定了</p>
<h2 id="经验教训"><a href="#经验教训" class="headerlink" title="经验教训"></a>经验教训</h2><p>迁移项目的时候，一定要注意环境的配置，依赖的版本，依赖不是最新的才是最好用的，最好能够保持原来的版本号，不要擅自更新！！！</p>
]]></content>
      <categories>
        <category>Debug</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>走马西风长路</title>
    <url>/2020/05/22/%E8%B5%B0%E9%A9%AC%E8%A5%BF%E9%A3%8E%E9%95%BF%E8%B7%AF/</url>
    <content><![CDATA[<p>“曾梦想仗剑走天涯，去看看世界的繁华…”</p>
<p>“没有什么能够阻挡，我对自由的向往…”</p>
<p>32座的808城际公交车稳稳的行驶在，几乎每隔100米就会出现一个隧道的兴山通往宜昌的省道上，车窗外的阳光掠过一座座丘陵，映过一潭潭清泉，又渗透进车内，映红了我的脸，或许是多日不见的这份温暖，才让我从一群糙汉子的大合唱中回过神来，想起了窗外错过的这份景致，想起了这些天徒步神农架的经历</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4958474-268bc67ac2322263.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="窗外风景.jpg"></p>
<p>我偷偷掏出被一群饿狼哄抢之后只剩十六分之一的蜂蜜酒，润了润刚才合唱的时候喊得有些发哑的喉咙，应该是那句“蓝莲花”拖得太长吼的太起劲留下的后遗症，不过比起来包车k歌的酣畅淋漓，这显得很微不足道。我触了触旁边三天一直不显山不露水如今才路出马脚的隐藏歌王。</p>
<p>“还是唱许巍的歌，大家才燃的起来”</p>
<p>“小钢炮切吧，我更喜欢杰伦”</p>
<p>“…”<br><a id="more"></a></p>
<h2 id="【做梦的-醒来的-沉默着-躁动着】"><a href="#【做梦的-醒来的-沉默着-躁动着】" class="headerlink" title="【做梦的 醒来的 沉默着 躁动着】"></a>【做梦的 醒来的 沉默着 躁动着】</h2><p>尼汝-亚丁。看到探险队暑假的徒步计划路线的时候，我是纠结的。大一太浪，大二必须得猥琐发育了。所以我狠心卖掉了陪伴我环过海南，穿过西藏的小五，将一大串的群受进了群助手，前方找到的目标很清晰，学习的状态也是渐入佳境，一切都表明，这个学期很关键，不应该浪。直到尼汝亚丁这四个字入了我的眼，闯进我的心，压抑的一切又躁动起来了。 唉，我就不是一个坚守得住flag的人，于是又入了徒步坑，选装备啊买装备，卖车的钱都收不住，于是又认识了稀里糊涂搜索尼汝亚丁乱入我们群的华东政法大学的两只魔都小姐姐。于是买了装备怎么能不试一番呢？怎么能不为8月的徒步做好准备呢?于是理所当然的踏上了这次清明节徒步神农架的旅途。</p>
<h2 id="【一个安静的下午-一场突然的离开】"><a href="#【一个安静的下午-一场突然的离开】" class="headerlink" title="【一个安静的下午 一场突然的离开】"></a>【一个安静的下午 一场突然的离开】</h2><p>当我背好行囊，准备出发的时候，室友们是震惊的，尤其是打算让我帮他打三天饭菜企图宅在宿舍写代码的某只得知他的计划会泡汤的时候。我蜜汁微笑了一下，赶紧闪人，载着老船长（环海南的时候的队友，因为极喜欢“开车”又是船海学长，故有此外号），颤颤巍巍的来到了南大门集合处。我的内心是有些忐忑的，因为最近习惯了猥琐发育，所以在群里借着坎儿（15年滇藏队成员，虽然是学长，但长相过于秀（gay）气，儿化直接降一辈，故有此外号）的台阶，伪装了一把学妹，成功忽悠到了两只魔都小姐姐，和同济的一位学姐。</p>
<p>然而此刻因为魔都小姐姐的提前到来，还有一位接待她们的大四老学姐的泄露情报，已经东窗事发。面对她们的愤怒，我只好庆幸今天是愚人节。有惊无险的来到了汉口火车站，因为是凌晨的班次，所以我们还有大把的时间可以挥霍。这个时候我们也和同济的学姐，还有多日不见的小明（15年滇藏队成员，16年车队队长）汇合了，小明不负众望的给我们带来一瓶看起来很高端的二锅头，我满怀欣喜地打算闷一口，然而打开瓶盖之后飘出的一股味道，我有些疑惑了，这特么不是医用酒精的味道么， 我又给队里唯一的学妹闻了闻，连她都觉得是医用酒精。我联想到了小明临床医学的专业，平时宰兔子解剖牛蛙也不在少数，从实验室顺一瓶医用酒精出来兑着喝这样的事情，他这货应该还是做的出来的。我愤怒的去质问小明，小明一把抢过假酒，“居然怀疑是假酒，就别喝”转身分给了众人，每人一瓶盖，我见状也觉得有些奇怪，本着大胆尝试的心态还是喝了一瓶盖的假酒，可能是没啥经验，并没有分辨出来和普通二锅头的区别。不过最终的事实还是证明，假酒害人，喝了大部分假酒的小明，在火车上离奇晕倒，经过坎儿和赵姓队友（队长基友）的抢救才得以清醒。我庆幸自己机智的喝了一瓶盖就去网吧开黑了，没和他们在汉口火车站广场打地铺喝酒侃大山，躲过一劫。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4958474-6263d79e7145696a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="启程.jpg"></p>
<h2 id="【想一去不回的冒险-像远方住着另一个自己】"><a href="#【想一去不回的冒险-像远方住着另一个自己】" class="headerlink" title="【想一去不回的冒险 像远方住着另一个自己】"></a>【想一去不回的冒险 像远方住着另一个自己】</h2><p>当我拄着登山杖，穿行在复杂陡峭大部分地方只能供一个人侧身走过的险峻山道的时候，我并没有料到会有这样的山路，没有人想象的到数小时之前还在水电之都宜昌，乘车翻过大山，颠簸过盘山公路，如今已在神农架失去联系的无人区。四周确实是荒芜人烟了，只看得到成片的灌木和高大的我叫不出名字的树木，脚下的路是沿着河谷的溪流溯溪而上的，有的时候会直接穿过断续的溪流，有的时候会在陡峭的坡面高于溪水之上。我们像发现了新大陆般的探索着，不知名的点缀山道的野花，清澈见底可以直接饮用的溪水，还有眼尖的坎儿发现的第一片雪块。直到后来我们走进还被大片残雪覆盖着的森林，大家都欢畅起来了，脚底下的登山鞋踩得咯吱作响，呼吸着冰冷到有质感带着森林气息的纯净空气，感觉被武汉雾霾毒害的肺瞬间空灵了，贪婪的享受着呼吸。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4958474-34167ef42180f5c5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="初始的山路.jpg"></p>
<p>我觉得我不得不做出一个决定，一开始我的打算是开启风景模式，在最后和押队一起慢慢走，一边走路一边拍照，甚至还幻想着掏出我背包里沉重的单反，后来我发现我错了，这样的山路，一只手拄登山杖，另一只手还得抓着上方的岩石或者旁边树木的枝干，全身贯注盯着脚下变换的地形，才能安全的不拖后腿的跟上队伍，有的时候一只手掏出手机拍张照，再往前的时候，都有可能在背后沉重背包的作用下，失了重心，脚下打滑。前面一直传来向导催促的呼喊，因为我们折腾到下午4点才开始正式进山徒步，这意味着必须得赶路来少走夜路，我在和坎儿不急不慢的殿后，一路走来，刚赶上前方队伍就立即出发，都没有休息的时间，我发现长时间的急行军，我在负重情况下走这样的路，体力只够勉强跟上，我开始专心的爬起了山路，真的是爬，因为手脚并用。随着夜幕的降临，我们也在不断加快步伐，前方不时传来队友们提醒方向的呼嚎，我们也像狼嚎那般大声的回应着表示我们没有掉队，脚下的路，因为雪水的融化，开始变得有了湿气和泥泞。</p>
<p>我和坎儿还有老船长，依然在最后不急不慢的走着。因为我们发现了前面，体力有些不支的蒋学长，不能让队友落单，这在大家的心里都是心照不宣的。我们鼓励着学长坚持前行，然而前方好几个陡坡，因为泥泞，因为松软的土质，体型有些大的蒋学长都显得力不从心，很难爬上去。我们一开始只是以为他体力不行了，直到他艰难爬过生长着一颗歪脖子树的险坡，不得不休息的时候，他告诉我们他头晕，看不清前方的路，我们才意识到了问题的严重性，我们就着险坡原地休息，给他喝了些温水，吃了些巧克力补充能量。此时我们已经据前方的队友很远了，夜幕下也看不清人影，蒋学长的情况并没有好转，甚至还蜷着休息看起来都快睡着了。我们只好大声呼喊前面的同学，赵姓救火队员这个时候又挺身而出了，从山上下来接应我们，还将他自己的硬汉轻装和蒋学长的重装背包交换，在他和队长的帮助下，蒋学长终于可以继续前行。因为看不清前方的路线，我们差点迷失在黑漆漆的丛林里。不过幸好被前方的队友发现掉队，及时的对喊才模糊确定了方位。当我们挣扎着穿过被落叶覆盖的丛林，前方映入眼帘的是难得一见的开阔之地-被积雪覆盖的土公路，然而我以为离目的地已经不远的欣喜立马就被山口吹过开阔地带的瑟瑟冷风给熄灭了。我并没有预料到当下这种低温，因为队长告诉我们这是春游路线，我本着不带一切无用之物减少负重的原则，舍弃了极占空间的冲锋衣保暖内胆，我一边在心中咒骂着谎报军情的队长（我隔壁班武术高强据说已打通任督二脉的万少），一边小跑着裹紧全身向前企图产生更多热量。对于刚才在黑夜里差点在山林迷路，我还是心有余悸的，我又忘记带手电，所以这次学乖了走中间。</p>
<p>漆黑的夜里，冷风呼啸，所见之处只有被队友的手电照亮的那方刺目的雪白，是了，脚下是比刚才更深的积雪，一开始我还很兴奋的专往雪深之处趟，一来是想擦净在山林中行走留在鞋上厚厚的泥土，二来通过队友们闪烁的灯光，我隐约看到了路旁陡峭的山体还有坡下黑压压的树群，湿滑的被队友踩硬的冰雪让我有种失足落崖的危机感。不过我很快就乐极生悲的发现，高帮的登山靴里面灌进了冰冷的雪渣，一路走过去，不停带走着我的热量变成雪水，心里早已跑过一万匹草泥马。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4958474-0926f448bc4d1d34.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="雪夜急行.jpg"></p>
<p>空寂的深山，传来了断断续续的口哨声，寒夜似乎是更好的导体，让它放得更大声传得更远。眼前的这个被雪堆满的山坡，很艰难，我感觉我已经体力不够了，但我依然在咬牙坚持，因为我身后还有紧跟而上的队友，我不能减慢队伍行进的速度。原本让人兴奋的冰雪，此时成为了陡坡的帮凶，让我们的每一步稍有不慎都容易滑落，黑夜里，唯一能够指望的便是队友在前方踏过的足迹，它是此处安全可落脚的证明，我机械的迈着沉重的步伐，我觉得必须要想写办法转移一下注意力了。于是吹起了口哨，麻木的继续攀爬着这个似乎长的出乎意料的雪坡。当我吹完第四首歌的时候，我终于看到了顶峰处的营地，脚下是松软的蓬蓬草，湿气很重，我并没有料想到这次的户外露营会是这样艰难的环境。当时的我们因为黑夜还一无所知，只知道这是一块平坦的空地，直到天亮起身出了帐篷，才发现，已是雪山顶上，近处白雪皑皑，远处雪化的小溪潺潺。</p>
<h2 id="【睡在哪里都是睡在夜里】"><a href="#【睡在哪里都是睡在夜里】" class="headerlink" title="【睡在哪里都是睡在夜里】"></a>【睡在哪里都是睡在夜里】</h2><p>当我搭建好我的小虫三代柴火炉，在寒夜里四处捡拾柴火的时候，我其实是早已幻想好了一副美好的画面，喝着溪水煮的咖啡，吃着雪水煮的泡面，对了，还有一只，坎儿煎的恰到好处的鸡蛋。因为这一次在吃的准备上面还是很齐全的，煎锅、茶壶、煮锅、柴火炉都准备好了，正打算大展身手。然而这雪山顶上，湿气实在太重，几乎都寻不到什么干柴，好不容易点燃了星星之火，打算猥琐发育一波，然而后继乏力，虽然有老船长这个天然氧吧，倾尽全力，三番五次重新吹起了大火，还是遭不住薪柴太湿，溪水烧到半开就熄灭了。其实，在帐篷区的中央，万少正在烧着燃料，气炉上一锅锅的泡面正在沸腾着，考虑到万少要先照顾妹子和女票，所以才有了另起炉灶的想法，奈何天公不作美，只好依靠全队唯一的气炉了。</p>
<p>当我吃上热气腾腾，虽然一捞出来就变凉的泡面的时候，终于知道什么是感动和美味，从来没有觉得大家吃剩的泡面汤如此温暖和酸爽。我也深刻的意识到了，带有温度的食物在户外的重要意义。那是压缩饼干、牛肉、巧克力都无法比拟的美好。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4958474-5205de094e215f09.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="护蛋小分队.jpg"></p>
<p>坎儿这次的徒步代号是，“护蛋行动”，抱着在户外吃上煎蛋的宏伟目标，他一路上都在小心翼翼的守护着他来之不易的12枚鸡蛋，此刻虽然已经很晚了，但我们依然打算开始我们的第一次煎蛋尝试，借来万少的气炉，拿来坎儿的鸡蛋，贡献出我的煎锅，哦，还有一包方便面酱料包，我们满怀期待的开始了煎蛋尝试。首先是酱料包打底当油，然后是坎儿企图磕破鸡蛋未果，船长助攻，打入两个鸡蛋，甩锅的时候，蛋黄荡漾成一团，我就知道要失败了，毕竟油太少，最后我们灵机一动，干脆全部搅碎，竟然弄出了神似蟹黄酱一般的黑暗料理，就着几块面包，也吃得美滋滋的。虽然我们的第一尝试以失败告终，然而第二天露宿在彩虹保护站的我们，借到了农家的油，终于煎出了成色极佳的煎鸡蛋，也算是为坎儿此次的行动划上了圆满的句号。</p>
<p>受不住外面寒冷的风，和站久留就会将鞋底浸湿的草地，我们早早的钻进了自己的帐篷。还好，我们准备的睡袋够厚足以抵御零下的低温，钻进睡袋我才感受到了久违的温暖，因为太累，大家一夜无话，想到了之前拍星空和看日出的计划都要因为明天的坏天气而泡汤，我也在遗憾中，沉沉睡去。夜里被冻醒好几次，隐隐约约听到了雪子密集砸落帐篷的声音，还有呼啸的风声，想到之前在黑夜里搭帐篷的时候，敷衍的拉了一下风绳就没管了，睡梦里的我虽然抱着一丝对帐篷有可能被风掀翻的担忧，但还是因为寒冷而选择鸵鸟原则，就这样睡到了天亮。我彻底清醒之后，才发现被冻醒的真正原因…竟然睡袋上还有两处拉链没有拉上，就这样不停的灌入冷风…</p>
<h2 id="【听一路的声音】"><a href="#【听一路的声音】" class="headerlink" title="【听一路的声音】"></a>【听一路的声音】</h2><p><img src="http://upload-images.jianshu.io/upload_images/4958474-6b8708816f13a6c9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="雾中前行.jpg"></p>
<p>白茫茫的世界，寂寥无声，能见度不足十米的白雾笼罩下面，是一片广袤的暗黄的透着湿气的高山草地，稀疏几棵不足人高的灌木，还有一队默默前行的身影。我行走在队伍之中，感受着被湿气压迫的都低沉几分，寒冷几分的空气，觉得是时候来一波音乐了。打开了蓝牙音响，本来是打算节省手机的电量，就直接播放的音响存储卡中的音乐，这些音乐曾经陪伴我走过了滇藏两千公里，大部分都是节奏感极强的电音，当初滇藏骑行，跟着电音的节奏保持踏频，那叫一个爽快，连爬坡都变轻松了 。还记得每当循环到《Fade》，就是飙车的时刻，在白马雪山，就着这首歌，连超几波骑行队伍，怒甩几座山头。我觉得现在这些歌正适合我们的队伍，于是就播放起来了。然而，飘向远方的音乐却是断断续续的，我连续切换，都有相同的问题，只有我前几天添加的几十首民谣是正常的。我怀疑是小钢炮在滇藏路上过于颠簸，以致于连曾经的歌都变成一颠儿一颠儿的了。这时候老船长忍受不住这鬼畜的声音了，走过来要连蓝牙切他的歌，我欣然答应，不过几分钟之后，我就后悔了。老船长的曲风，居然是慵懒，低沉，绵长的无病呻吟类的民谣，催眠得走在雪坡之上的我，都显得无精打采了  。我觉得有必要让老船长认识一下真正曲风激昂的民谣，也为了让自己抖擞精神，最终还是接上了自己的蓝牙。当一首首歌回荡在这片雪原，我觉得我更深的理解了“孤独旅人配民谣”的情境。忘不了，海口深夜的ktv，鲁队嫌弃我和他的合唱，又重唱一遍的《南山南》。忘不了，傍晚雨中的丽江古城，四面开着竹窗的小酒吧，驻场那直击灵魂的《走歌人》。忘不了，清晨的洱海旁边一处小食摊点，我吃着烧饵块，小浪哥放的那首《七月上》，简直就是他不羁的写照。这些民谣或许以前听起来都是那么单薄，如今再听却是回忆满满，歌中滋味无限。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4958474-5d4557dff1fc88fd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>我就这样听着歌，爬上了一座雪山，穿过了山顶的风雪，又开始爬入到茂密的原始丛林，脚下滑过几十次坡，翻过无数枯枝断树，跨过数条溪流小河，这才从山上跌入烟火人间。不知不觉中，我的蓝牙音响都用光了两块移动电源…</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4958474-3166509e2440a713.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="丛林之路.jpg"></p>
<h2 id="【落幕-又会再上演】"><a href="#【落幕-又会再上演】" class="headerlink" title="【落幕 又会再上演】"></a>【落幕 又会再上演】</h2><p>归途是充满欢乐的，我忽悠着同济学姐喝下了一杯蜂蜜酒，又忽悠着赵姓队友买下了可以美容养颜的蜂蜜膏。于是一路上就喝一口酒走一段路，催着喝醉了酒的学姐在雾中前行着，相比于之前几天，今天的路线才算得上是春游踏青。伴随着808的歌声和一路欢笑，我们回到了宜昌东站，终于吃上了这些天来头一顿热饭热菜。进站的时候，魔都的小姐姐携带的免洗喷雾被要求上交，本着不浪费的原则，我们在入站安检口排成一圈来了一次高端洗发。相比于女生们分别时左拥右抱的腻歪，我倒是感觉小明那句“青山不改，绿水长流，告辞”愈发有意思。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4958474-066d5deb1bed6880.gif?imageMogr2/auto-orient/strip" alt="洗头.gif"></p>
<p>或许我们这些人在这次的旅途之后，有一部分人在暑假的尼汝亚丁徒步中还能再相遇，但大多数人应该就是真正的分别了，虽然只有短短三天的相遇和相处，但是彼此之间留下的欢乐和回忆都是难以忘怀的，青山不改，绿水长流，咱们有缘江湖再见。</p>
<h2 id="【世界太大-人会迷路-要么庸俗-要么孤独】"><a href="#【世界太大-人会迷路-要么庸俗-要么孤独】" class="headerlink" title="【世界太大 人会迷路 要么庸俗 要么孤独】"></a>【世界太大 人会迷路 要么庸俗 要么孤独】</h2><p>曾经，我告诉别人，我为什么选择骑行，如今，蒋学长又借这次的经历，告诉我们他为什么选择徒步。蒋学长在第一天爬山之时就出现了身体不适，但他坚持爬上了山，还在高海拔寒冷的雪山顶睡了一夜。第二天，攀爬雪山的时候，严重的高原反应让他濒临死亡，我们甚至都呼叫了救援队。他却在队友的帮助之下，自己挺了过来，走完了接下来的路。他说，徒步是为了圆一个梦，圆一个找到了最初的梦想的梦，他说，徒步是一场修行，是想像徐霞客，用双脚丈量世界，以生命作为赌注的冒险，不是为了获得饭后的谈资，而是为了找回自己，追求最初的梦想。</p>
<p>在我眼中，骑行和徒步都是一种生活方式，是在释放自我，是不同的生活体验。世界太大，人生太短，为何不给自己一个寻找不同经历的机会。如果你在都市中迷失了自我，找不到方向。为何不背起行囊，去往远方，远方一定住着另一个自己，那个最真实的自己。</p>
<p>和你一同冒险的朋友们，归来之后，就算穿上正装，就算穿上礼服，就算再人模狗样，我也能永远记住——那个最真实的你。</p>
]]></content>
      <categories>
        <category>旅行</category>
      </categories>
      <tags>
        <tag>徒步</tag>
      </tags>
  </entry>
  <entry>
    <title>室内定位发展趋势分析</title>
    <url>/2020/08/18/%E5%AE%A4%E5%86%85%E5%AE%9A%E4%BD%8D%E5%8F%91%E5%B1%95%E8%B6%8B%E5%8A%BF%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>​<br>​        研究生阶段第一个项目就是室内蓝牙定位，特此分析一下现在国内外专家研究室内导航定位方法和技术进行的探索研究。英国剑桥大学提出了基于红外的<strong>Active Badge</strong>室内定位系统、美国的苹果公司开发了基于无线局域网的<strong>iBeacon</strong>室内定位系统、微软研发了基于接收信号强度指示的<strong>RADAR</strong>室内定位系统、香港科技大学提出了基于射频识别的<strong>LANDMARC</strong>定位系统以及北京邮电大学主导提出了“<strong>寻鹿</strong>”室内定位系统等。室内定位从技术角度可以采用WIFI、蓝牙、蜂窝网络、超宽带、超声波、雷达、地磁指纹和伪卫星定位等实现室内人员导航和对室内人、物的定位、跟踪。从室内定位原理出发可以将室内定位技术分为五类：</p>
<ul>
<li><p>无线信号交汇定位导航</p>
</li>
<li><p>数据库匹配定位导航</p>
</li>
<li><p>基于惯性传感器的航迹推算定位导航</p>
</li>
<li><p>视觉定位导航</p>
</li>
<li><p>多传感器组合定位导航</p>
<p>下文将分别从上述五个分类对室内定位的相关方法、原理、技术应用以及现状进行介绍</p>
</li>
</ul>
<p>分析。</p>
<h2 id="无线信号交汇定位"><a href="#无线信号交汇定位" class="headerlink" title="无线信号交汇定位"></a>无线信号交汇定位</h2><h3 id="原理及方法"><a href="#原理及方法" class="headerlink" title="原理及方法"></a>原理及方法</h3><ul>
<li>信号到达时间</li>
</ul>
<p>​    TOA（Time of Arrival）是在已知信号传播速度（如光速、超声波等）的基础上，通过测量信号从发送端到接收端的时间，从而计算发送端到接收端的相对距离，再根据发送端的实际位置，来确定接收端在世界坐标系上的位置。</p>
<p>   TOA定位原理简单且定位精度高，但要求发送端和接收端必须有精准的时钟同步，这对硬件要求很高。该方法至少需要三个基站，才能计算目标的位置，其定位示意图如图所示。<br><img src="https://img-blog.csdnimg.cn/20200825132054914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3OTkzMTIy,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>三个基站测得与MS的距离分别是   $r_1,r_2,r_3$ 以各自基站为圆心测量距离为半径，绘制三个圆，其交点即为MS的位置。一般可以根据最小二乘算法计算MS 的估计位置，假设MS的位置坐标为(x,y),N个BS的位置坐标为$(x_i,y_i)$,根据其几何意义，则他们之间满足的关系是</p>
<script type="math/tex; mode=display">
(x_i - x)^2+(y - y_i)^2 = r_i^2 ，i=1，2，...，N</script><p>将公式展开，化简得到</p>
<script type="math/tex; mode=display">
x_i^2+y_i^2+x^2+y^2-2x_ix-2y_iy=r_i^2</script><script type="math/tex; mode=display">
\implies K_i=x_i^2+y_i^2,R=x^2+y^2</script><script type="math/tex; mode=display">
\implies r_i^2-K_i=-2x_ix-2y_iy+R</script><script type="math/tex; mode=display">
\implies \begin{bmatrix}r_1^2-K_1\\r_2^2-K_2\\.\\r_n^2-K_n\end{bmatrix}=\begin{bmatrix}-2x_1&-2y_1&1\\-2x_2&-2y_2&1\\.\\-2x_n&-2y_n&1\end{bmatrix}\begin{bmatrix}x\\y\\R\end{bmatrix}</script><script type="math/tex; mode=display">
\implies Y=AX</script><p>我们要求得坐标(x,y)，即求得X，利用最小二乘法可得</p>
<script type="math/tex; mode=display">
X=(A^TA)^-1(A^TY)</script><ul>
<li>信号到达时间差</li>
</ul>
<p>TDOA(Time Diffrence of Arrival)是在发送端发送两种不同频率的信号（如：超声波和RF），利用两种信号在空气中的传播速度间的差异，分别测量两种信号到达接收端的时间，从而利用时间差来计算距离，TDOA测量精度可达厘米级别，并且不要求发送端和接收端时钟同步。</p>
<ul>
<li>信号到达角</li>
</ul>
<p>AOA(Angel of Arrival)的基本原理是锚节点发出较窄的旋转波束，在定位节点测量传播方向和夹角，计算出发送端两条信号线路间的交点位置，从而获取接收端的位置信息。AOA的计算方式简单，但是发送端必须配备有向天线或天线阵列，该方法成本较高，并且AOA在非视距环境中会因为多径效应出现误判等情况。</p>
<ul>
<li>信号接收强度</li>
</ul>
<p>RSS（Recevied Signal Strength）是利用室内信道传输模型中路径损耗和距离间的关系来计算发送端和接收端之间的距离。RSS根据信号的传播建立传输损耗模型，根据公式计算距离，但由于实际环境中存在各种干扰，因此会导致不同程度的定位偏差。</p>
<ul>
<li>三边定位法</li>
</ul>
<p>三边定位法是测量待测目标点T到三个不同一直线上的3个参考点R1、R2、R3的距离，利用三边距离和参考点位置，根据公式来估计待测点位置，如图所示。<br><img src="https://img-blog.csdnimg.cn/20200825131800419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3OTkzMTIy,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>三边定位法借助TOA、TDOA和AOA进行测量，有时也通过RSS和返回飞行时间进行测量。三边定位法测量精度高，但是在非视距环境中信号会发生衰减、散射等，影响测量精度。</p>
<ul>
<li>其他方法</li>
</ul>
<p>除了上述介绍的方法，用于无线信号交汇定位的方法还有近邻探测法、质心法、极点法、遮蔽法。它们各有优缺点，近邻法探测成本低，但极度依赖于参考点位置信息，它不一定能得到待测目标的绝对位置信息，而是得到一个相对位置估计；质心法原理简单，但其精度依赖于布置信标的密度；极点法使用方便，但大多只用于激光扫描；这笔发定位精度高，但设备成本高，不适合大面积部署，要实现高精度室内定位要根据室内具体情况，如面积、遮挡物是否较多以及应用的室内定位技术来选择合适的方法进行室内定位。</p>
<h3 id="典型应用技术及其研究进展"><a href="#典型应用技术及其研究进展" class="headerlink" title="典型应用技术及其研究进展"></a>典型应用技术及其研究进展</h3><ul>
<li>无线局域网</li>
</ul>
<p>无线局域网以其部署成本低、无需额外设备以及定位精度相对较高等优点被广泛用于室内定位中。两种常用的基于WLAN的室内定位方法分别是基于RSSI距离交汇定位法和基于RSSI指纹定位法，前者在复杂环境下信号衰减严重；后者主要通过数据库匹配定位，所以定位精度极度依赖于校准点密度。</p>
<p>RADAR是最早的WLAN室内定位系统之一，它同时使用上述两种定位方法，在空旷的室内其精度可达2-3m。</p>
<p>芬兰公司Ekahau开发的定位系统是目前非常受欢迎的WLAN室内定位系统之一，主要是基于RSSI的距离交汇定位法，能实现1-3m的定位精度。它比蜂窝网络三角测量定位方法更精确。但是，如果定位的测算仅仅依赖于哪个Wi-Fi的接入点最近，而不是依赖于合成的信号强度图，那么在楼层定位上很容易出错。目前，它应用于小范围的室内定位，成本较低。但无论是用于室内还是室外定位，Wi-Fi收发器都只能覆盖半径90米以内的区域，而且很容易受到其他信号的干扰，从而影响其精度，定位器的能耗也较高。</p>
<p>近年来随着机器学习的热潮，不少学者将神经网络与WLAN室内定位相结合，Nguyen Dinh-Van提出了一种基于原始数据平滑技术和集成分类神经网络方法的WIFI指纹方法来进行室内低速车辆定位，实现2.25m的定位精度。Minh Tu Hoang 等人提出了基于递归神经网络的 WiFi RSSI 指纹室内定位方法，不同于传统的RNN解决方案，这里针对轨迹定位并结合RSSI信号进行计算，其定位精度可达0.75m。</p>
<ul>
<li>蓝牙</li>
</ul>
<p>蓝牙部署成本低、安全性高，但系统稳定性比较差、易受到噪声干扰，常和WIFI结合用于室内定位，常用的定位方法包括指纹定位、近邻探测法和质心法。比较经典的是苹果公司开发的低功耗蓝牙定位技术-iBeacon，主要用于室内商场，其定位精度近距离可达0.5m-3m，远距离可达3-30m，由我国北京邮电大学牵头的“羲和”室内外高精度位置服务平台其定位精度可达1-3m，基于羲和开发的室内导航“寻鹿”已经应用于国内主要城市机场。虽然蓝牙的成本和功耗低但其稳定性较差，易受环境干扰。</p>
<ul>
<li>紫蜂</li>
</ul>
<p>ZigBee适用于短距离、低速率的情况，通过每个ZigBee节点间的相互协调通信来实现定位，其优点是功耗低、成本低，常用的定位方法包括近邻探测法、质心定位法等。Zhe Dong提出的基于ZigBee的室内指纹识别定位方法，通过在定位区域中逐点手机RSSI数据，然后将其过滤并存储入指纹数据库，在定位阶段采用面积加权K近邻法，其定位精度可达1.5m。</p>
<ul>
<li>蜂窝网络</li>
</ul>
<p>蜂窝定位主要依靠手机进行定位，通过测量用户手机与多个基站的距离来实现，其功耗低、成本低，常用的定位方法包括TDOA和近邻探测法。北美地区的E911系统是目前比较成熟的基于蜂窝的紧急电话定位技术，能通过无线信号实时追踪用户位置。Varshavsky等人提出了一种基于蜂窝网络的室内定位方法，主要通过信号的RSSI来进行定位，其精度可达2-4m。</p>
<ul>
<li>超宽带</li>
</ul>
<p>超宽带技术通过纳秒量级的短脉冲进行直接调制，实现信号带宽在GHz量级上，具有穿透力强、抗多径干扰、对信道衰落不敏感、功耗低、安全性高、信号速率高、通信容量大和定位精度高等优点。Ubisense公司于2011年提出了基于TDOA和AOA的UWB室内定位系统，在空旷的室内，其定位精度可达15cm，测距范围达到50m。JosefBlazek提出的基于UWB的无源室内定位系统通过双向测距和同步后在无遮挡的情况下，其定位精度可达0.5m。Dongchen Ni等提出了一种基于卡尔曼滤波和3-DTOA的UWB超宽带定位系统，其定位精度可达5-10cm。虽然超宽带优点众多且能到达厘米级的定位精度但设备成本较为昂贵，不太适合大面积部署，并且超宽带信号会占据很宽的频带，不可避免的会与现在已授权的频带业务冲突。</p>
<ul>
<li>伪卫星室内定位</li>
</ul>
<p>伪卫星定位技术的原理是将卫星信号引入室内，其定位精度很大程度上取决于接收机与伪卫星所构成的几何图形强度。模拟实验研究表明，将 5 颗伪卫星的发射天线安装在距地面 10m 的天花板上，待测目标环绕房间进行运动，得到其 RDOP 值为 1.2～3.8，反映出很好的定位几何图形强度。对于 150m 长的隧道长进行模拟实验，利用 6 颗伪卫星构成良好的几何图 形强度，可以实现 1～5cm 的水平定位精度。LOCATA 公司开发的 LocataNet 伪卫星定位系统，采用 TimeLoc 技术实现伪卫星间的时钟同步，其定位精度可达厘米级别，完全适应港口精密定位和室内定位需求。但目前伪卫星定位技术尚存在一些未解决的问题，主要包括伪卫星与 GNSS 卫星时间同步、信号传播过程中的多径衰落。</p>
<ul>
<li>射频识别</li>
</ul>
<p>RFID 利用射频方式进行非接触式双向通信，其作用距离短，但它可以在几毫秒内达到厘米级别的定位精度，且传输范围大，成本较低，目前已广泛应用于仓库管理中，但 RFID 适用距离短，很难建立好的传播模型同时存在信息安全问题。LANDMARC 是使用 RFID 确定室内位置的开创性系统，该系统通过在目标物上放置有源 RFID 标签，在固定位置读取器记录信号强度，最后使用 KNN 计算处目标位置，该系统精度可达到 1m。超高频 RFID 因有较远的读写距离，在现阶段受到广泛关注，Andrea Motroni提出了基于相位的 UHF-RFID 无源标签室内定位法，其成本低、易部署、可减少定位漂移，同时精度能够达到20cm。</p>
<ul>
<li>其他技术</li>
</ul>
<p>基于无线信号交汇定位的技术还有超声波、雷达、红外、智能 LED 灯等，超声波定位通过测量超声波从发送端到接收端的时间来确定待测目标的位置，其定位精度高，抗干扰能力强，但大面积部署成本很高。雷达室内定位技术采用调频连续波进行定位，雷达定位不存在模糊距离的现象，且能够实现 10cm 的定位精度。红外室内定位是通过测量目标物体发出的红外线来确定其方位，较为经典的红外线室内定位系统有 Olivetti 实验室研究的 Active Badge 系统，但红外定位技术传输距离短、无非视距传输性和功耗较大。智能灯 LED 技术通过摄像头接收、识别 LED 灯光信号，进行身份解析并通过数据库匹配完成定位，定位精度可达分米级别，但其需要大量智能 LED 灯，成本较高。</p>
<h2 id="数据库匹配定位"><a href="#数据库匹配定位" class="headerlink" title="数据库匹配定位"></a>数据库匹配定位</h2><p>数据库匹配定位是通过室内现场采集的信号与数据库内的信息进行匹配，来进行位置估计。基于数据库匹配定位的常用技术有地磁指纹技术和指纹定位技术。</p>
<h3 id="地磁定位"><a href="#地磁定位" class="headerlink" title="地磁定位"></a>地磁定位</h3><p>地磁定位是利用磁场对室内钢筋结构的磁场异常作为位置信息匹配的参考特征，通过粒子滤波等算法估计目标的位置信息。目前学者对地磁定位进行了研究，Jing Xue提出了一种基于同伦算法的地磁定位方法，分别激励三个正交线圈以产生磁场，并将三轴磁通门传感器安装在目标上，然后选择同伦算法来求解磁场的非线性方程，该算法降低了算法时间复杂度，一次运行不超过1秒，最大定位误差为4m。YuanyiChen提出了基于学习序列的地磁指纹定位系统，通过设计基于序列的新型指纹，它可以有效地处理原始MFS序列的局部失真和移位，然后利用训练分类模型来估计测试样本的未知位置，其定位误差为2.5-4m。芬兰奥卢大学开A的IndoorAtlas室内定位系统，能够实现0.1-2m的定位精度，但是由于磁场定位完全依赖于磁场的特性，而室内磁场环境容易被干扰导致误匹配，影响定位结果。</p>
<h3 id="指纹定位"><a href="#指纹定位" class="headerlink" title="指纹定位"></a>指纹定位</h3><p>指纹定位是利用每个位置信道的多径结构的唯一性，将其作为每个位置的指纹，通过实际过去到的指纹信息与数据库中的指纹进行匹配，实现目标定位，指纹定位一般分为离线勘测和在线定位两个阶段，离线勘测主要通过采集大量包含多径结构的信号建立指纹数据库，在线定位主要是采用匹配算法对待测点指纹信号与数据库中指纹进行匹配，获得目标位置估计。近点的指纹定位系统有微软公司推出的RADAR系统，主要基于RSSI距离交汇定位法和基于RSSI指纹定位法实现，其定位精度可达2-3m。XuHan等人提出了基于KNN的指纹定位算法，可以有效地提高定位精度。Xiaoyu Sun等人提出了基于深度卷积神经网络的指纹定位系统，提出角延迟信道幅度矩阵指纹提取方法和DCNN的定位方法，实现高精度和实时定位。指纹定位无需参考点，定位精度高，但需要建立大量的离线指纹库，不适用于大场景中。</p>
<h2 id="惯导航迹推算定位"><a href="#惯导航迹推算定位" class="headerlink" title="惯导航迹推算定位"></a>惯导航迹推算定位</h2><p>惯导航迹推算定位是利用加速度计、陀螺仪和磁力计等惯性传感器测量方向和距离，根据一定桂策估计目标的位置。由于惯导航迹推算的方向估计中的细小误差都会导致位置估计中的大误差，因此惯导航迹腿粗安常常和其他技术一起使用，以实现精确导航。Meng-Shiuan Pan等人提出了基于惯导航迹推算的定位系统ezNavi，该系统利用惯性传感器推算用户轨迹，然后根据用户轨迹信息生成室内路径和标记点，实现室内定位。Hongyu Zhao等人提出了基于智能手机惯导的室内行人航位推算系统，具体的通过将惯性数据与仅一部分精确且可用的磁力计数据融合，改进梯度下降算法以减少航向漂移，然后进行步幅检测估计，实现绝对定位误差为 1.57±0.95 m，最大、最小和平均相对位置误差分别为 1.60％，0.06％和0.92％。IA Chistiakov等人提出了双脚惯性传感器行人航迹推算系统，通过在双脚上安装不同的 IMU，一个 IMU 用于测量计算估计，另一个用来校正误差，根据两个 IMU 的有关初始和最终位置的信息、速度的伪观测，来计算两条腿的平滑轨迹，然后构造一条广义轨迹，实现室内行人定位导航。但目前由于手机中的加速度计误差较大同时存在零点漂移，因此部署在手机上的行人航迹推算可以结合步长和角度实现更高精度的定位。</p>
<h2 id="视觉定位"><a href="#视觉定位" class="headerlink" title="视觉定位"></a>视觉定位</h2><p>随着计算机视觉的发展，视觉定位逐渐成为炙手可热的研究方向，视觉定位常用于室内机器人定位，定位方式多种多样，包括基于单目相机定位、双目相机定位以及RGB-D相机定位。单目相机室内定位成本低、原理简单但只能获取二维信息，定位精度低，双目视觉定位精度高，可以获取三维信息，但计算复杂度较高，RGB-D相机能获得很好的三位信息且不受光线约束，但RGB-D相机测距范围仅为0.8-3.5m,不适合大场景下定位。Yi Xia等人提出了一种使用手持摄像机捕获的图像的简单可视室内定位方法，复杂室内环境下，其平均定位时间不超过2s，定位误差在1.2m以内。Jiang Dong等人提出了基于手机的视觉室内导航系统ViNav，它应用动态结构技术从众多图像中重建室内环境的3D模型，在3D模型中定位兴趣点，并编译导航网格以进行路径查找，在复杂商场环境可以实现2s定位且定位误差小于1m。Xingli Gam等人提出了基于深度学习的双目视觉定位系统，静态测试的室内水平误差为74mm，动态测试的室内水平定位误差小于250mm。</p>
<h2 id="组合室内导航"><a href="#组合室内导航" class="headerlink" title="组合室内导航"></a>组合室内导航</h2><p>由于室内环境的复杂性通常采用单一技术手段实现室内定位通常会出现精度不足、受场景约束等情况，因此进行多种技术组合导航定位能够弥补单一技术的不足，大大提高室内定位精度。常用的室内组合定位包括惯导辅助超宽带、惯导辅助视觉、MEMS传感器辅助WIFI、地磁融合视觉等。在我们开发的智慧标识导航系统小程序中，采用的是惯导辅助蓝牙信标定位的方法，一方面通过手机采集提前布置好的iBeacon蓝牙信标进行定位校正和大距离的移动，另一方面通过手机自带的加速度传感器和陀螺仪来确定移动方向和进行小距离的移动，两者相结合才可以实现较为流畅的导航效果。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，我们的智慧标识室内导航系统还是基于无线信号交汇定位，通过使用蓝牙技术，在众多的ibeacon蓝牙点当中寻找到最强RSSI的蓝牙信标，从而确定位置，这其中涉及到蓝牙信号干扰、蓝牙定位偏移的众多问题，而且我们的蓝牙定位都是在前台计算完成，这限制了它的计算能力和精准度，后期会考虑结合数据库匹配定位，后台加入提前采集的指纹库信息，将实地定位和数据库匹配相结合。</p>
<p>实现室内定位的技术有很多种类，他们各有优缺点，对其进行总结如表所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20200825131826715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3OTkzMTIy,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>通过对比分析，我们发现室内定位技术仍面临许多挑战，主要包括：</p>
<ul>
<li>成本和复杂性高，如红外、超声波等都需要配套的硬件设施才能实现定位导航，限制了室内定位的普及；</li>
<li>对动态环境适应性差，一些人或者物体的移动会影响到定位精度；</li>
<li>续航能力差，对于WIFI、蓝牙、视觉、惯导等可集成在只能手机上的定位技术，通常开启定位对电池消耗很快，不能长时间持续定位。</li>
<li>在非视距情况下易受多径干扰；</li>
<li>复杂室内场景定位精度相对较低；</li>
<li>可扩展性差，如某些技术如红外、蓝牙等只适用于近距离，对远距离需求无能为力。随着室内定位的不断发展，相信在未来这些不足都将会改善。</li>
</ul>
<p>因此，我们队未来只会城市建设中的室内定位的发展趋势进行展望：</p>
<ul>
<li>多传感器组合定位将是未来室内精确定位发展的重要方向之一；</li>
<li>实现设备功耗低；</li>
<li>实现兼容、易集成、易扩展；</li>
<li>降低成本和技术门槛；</li>
<li>对运动的人和物进行精细积分算法；</li>
<li>室内定位和人工智能相结合发展。</li>
</ul>
]]></content>
      <categories>
        <category>研究生</category>
      </categories>
      <tags>
        <tag>室内定位</tag>
      </tags>
  </entry>
  <entry>
    <title>webrtc学习</title>
    <url>/2020/09/07/webrtc/</url>
    <content><![CDATA[<h1 id="音视频背景"><a href="#音视频背景" class="headerlink" title="音视频背景"></a>音视频背景</h1><h2 id="音视频通话领域发展现状"><a href="#音视频通话领域发展现状" class="headerlink" title="音视频通话领域发展现状"></a>音视频通话领域发展现状</h2><p>人们在很久以前就利用各式各样的技术和工具进行通信，以移动电话运行商为例，大型电话公司建立起大规模的音视频通信网络，为全球成千上万用户提供音视频通信服务，让每个人的语音都能够传播到世界各地。</p>
<p>后来视频通信也随之流行起来。基于苹果的FaceTime、Google的Hangouts还有Skype的视频通话这些工具背后的技术，用户可以很方便地与其他人进行视频对话。开发者们为了将用户体验优化到极致，通过大量的技术手段保证视频质量，针对每一种问题都提出了相应的工程化解决方案，例如：减少丢包、断网恢复、及时响应网络变化等。</p>
<p>webrtc的目标是将这些技术都植入到浏览器中，上述解决方案大多都需要用户在PC和移动设备中安装相关的插件或者应用程序，这些公司还会向开发者征收技术授权费。并构筑起巨大的技术壁垒以防止新公司加入到这个领域中蚕食市场份额，每一位浏览器用户不再需要安装插件，开发者也不再需要交纳昂贵的授权费用，大家只需要打开特定的网站就可以立即和其他用户建立连接。</p>
<p>webrtc的核心其实就是在两个浏览器之间建立起来一条点对点连接，webrtc是这项技术在浏览器本身首次真正意义上的实现，所以任何通过点对点连接实现的程序都可以轻松地扩展到webrtc，例如文件共享、文本聊天、多人游戏。这些应用大都有一个共同的特点—需要在两个用户之间建立一条低延迟、高性能的连接。这要求webrtc不得不使用底层协议来提供高速性能，从而加速数据在网络间的流动，实现在端时间内传输大量的数据。</p>
<h2 id="在web平台传输音频和视频"><a href="#在web平台传输音频和视频" class="headerlink" title="在web平台传输音频和视频"></a>在web平台传输音频和视频</h2><p>webrtc成就非凡，无需借助第三方软件或插件就可以在开放网络中传输高质量音视频流，在过去的浏览器中一直没出现过这种免费优质的实时通信解决方案。互联网的成功很大程度上可以归因于HTML、HTTP还有TCP/IP这些高度开放且高度可用的技术，我们希望基于此来构建webrtc。</p>
<p>从零开始构建一个实时通信应用，首先需要引入大量的库和框架，这些代码能够解决实际开发中将面临的问题，例如：连接断开、数据丢失、NAT穿透等，webrtc的优点是可以在浏览器API中内建上述这些库和框架，google也开源了许多提供高品质完整通信功能的技术。</p>
<p>为了使开发者专注于具体的产品细节，webrtc在浏览器API中集成了大量的技术，解决了所有繁重的问题，例如：捕捉摄像头和麦克风、音视频解码、传输层以及会话管理。</p>
<h1 id="音视频通话原理"><a href="#音视频通话原理" class="headerlink" title="音视频通话原理"></a>音视频通话原理</h1><p>首先思考的问题：</p>
<p>两个不同网络环境的（具备摄像头/麦克风多媒体设备的）客户端 （浏览器或APP），要实现点对点的实时音视频对话，难点在哪里？</p>
<p>哪部分问题需要我们自己解决，哪部分问题由google解决</p>
<ul>
<li>音视频编解码能力沟通</li>
<li>网络传输数据</li>
<li>如何发现对方</li>
</ul>
<p>1.怎么知道彼此的存在  -》进到同一个房间 -》2方登录服务器 由服务器去通知 信令服务器</p>
<p>2.音视频数据怎么传输，才能让对方看到彼此-》服务器转发还是P2P  商业方案 基本走服务器转发</p>
<p>3.音视频编码，音视频解码 </p>
<p>媒体协商-音视频编解码,彼此要了解对方支持的视频格式</p>
<p>比如：Peer-A端可支持VP8、H264多种编码格式，而Peer-B端支持VP9、H264，要保证二端都正确的编解码，最简单的办法就是取交集H264</p>
<p>注：有一个专门的协议，称为session description protocol(SDP)，可用于上述这类信息，在webrtc中，参与视频通讯的双方必须先交换SDP信息，这样双方才能知根知底，而交换SDP的过程，也称为媒体协商。</p>
<p>4.麦克风采集、摄像头采集</p>
<p>本机ip ： 10.11.55.97 （局域网） -》 外网ip：223.75.224.98  中间存在nat转换</p>
<p>STUN协议：</p>
<p>告诉我你的公网IP地址+端口是什么</p>
<p>问题：STUN并不是每次都能成功的为需要NAT的通话设备分配IP地址，在传输媒体流时，使用的本地带宽，在多人视频通话的过程中，通话质量往往需要根据使用者的带宽确定。 TURN可以解决</p>
<p>STUN(Session Traversal Utilities for NAT,NAT会话穿越应用程序)，它位于NAT（Network Address Translation网络地址转换协议）（或多重NAT）后的客户端找出自己的公网地址（ip），查出自己位于哪种类型的NAT之后以及NAT为某一个本地端口所绑定的端口。</p>
<p>TURN协议：</p>
<p>TURN的全称为Traversal Using Relays around NAT,是STUN/RFC5389的一个拓展，添加了relay功能后。如果终端在NAT后，那么在特定的情景下，有可以和其对等段（peer）进行直接的通信，这时候就需要公网的服务器</p>
<p>本地（局域网）音视频通话 —不需要中继，同一个网段打洞都不需要</p>
<p>远程通话—STUN和TURN服务器我们使用coturn开源项目来搭建。—coturn不起作用，打洞没法打，中继也没法中继</p>
<p>补充：ICE（Interactive Connectivity Establishment,交互式连接建立）</p>
<p>跟STUN和TRUN不一样，ICE不是一种协议，而是一个框架，它整合了STUN和TURN，coturn开源项目集成了STUN打洞和TRUN中继的功能。</p>
<p>网络信息：放在candidate</p>
<p>媒体协商+ 网络协商 数据的交换通道</p>
<p>2个客户端协商媒体信息（SDP）和网络信息（candidate）怎么去交换？是不是需要一个中间商？所以我们需要一个信令服务器（Signal server）（房间服务器）转发彼此的媒体信息和网络信息</p>
<p>信令服务器不仅只是交换 媒体信息sdp和网络信息candidate，比如：</p>
<p>1）房间管理 2）人员进出房间</p>
<h1 id="早期IM即时通讯只有文字"><a href="#早期IM即时通讯只有文字" class="headerlink" title="早期IM即时通讯只有文字"></a>早期IM即时通讯只有文字</h1><p>如何集成视频通话，强耦合在一起:</p>
<p>一开始自研音视频通话（通话不佳），换第三方要做解耦</p>
<p>弱耦合：</p>
<p>webrtc技术堆栈</p>
<p>Transport/session  管理p2p，传输会话管理类</p>
<p>RTP stack  与实时传输协议相关</p>
<p>STUN/ICE</p>
<p>VoiceEngine 管理声音</p>
<p>iSAC/iLBC/Opus 采样率,低码率到高码率 </p>
<p>Noise Reduction(NR)  噪音消除</p>
<p>Acoustic Echo Canceler(AEC) 回声消除</p>
<p>VP8/Vp9/H264   编解码</p>
<p>Video Jitter Buffer 缓冲区保存视频数据</p>
<h1 id="几个问题"><a href="#几个问题" class="headerlink" title="几个问题"></a>几个问题</h1><p>WebRTC可以不需要Media Server,即可以完成音视频通话的功能，但如果是多人同时通话呢？</p>
<p>如果多人音视频通话时，数据接收方由于带宽限制，只能接收小码率音视频数据怎么办？</p>
<p>网络状况瞬息万变，跨区域，跨运营商等错综复杂的网络状况下，如何保证音视频的通话质量？</p>
<h1 id="几种常见的webRTC媒体服务器"><a href="#几种常见的webRTC媒体服务器" class="headerlink" title="几种常见的webRTC媒体服务器"></a>几种常见的webRTC媒体服务器</h1><ul>
<li><p>Mesh</p>
<p>Mesh网状结构，参与音视频的与会者需要同时推送多路视频以及接收多路视频</p>
<ul>
<li><p>优点</p>
<p>不需要考虑Media Server的具体实现，简单搭建STUN/TURN服务即可完成开发</p>
</li>
<li><p>缺点</p>
<p>客户端资源消耗大，多路视频编码解码，网络带宽等消耗巨大</p>
</li>
</ul>
</li>
<li><p>MCU多媒体控制中心</p>
<p>与会者客户端只需要上传一路视频，接收一路多媒体数据</p>
<ul>
<li><p>优点</p>
<p>客户端不需要做消耗资源的编解码操作，节省大量用户带宽，服务端可以根据客户端需要，分发不同码率的音视频数据。</p>
</li>
<li><p>缺点</p>
<p>服务端业务逻辑复杂，编解码资源消耗巨大，服务器成本高昂。</p>
</li>
</ul>
</li>
<li><p>SFU</p>
<p>（Selective Fowarding Unit 选择性分发控制单元）由服务端负责媒体数据的分发，从而实现一对多的音视频通话功能</p>
<ul>
<li><p>优点</p>
<p>客户端和服务端逻辑均简单，服务端不需要支持编解码。不需要性能强劲的硬件资源，客户端可以使用发布订阅机制实现多对多的音视频通话</p>
</li>
<li><p>缺点</p>
<p>媒体数据下行依然需要很高的网络下行带宽，另外客户端对带宽需求也很高。</p>
</li>
</ul>
</li>
</ul>
<h1 id="如何做好信令系统"><a href="#如何做好信令系统" class="headerlink" title="如何做好信令系统"></a>如何做好信令系统</h1><p>稳定健壮的信令系统，全球音视频通话需要一张信令系统大网，保证消息的实时可达，高并发，高可用。</p>
<p>通常信令系统需要交换以下信息：</p>
<ul>
<li>会话描述的信息（SDP）</li>
<li>设备的音视频能力，编解码，分辨率，码率等</li>
<li>秘钥信息，用于创建安全连接</li>
<li>维护一套发布订阅系统，房间信令系统</li>
<li>传递信息，通过信令来实现业务场景中的通话控制</li>
</ul>
<h1 id="如何做好webRTC"><a href="#如何做好webRTC" class="headerlink" title="如何做好webRTC"></a>如何做好webRTC</h1><p>MS/SS双剑合璧，也即是Media Server和Signal Server的完美组合才是音视频服务高可用的前提 </p>
<h1 id="获取用户媒体"><a href="#获取用户媒体" class="headerlink" title="获取用户媒体"></a>获取用户媒体</h1><p>创建一个基于webrtc的通信平台，首先需要通过用户网络摄像头和麦克风获取实时的视频和音频流，在过去的浏览器中，我们通常使用插件来实现这个功能，而现在，我们可以使用javascript调用浏览器的getUserMedia API来实现。</p>
<h2 id="访问媒体设备"><a href="#访问媒体设备" class="headerlink" title="访问媒体设备"></a>访问媒体设备</h2><p>开发者们尝试将媒体设备接入浏览器中，有的是基于Flash，有的是基于插件，但这些方案都需要在浏览器中安装某些程序才能捕捉到摄像头。为此，W3C最终决定筹备一个专门的小组来制定相关的标准。</p>
<p>getUserMedia API又被称为MediaStream API,这组API有以下几个关键功能：</p>
<ul>
<li>提供一个stream对象：这个对象用以表示音频或视频形式的实时媒体流。</li>
<li>提供设备间切换的功能：当多个摄像头或者麦克风连接到计算机上时，可以选择所需设备。</li>
<li>提供充分的安全保障：获取用户的访问许可，根据偏好设置从用户的计算机设备获取数据流。</li>
</ul>
<h2 id="配置静态服务器"><a href="#配置静态服务器" class="headerlink" title="配置静态服务器"></a>配置静态服务器</h2><p>开发者们首先应该配置一台本地的web服务器。</p>
<h2 id="创建我们的首个媒体流页面"><a href="#创建我们的首个媒体流页面" class="headerlink" title="创建我们的首个媒体流页面"></a>创建我们的首个媒体流页面</h2><p>首个支持webrtc的页面很简单：在屏幕上展示一个<vedio>元素，请求使用摄像头后在<vedio>元素里实时显示它此刻拍摄到的内容。vedio是html5里的一个强大的特性，既可以通过它展示实时的视频流，也可以用它回放很多的视频源。</p>
<h1 id="创建简单的webrtc应用"><a href="#创建简单的webrtc应用" class="headerlink" title="创建简单的webrtc应用"></a>创建简单的webrtc应用</h1><p>开发任何webrtc应用的首个步骤就是创建RTCPeerConnection。成功创建一个RTCPeerConnection的前提就是需要理解浏览器创建对等连接的内部工作原理</p>
<h2 id="理解UDP传输协议和实时传输"><a href="#理解UDP传输协议和实时传输" class="headerlink" title="理解UDP传输协议和实时传输"></a>理解UDP传输协议和实时传输</h2><p>数据的实时传输要求双方有快速的连接速度，一个典型的网络连接需要将音频和视频都放在同一帧中，并以每秒40-60帧的速度发送给另一个用户，以此来获得较好的效果，在这种要求下，为了保持连接速度，音频和视频应用允许部分数据帧的丢地。这意味着传送最新的数据帧比确保每一帧都不丢失来得更为重要。</p>
<h2 id="webrtc-API"><a href="#webrtc-API" class="headerlink" title="webrtc API"></a>webrtc API</h2><p>这些方法和对象使得开发者们可以与webrtc层沟通，并与其他用户建立对等连接，它主要由以下技术组成：</p>
<ul>
<li>RTCPeerConnection对象</li>
<li>信号传递和交涉</li>
<li>会话描述协议（SDP）</li>
<li>交互式连接建立（ICE）</li>
</ul>
<h3 id="RTCPeerConnnection对象"><a href="#RTCPeerConnnection对象" class="headerlink" title="RTCPeerConnnection对象"></a>RTCPeerConnnection对象</h3><p>RTCPeerConnection是webrtcAPI的主入口，我们通过它初始化一个连接，连接他人以及传送流媒体信息。它负责与另一用户建立UDP连接。</p>
<p>RTCPeerConnection对象的功能是维护浏览器内会话和对等连接的状态。它也负责对等连接的建立。它将所有这些封装起来并暴露一系列事件，它们会在连接过程的关键点被触发。这些事件使你可以访问配置项，同时了解对等连接的内部正在发生什么。</p>
<h3 id="信号传递和交涉"><a href="#信号传递和交涉" class="headerlink" title="信号传递和交涉"></a>信号传递和交涉</h3><p>一般来说，我们需要知道对方浏览器的网络地址才能连接到它。通常地址是由IP地址和端口号组成，你的电脑或移动设备的IP地址可以允许其他的网络设备来直接传送数据给你的设备，RTCPeerConnection建立在这之上。当这些设备知道如何在互联网上找到其他设备之后，它们需要知道如何与其他设备进行沟通，这意味着它们需要交换数据，这些数据支持哪种协议以及视频和音频的解码器及信息。</p>
<p>发送信令的过程由以下几个步骤组成：</p>
<p>1.为一个对等连接创建潜在的候选列表</p>
<p>2.用户或计算机选择一个用户去连接</p>
<p>3.信令层将通知那个用户有人想要连接，用户可以选择接受或拒绝</p>
<p>4.当连接的请求被接受时，第一个用户会被通知</p>
<p>5.若接受，第一个用户将初始化RTCPeerConnection</p>
<p>6.双方将通过信令通道交换各自的电脑的硬件和软件信息</p>
<p>7.双方将通过信令通道交换各自电脑的位置信息</p>
<p>8.用户之间的连接将成功或失败</p>
<p>webrtc规范并不包含两个用户该如何交换信息的标准，这是因为连接用户的标准一直在扩充</p>
<h3 id="会话描述协议（SDP）"><a href="#会话描述协议（SDP）" class="headerlink" title="会话描述协议（SDP）"></a>会话描述协议（SDP）</h3><p>为了连接到其他用户，需要了解对方所支持的音频和视频编解码器、他们使用何种网络以及他们的电脑可以处理多少数据。双方也需要能方便的传送数据。这意味着我们需要一张有用户所有信息的字符串形式的名片来传送给其他用户。</p>
<p>SDP是由浏览器提供的基于字符串的二进制数据对象，这种字符串是一系列的键值对从，由换行符分隔。</p>
<p><key>=<value> \n</p>
<p>Key 是一个单字符，用来表明值的类型。value是由及其可读的配置项组成的有结构的一组文本。不同的键值对由换行符分隔。</p>
<p>SDP涵盖一个指定用户的描述、时间配置和对媒体的限制。SDP是在与其他用户建立连接的过程中由RTCPeerConnection对象给出。</p>
<h3 id="找到一条清晰的路线到其他用户"><a href="#找到一条清晰的路线到其他用户" class="headerlink" title="找到一条清晰的路线到其他用户"></a>找到一条清晰的路线到其他用户</h3><p>网络安全是现今大部分网络的一大重点，你所使用的任何网络肯可都有好几层的访问控制，告诉数据在哪以及如何发送，意味着需要在网络里找到一条清晰的路线来连接对方，为了达到这个目的，webrtc使用了多种技术：</p>
<ul>
<li>NAT会话穿透工具(STUN)</li>
<li>使用中继技术穿透（TURN）</li>
<li>交互式连接建立(ICE)</li>
</ul>
<p>这个过程需要许多服务器和连接的建立，为了理解如何工作，首先要知道一个典型的webrtc架构怎么样：</p>
<p>首先要找到你的IP地址，通过它你才能让数据包到达正确的地址，当你的网络位于路由器之后，路由器会隐藏你电脑的IP地址并用其他的地址来替代，这是为了增加安全性以及为了允许多台电脑使用同一个网络地址。</p>
<h3 id="NAT会话穿透工具-STUN"><a href="#NAT会话穿透工具-STUN" class="headerlink" title="NAT会话穿透工具(STUN)"></a>NAT会话穿透工具(STUN)</h3><p>STUN是双方建立稳定连接的第一步，它有助于在互联网上识别对方，同时在创建对等连接时常被其他协议使用，首先发一个请求给服务器，以开启STUN协议，之后服务器识别发出请求的客户端的IP地址，并将其返回给客户端，客户端之后可以通过返回的IP地址来识别自己。</p>
<h3 id="使用中继穿透NAT技术（TURN）"><a href="#使用中继穿透NAT技术（TURN）" class="headerlink" title="使用中继穿透NAT技术（TURN）"></a>使用中继穿透NAT技术（TURN）</h3><p>在一些情况下，受防火墙限制，可能不允许任何基于STUN的访问，这种情况可能存在与企业级NAT中，它利用端口随机化来让数以千计的设备连接，你无法使用通用的方法找到用户，在这种情况下，我们需要使用不同的方法来连接另一个用户，这个标准叫TURN。</p>
<p>它的工作原理是代表客户端在对等连接的双方增加一个转播，客户端之后从TURN服务器得到信息，这有些类似于向服务器秦秋从热门视频网站加载，这就要求TURN服务器去下载、处理并重定向每一个用户发送过来的数据包。</p>
<h3 id="交互式连接建立"><a href="#交互式连接建立" class="headerlink" title="交互式连接建立"></a>交互式连接建立</h3><p>STUN和TURN，将他们结合在一起的一个标准叫ICE，这个过程利用STUN和TURN为对等连接提供正确的路由，寻找一系列对方可用的地址并按张顺序测试每一个地址，直到找到一个双方都可用的组合。</p>
<p>ICE过程开始并不知道每一个用户的网络配置。它通过一些步骤来一步步发现双方的网络是怎么建立的，这个过程将会使用不同的技术，其目的发现双方网络足够多的信息，以此来建立一个成功的连接。</p>
<h1 id="创建一个基本的WEBRTC应用"><a href="#创建一个基本的WEBRTC应用" class="headerlink" title="创建一个基本的WEBRTC应用"></a>创建一个基本的WEBRTC应用</h1><ul>
<li><p>创建一个RTCPeerConnection</p>
<p>主要目标是连接一个浏览器窗口，从用户的摄像头加载视频数据，最终目的是在页面上获得两个视频流，一个直接来自摄像头，另一个来自浏览器在本地创建的webrtc连接。</p>
</li>
<li><p>建立SDP OFFER和返回</p>
<p>我们执行offer和返回answer这个过程以构成对等连接。</p>
</li>
<li><p>寻找ICE候选路径</p>
<p>建立对等连接的最后一部分是在双方之间传递ICE候选路径，以使他们可以互相连接。</p>
</li>
<li><p>监听加入数据流</p>
<p>API负责流的建立和发送，当另一对等连接中加入流时，会发送提醒，告诉第一个用户有变更，浏览器通过调用onaddstream来通知用户，流已经被加入。</p>
</li>
</ul>
<h1 id="创建信令服务器"><a href="#创建信令服务器" class="headerlink" title="创建信令服务器"></a>创建信令服务器</h1><p>创建一个完整的webrtc应用，需要转而进行服务器端的开发，创建一个由基本功能的信令服务器，需要进行以下操作：</p>
<ul>
<li>搭建Nodejs的开发环境</li>
<li>使用websockets连接客户端</li>
<li>识别用户</li>
<li>发起和应答webrtc通话</li>
<li>处理ICE候选路径的传送</li>
<li>挂断通话</li>
</ul>
<h2 id="构建信令服务器"><a href="#构建信令服务器" class="headerlink" title="构建信令服务器"></a>构建信令服务器</h2><p>即将创建的服务器能帮助我们将不在同一个电脑中的两个用户连接起来，此服务器的目的是通过网络传输替代原来的信令机制。</p>
<p>我们的实现将对多个用户做出回应，这将通过一个简单的双向通信系统实现，它允许一方用户呼叫另一个用户从而在双方间建立webrtc连接，一旦用户呼叫了另一方，服务器会在双方传递请求，应答和ICE后端路径，这将让用户成功建立一个webrtc连接。</p>
<p>每一方都将从登陆服务器开始，登陆仅仅只是向服务器端发送一个字符串形式的用户标识，并确保此标识码没有被使用，一旦双方都登陆到服务器，他们便可以呼叫另一方，通过使用对方的标识码发送请求即可，另一方应答后，双方会发送候选地址直到他们能成功建立连接为止，它主要用来作为互相发送信息的通道。</p>
<h2 id="获得一个连接"><a href="#获得一个连接" class="headerlink" title="获得一个连接"></a>获得一个连接</h2><p>建立webrtc连接所需的步骤必须都是实时的，这意味着客户端不能使用webrtc对等连接在双方间实时传输信息，这就需要使用另一个HTML5的强大功能—websockets。</p>
<p>websockets听起来是在两个终端间—浏览器和网络服务器间的一个双向socket连接，你可以利用socket以字符串和二进制码方式双向发送信息。浏览器和网络服务器都需要实现此功能方可以在不使用ajax请求的情况下实现双方间的沟通。</p>
<p>websocke协议和webrtc协议最大的不同是在tcp堆栈的使用上，websocket被设计为是一个客户端到服务器端使用TCP传输协议来建立可靠连接的协议。这意味着它有许多webrtc没有的瓶颈，由于它的可靠性，信令很少会丢失，这让我们可以获得稳定的连接</p>
<h2 id="识别用户"><a href="#识别用户" class="headerlink" title="识别用户"></a>识别用户</h2><p>服务器需要一种方法来识别连接的用户，让每一个用户有一个字符串形式的标识，即用户名。</p>
<h2 id="发起通话"><a href="#发起通话" class="headerlink" title="发起通话"></a>发起通话</h2><p>offer处理器是登录后的首批通话之一，它意味着有用户想要呼叫另一方，将呼叫的初始化过程与webrtc的offer步骤分开</p>
<h2 id="呼叫应答"><a href="#呼叫应答" class="headerlink" title="呼叫应答"></a>呼叫应答</h2><p>应答就跟发送offer一样容易，让客户端做大部分工作，服务器仅将消息作为answer传递给另一方。</p>
<h2 id="处理ICE候选路径"><a href="#处理ICE候选路径" class="headerlink" title="处理ICE候选路径"></a>处理ICE候选路径</h2><p>webrtc信令的最后一部分是在用户间处理ICE候选路径，这里，我们使用之前的技术在用户间传递信息，此类消息的不同在于每一个用户可能都需要发送多次且在双方用户间会以任何顺序发送，服务器可以以一种简单的方式解决这个问题，在文件里加上此candidate处理器。</p>
<h2 id="websockets的困境"><a href="#websockets的困境" class="headerlink" title="websockets的困境"></a>websockets的困境</h2><p>websockets的好处是它为浏览器带来了双向通信，很多人认为websockets是他们所有问题的解决方案，直接连接服务器让socket连接更快，但仍然有很多问题需要解决，其中一个便是网络防火墙，在理想情况下，websocket是可靠的，但不像http副本那样，websocket在代理设置的情况下很容易变得不稳定，虚拟专用网络（VPN）的额外开销或复杂防火墙系统可导致连接的成功率急剧下降，这意味着需要回到使用其他技术，比如HTTP流，来完成同样的工作</p>
<h2 id="连接其他服务"><a href="#连接其他服务" class="headerlink" title="连接其他服务"></a>连接其他服务</h2><p>webrtc最令人激动的特点之一就是它不但可以作为一个单独的解决方案，还可以与其他技术一起使用，在webrtc出现之前已经有许多对等连接应用，由于它的出现，人们做了许多努力，来让webrtc做向后兼容</p>
<h2 id="XMPP"><a href="#XMPP" class="headerlink" title="XMPP"></a>XMPP</h2><p>XMPP是一个即时通信协议，这个协议的目的在于定义一个常用的方法来实现即时通信、用户在线和通讯录，它是一个开源的标准，所有人都可以使用并将其合成到他们的应用当中，有许多大型即时通信平台在某一时刻将XMPP集成到了它们的服务当中。</p>
<h2 id="会话初始协议"><a href="#会话初始协议" class="headerlink" title="会话初始协议"></a>会话初始协议</h2><p>会话初始协议（SIP）室内另一个20世纪90年代使用的协议，它是一个致力于移动网络和电话系统的信令协议，它是一个被大部分移动网络和网络设备提供者使用的定义严格的支持广泛的协议。</p>
<p>SIP和webrtc集成的目的是为不支持webrtc的基于SIP的电话设备提供通信支持，如果我们与一个可以翻译我们信息的服务器连接，与移动电话或其他通信设备的连接也非常容易，如果它使用SDP，它也会支持现今电话拥有的许多功能。</p>
<h1 id="把客户端连接到一起"><a href="#把客户端连接到一起" class="headerlink" title="把客户端连接到一起"></a>把客户端连接到一起</h1><p>现在信令服务器已经开发好，是时候利用它来创建一个应用了，我们将创建一个客户端应用，实现让两个用户通过webrtc来进行实时通信，需要包含以下四个步骤：</p>
<ul>
<li>从客户端获取到服务器的连接</li>
<li>识别各个连接端的用户</li>
<li>两个远程用户发起通话</li>
<li>结束通话</li>
</ul>
<h2 id="客户端应用"><a href="#客户端应用" class="headerlink" title="客户端应用"></a>客户端应用</h2><p>客户端应用的目标是让不同地方的用户互相连接并进行通信。</p>
<h2 id="获取一个连接"><a href="#获取一个连接" class="headerlink" title="获取一个连接"></a>获取一个连接</h2><p>第一件要做的就是与信令服务器创建连接，之前创建的信令服务器完全基于websocket协议，我们不需要依赖其他的类库去连接服务器，它仅使用现在大部分最新的浏览器都支持的websock功能。</p>
<h2 id="登录到应用程序"><a href="#登录到应用程序" class="headerlink" title="登录到应用程序"></a>登录到应用程序</h2><p>使用唯一的用户名登录是与服务器的首次交互行为，它用来识别我们的身份，同时给别的用户一个唯一的标识来呼叫我们，要这样做，我们只需要发送一个用户名给服务器，它会告诉我们这个用户名是否已经被使用。</p>
<h2 id="开始一个对等连接"><a href="#开始一个对等连接" class="headerlink" title="开始一个对等连接"></a>开始一个对等连接</h2><p>startConnection方法是任何webrtc连接的第一步，由于真个过程不依赖任何其他用户的连接，在用户试图和其他用户进行通话之前可以提前设置这一步，包含步骤如下：</p>
<ul>
<li>从相机中获取视频流</li>
<li>验证用户的浏览器是否支持webrtc</li>
<li>创建RTCPeerConnection对象</li>
</ul>
<h2 id="发起通话-1"><a href="#发起通话-1" class="headerlink" title="发起通话"></a>发起通话</h2><p>首先发送offer给另一个用户来开始整个过程，一旦用户得到这个offer,他将创建一个响应并开始交换ICE候选,直到成功连接到服务器。</p>
<h2 id="检测通信"><a href="#检测通信" class="headerlink" title="检测通信"></a>检测通信</h2><p>可以使用chrome浏览器，查看每一个发送的包。还可以使用网络代理和抓包工具拦截浏览器发送的数据包，这种设置起来比较麻烦，但是可以得到服务器和客户端发送的数据的更多信息。</p>
<h1 id="使用webrtc发送数据"><a href="#使用webrtc发送数据" class="headerlink" title="使用webrtc发送数据"></a>使用webrtc发送数据</h1><p>webrtc擅长进行数据传输，不仅仅是音频和视频流，还包括我们希望的任意数据类型。</p>
<h2 id="流控制传输协议和数据传输"><a href="#流控制传输协议和数据传输" class="headerlink" title="流控制传输协议和数据传输"></a>流控制传输协议和数据传输</h2><p>在用户之间发送数据，目前通常的做法是使用严格的TCP连接，即会用如AJAX和WebSockets技术将数据发送到服务端，并在另一端进行接收，这种缓慢而笨重的方式对于高性能的应用是一个瓶颈。在webrtc模型中，已经实现了用户之间高速、低延时的连接，通过这个连接，我们可以快读发送音频和视频数据，目前使用的协议是专为视频和音频流的帧设计的，这就是为什么webrtc在刚建立的对等连接中使用流控制传输协议(SCTP)作为数据传输的方式。</p>
<p>SCTP同样也是一种术语，位于独立的webrtc堆栈中，它给javascript开发者提供了许多新的方法进行数据传输，SCTP位于数据传输层安全协议(DTLS)之上，每个webrtc连接都实现了它并且为数据传输提供出口绑定到数据通道上，所有这些都位于UDP上，它为WebRTC数据提供基本的传输方法。</p>
<p>以下是SCTP的特点：</p>
<ul>
<li>传输层的安全性，基于DTLS层</li>
<li>传输层可以运行在可靠的或不可靠的模式中</li>
<li>传输层可以担保或者无担保数据包顺序</li>
<li>数据时面向消息 进行传播的，允许消息分解传输，在接收端重组</li>
<li>传输层支持流量和阻塞协议</li>
</ul>
<p>SCTP规范定义了使用多个端点，把消息分解成多个块进行发送数据，以下是这些术语解释：</p>
<ul>
<li>端点：在两个ip位置之间定义任意数据的连接</li>
<li>消息：任意从应用发送到SCTp层的数据</li>
<li>块：正准备通过电缆传输的数据包，表示消息的一部分</li>
</ul>
<p>协议总体跨越16个部分，在浏览器中，数据通道采用完全不同的渠道，而不像其他是基于数据的传输层所使用的通道，它是可配置的并且高效地控制数据传输。</p>
<h2 id="RTCDataChannel对象"><a href="#RTCDataChannel对象" class="headerlink" title="RTCDataChannel对象"></a>RTCDataChannel对象</h2><p>数据通道会存在于以下几种状态中：</p>
<ul>
<li>连接中：这是默认状态，当数据通道等待一个链接</li>
<li>开启：这种状态下，链接已经被建立。可以进行通信</li>
<li>关闭中：通道正在被销毁</li>
<li>关闭：这种状态下，通道关闭，无法进行通信。</li>
</ul>
<h2 id="数据通道选项"><a href="#数据通道选项" class="headerlink" title="数据通道选项"></a>数据通道选项</h2><p>SCTP在发送数据给另一端时，可以进行不同配置，这些配置选项已经提供给开发人员，传入的配置项是可选的，并且是一个普通JavaScript对象。</p>
<p>这些配置项可以使应用在UDP或者TCP的优势之间进行变化，一些选项使得通道更加稳定可靠，另外一些使得应用运行更加快。</p>
<h2 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h2><p>数据通道的send方法像websockets上的send方法进行了重载，这样允许在传输层上发送不同的javascript数据类型，使用不同的数据类型有助于提升应用的性能，这是由于大部分基于字符串编码的数据过于庞大，需要发送的数据包。</p>
<h2 id="加密与安全"><a href="#加密与安全" class="headerlink" title="加密与安全"></a>加密与安全</h2><p>使消息能安全地进行传输引起webrtc协议的设计者高度重视，背后的原因是许多大公司由于webrtc应用没有正常的安全保障而不考虑使用它，为了能增加被采用的概率，在设计API接口必须考虑安全性能被保障。</p>
<p>webrtc运行时，对于所有协议的实现，都会强制执行加密功能，这意味浏览器间的每一个对等连接，都自动处于高的安全级别中。</p>
<p>TCP和UDP最大的区别是前者能够保证信息到达另一边，这也是TLS和DTLS的主要区别，DTLS有能力处理消息丢失和接收消息时顺序不正确的能力，它能够在UDP协议基础上使用，这使DTLS满足像WEBRTC这类应用程序的加密要求，它是非常不错的选择。</p>
]]></content>
      <categories>
        <category>音视频</category>
      </categories>
      <tags>
        <tag>webrtc</tag>
      </tags>
  </entry>
  <entry>
    <title>机试常用算法总结</title>
    <url>/2020/05/21/%E6%9C%BA%E8%AF%95%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="进制转换专题"><a href="#进制转换专题" class="headerlink" title="进制转换专题"></a>进制转换专题</h2><h3 id="使用sscanf将字符数组转为整型的办法"><a href="#使用sscanf将字符数组转为整型的办法" class="headerlink" title="使用sscanf将字符数组转为整型的办法"></a>使用sscanf将字符数组转为整型的办法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="comment">//手动去除逗号的办法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispose</span><span class="params">(<span class="keyword">char</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> temp[<span class="number">15</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(a);i++)</span><br><span class="line">		<span class="keyword">if</span>(a[i]!=<span class="string">','</span>)</span><br><span class="line">			temp[pos++]=a[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(a);i++)</span><br><span class="line">		a[i]=temp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用string处理的办法,更简洁</span></span><br><span class="line"><span class="comment">int dealStr(string str)&#123;</span></span><br><span class="line"><span class="comment">    //好办法！！</span></span><br><span class="line"><span class="comment">    while(str.find(',')!=string::npos)&#123;</span></span><br><span class="line"><span class="comment">        size_t pos=str.find(',');</span></span><br><span class="line"><span class="comment">        str.erase(pos,1);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    //好函数</span></span><br><span class="line"><span class="comment">    return atoi(str.c_str());</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">	<span class="keyword">char</span> A[<span class="number">15</span>],B[<span class="number">15</span>];</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s %s"</span>,A,B)!=EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> a,b;</span><br><span class="line">		dispose(A);</span><br><span class="line">		dispose(B);</span><br><span class="line">      <span class="comment">//如何将字符数组转为输出成a，b整型</span></span><br><span class="line">		<span class="built_in">sscanf</span>(A,<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">		<span class="built_in">sscanf</span>(B,<span class="string">"%d"</span>,&amp;b);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a+b);</span><br><span class="line">		<span class="built_in">memset</span>(A,<span class="number">0</span>,<span class="keyword">sizeof</span>(A));</span><br><span class="line">		<span class="built_in">memset</span>(B,<span class="number">0</span>,<span class="keyword">sizeof</span>(B));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="字符串到整数"><a href="#字符串到整数" class="headerlink" title="字符串到整数"></a>字符串到整数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="comment">//atoi和itoa在头文件cstdlib中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//居然直接stoi就可以做到了！！</span></span><br><span class="line"> <span class="keyword">int</span> num=stoi(temp);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StringToInt</span><span class="params">(<span class="built_in">string</span> str)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> atoi(str.c_str());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//stream方法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">str_to_int</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;string_temp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="function"><span class="built_in">stringstream</span> <span class="title">stream</span><span class="params">(string_temp)</span></span>;</span><br><span class="line">    stream&gt;&gt;temp;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="整数到字符串-十进制转字符串"><a href="#整数到字符串-十进制转字符串" class="headerlink" title="整数到字符串(十进制转字符串)"></a>整数到字符串(十进制转字符串)</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于to_string</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">IntToString</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line">  <span class="comment">//itoa()函数有3个参数：第一个参数是要转换的数字，第二个参数是要写入转换结果的目标字符串，第三个参数是转移数字时所用 的基数。在上例中，转换基数为10。10：十进制；2：二进制...</span></span><br><span class="line">  <span class="keyword">return</span> itoa(num,str,<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有相同效果！！sprintf,&lt;cstdlib&gt;</span></span><br><span class="line"><span class="comment">//int sprintf(char *str, const char *format, ...)</span></span><br><span class="line"><span class="comment">//format -- 这是字符串，包含了要被写入到字符串 str 的文本。它可以包含嵌入的 format 标签，format 标签可被随后的附加参数中指定的值替换，并按需求进行格式化。format 标签属性是 %[flags][width][.precision][length]specifier，具体讲解如下：</span></span><br><span class="line">	<span class="keyword">char</span> s[<span class="number">5</span>],n[<span class="number">5</span>];</span><br><span class="line">		<span class="built_in">sprintf</span>(s,<span class="string">"%d"</span>,i);</span><br><span class="line">		<span class="built_in">sprintf</span>(n,<span class="string">"%d"</span>,i*<span class="number">9</span>);</span><br><span class="line"><span class="comment">//sstream相同效果</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="built_in">stringstream</span> ss;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">ss &lt;&lt; a;</span><br><span class="line">s = ss.str();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> s[<span class="number">4</span>],n[<span class="number">4</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">100</span>;i&lt;=<span class="number">999</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">100</span>;j&lt;=<span class="number">999</span>;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(i+j==<span class="number">532</span>)</span><br><span class="line">			&#123;</span><br><span class="line">              <span class="comment">//将整数问题转为输出字符的问题，就很棒</span></span><br><span class="line">				<span class="built_in">sprintf</span>(s,<span class="string">"%d"</span>,i);</span><br><span class="line">				<span class="built_in">sprintf</span>(n,<span class="string">"%d"</span>,j);</span><br><span class="line">				<span class="keyword">if</span>(s[<span class="number">1</span>]==n[<span class="number">0</span>]&amp;&amp;s[<span class="number">2</span>]==n[<span class="number">1</span>]&amp;&amp;s[<span class="number">2</span>]==n[<span class="number">2</span>])</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">"%c %c %c\n"</span>,s[<span class="number">0</span>],s[<span class="number">1</span>],s[<span class="number">2</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sstream版整型到字符串</span></span><br><span class="line">    <span class="built_in">stringstream</span> sstream;</span><br><span class="line">    <span class="built_in">string</span> strResult;</span><br><span class="line">    <span class="keyword">int</span> nValue = <span class="number">1000</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 将int类型的值放入输入流中</span></span><br><span class="line">    sstream &lt;&lt; nValue;</span><br><span class="line">    <span class="comment">// 从sstream中抽取前面插入的int类型的值，赋给string类型</span></span><br><span class="line">    sstream &gt;&gt; strResult;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"[cout]strResult is: "</span> &lt;&lt; strResult &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[printf]strResult is: %s\n"</span>, strResult.c_str());</span><br><span class="line"></span><br><span class="line"><span class="comment">//to_string版本</span></span><br><span class="line">to_string的头⽂件是 <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt; ， to_string最常⽤的就是把⼀个int型变量或者⼀个数字转</span></span></span><br><span class="line">化为<span class="built_in">string</span>类型的变量，当然也可以转<span class="keyword">double</span>、 <span class="keyword">float</span>等类型的变量，这在很多PAT字符串处理的题⽬</span><br><span class="line">中很有⽤处，以下是示例代码：</span><br></pre></td></tr></table></figure>
<h3 id="十进制转其他进制"><a href="#十进制转其他进制" class="headerlink" title="十进制转其他进制"></a>十进制转其他进制</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">DecToOther</span><span class="params">(<span class="keyword">int</span> dec)</span></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line">  <span class="keyword">return</span> itoa(dec,str,<span class="number">16</span>);</span><br><span class="line">  <span class="comment">//十进制转十六进制保存在str中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">decToString</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">while</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">char</span> c=(n%<span class="number">2</span>)+<span class="string">'0'</span>;</span><br><span class="line">        str=c+str;</span><br><span class="line">        n=n/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line">main() </span><br><span class="line">&#123;  </span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">0</span> ; </span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">"Please enter a decimal number:"</span>) ; </span><br><span class="line">  <span class="built_in">scanf</span> (<span class="string">"%d"</span>,&amp;a) ; </span><br><span class="line">  <span class="comment">//更简单办法</span></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">"%d's octal number is %o\n"</span>,a,a) ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="其他进制转十进制，strtol最容易搞忘"><a href="#其他进制转十进制，strtol最容易搞忘" class="headerlink" title="其他进制转十进制，strtol最容易搞忘"></a>其他进制转十进制，strtol最容易搞忘</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">OtherToDec</span><span class="params">(<span class="built_in">string</span> str)</span></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *s=str.c_str();</span><br><span class="line">  <span class="keyword">char</span> *<span class="built_in">stop</span>;</span><br><span class="line">  <span class="keyword">return</span> strtol(s,&amp;<span class="built_in">stop</span>,<span class="number">8</span>);</span><br><span class="line">  <span class="comment">//8进制转十进制</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//八进制转十进制</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">otherToDec</span><span class="params">(<span class="built_in">string</span> str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len=str.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        num=num+(str[i]-<span class="string">'0'</span>)*<span class="built_in">pow</span>(<span class="number">2</span>,len<span class="number">-1</span>-i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="任意进制函数转换"><a href="#任意进制函数转换" class="headerlink" title="任意进制函数转换"></a>任意进制函数转换</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">OtherToDec</span><span class="params">(<span class="built_in">string</span> str,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *s=str.c_str();</span><br><span class="line">    <span class="keyword">char</span> *<span class="built_in">stop</span>;</span><br><span class="line">    <span class="keyword">return</span> strtol(s,&amp;<span class="built_in">stop</span>,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">DecToOther</span><span class="params">(<span class="keyword">int</span> dec,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">return</span> itoa(dec,str,m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="built_in">string</span>  inputStr;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;inputStr&gt;&gt;m)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=OtherToDec(inputStr,n);</span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        ans=DecToOther(temp,m);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="strtol和itoa配合使用转换实例"><a href="#strtol和itoa配合使用转换实例" class="headerlink" title="strtol和itoa配合使用转换实例"></a>strtol和itoa配合使用转换实例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*给出两个不大于65535的非负整数，判断其中一个的16位二进制表示形式，是否能由另一个的16位二进制表示形式经过循环左移若干位而得到。 循环左移和普通左移的区别在于：最左边的那一位经过循环左移一位后就会被移到最右边去。比如： 1011 0000 0000 0001 经过循环左移一位后，变成 0110 0000 0000 0011, 若是循环左移2位，则变成 1100 0000 0000 0110*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">decToString</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line">    <span class="comment">//这个基数是目标</span></span><br><span class="line">    <span class="keyword">return</span> itoa(n,str,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">otherToDec</span><span class="params">(<span class="built_in">string</span> str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *<span class="built_in">stop</span>;</span><br><span class="line">    <span class="comment">//基数搞错了，基数指的是当前</span></span><br><span class="line">    <span class="keyword">return</span> strtol(str.c_str(),&amp;<span class="built_in">stop</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">int</span> m;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">        <span class="built_in">string</span> str=decToString(n);</span><br><span class="line">        <span class="keyword">while</span>(str.<span class="built_in">size</span>()&lt;<span class="number">16</span>)&#123;</span><br><span class="line">           str=<span class="string">'0'</span>+str;</span><br><span class="line">        &#125;</span><br><span class="line">        str=str+str;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line">        <span class="comment">//这样循环就不会包括100了！！</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">16</span>;i++)&#123;</span><br><span class="line">            <span class="built_in">string</span> temp=str.substr(i,<span class="number">16</span>);</span><br><span class="line">            ans.push_back(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ans.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp=otherToDec(ans[i]);</span><br><span class="line">            <span class="keyword">if</span>(m==temp)&#123;</span><br><span class="line">                flag=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="strtol函数用法"><a href="#strtol函数用法" class="headerlink" title="strtol函数用法"></a>strtol函数用法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">int</span> <span class="title">strtol</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">char</span> **endptr, <span class="keyword">int</span> base)</span></span></span><br><span class="line">str -- 要转换为长整数的字符串。</span><br><span class="line">endptr -- 对类型为 <span class="keyword">char</span>* 的对象的引用，其值由函数设置为 str 中数值后的下一个字符。</span><br><span class="line">base -- 基数，必须介于 <span class="number">2</span> 和 <span class="number">36</span>（包含）之间，或者是特殊值 <span class="number">0</span>。</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> str[<span class="number">30</span>] = <span class="string">"2030300 This is test"</span>;</span><br><span class="line">   <span class="keyword">char</span> *ptr;</span><br><span class="line">   <span class="keyword">long</span> ret;</span><br><span class="line"></span><br><span class="line">   ret = strtol(str, &amp;ptr, <span class="number">10</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"数字（无符号长整数）是 %ld\n"</span>, ret);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"字符串部分是 |%s|"</span>, ptr);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">数字（无符号长整数）是 <span class="number">2030300</span></span><br><span class="line">字符串部分是 | This is test|</span><br></pre></td></tr></table></figure>
<h3 id="手工完成其他进制转十进制，十进制转其他进制"><a href="#手工完成其他进制转十进制，十进制转其他进制" class="headerlink" title="手工完成其他进制转十进制，十进制转其他进制"></a>手工完成其他进制转十进制，十进制转其他进制</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">  <span class="comment">//在这里使用c输入时</span></span><br><span class="line"> <span class="comment">// wh i l e ( s c an f ( " %d%s%d " , &amp;a , s t r , &amp;b ) ! = EOF ) &#123;</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;str&gt;&gt;b)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> tmp=<span class="number">0</span>,c=<span class="number">1</span>,lenth=str.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=lenth<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="comment">//计算该位数字</span></span><br><span class="line">            <span class="keyword">if</span>(str[i]&gt;=<span class="string">'0'</span>&amp;&amp;str[i]&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">                x=str[i]-<span class="string">'0'</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(str[i]&gt;=<span class="string">'a'</span>&amp;&amp;str[i]&lt;=<span class="string">'z'</span>)&#123;</span><br><span class="line">                x=str[i]-<span class="string">'a'</span>+<span class="number">10</span>; <span class="comment">//多想了。。a代表的是10</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                x=str[i]-<span class="string">'A'</span>+<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp=tmp+x*c;</span><br><span class="line">            c=c*a;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> x=tmp%b;</span><br><span class="line">            <span class="comment">//计算当前位的数字</span></span><br><span class="line">            ans[<span class="built_in">size</span>++]=(x&lt;<span class="number">10</span>)?x+<span class="string">'0'</span>:x<span class="number">-10</span>+<span class="string">'A'</span>;</span><br><span class="line">            tmp=tmp/b;</span><br><span class="line">        &#125;<span class="keyword">while</span>(tmp);</span><br><span class="line">        <span class="comment">//while后面加分号</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="built_in">size</span><span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;ans[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="大数进制转换，大数除法"><a href="#大数进制转换，大数除法" class="headerlink" title="大数进制转换，大数除法"></a>大数进制转换，大数除法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res[<span class="number">1000</span>];</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str)&#123;</span><br><span class="line">        <span class="keyword">int</span> len=str.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> k=str.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(len&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            res[num++]=(str[k<span class="number">-1</span>]-<span class="string">'0'</span>)%<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//取余之后，得要模拟出除以2的效果!!</span></span><br><span class="line">            <span class="keyword">int</span> carry=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> s=((str[i]-<span class="string">'0'</span>)+<span class="number">10</span>*carry)/<span class="number">2</span>;</span><br><span class="line">                carry=(str[i]-<span class="string">'0'</span>)%<span class="number">2</span>;</span><br><span class="line">                str[i]=s+<span class="string">'0'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//除法会产生位数减少</span></span><br><span class="line">            <span class="keyword">while</span>(str[k-len]==<span class="string">'0'</span>) len--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=num<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) <span class="built_in">cout</span>&lt;&lt;res[i];</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//终极无敌循环班,m进制转n进制，大数，无限制</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bign</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> d[<span class="number">1000</span>];</span><br><span class="line">	<span class="keyword">int</span> len;</span><br><span class="line">	bign()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line">		len=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">bign <span class="title">change</span><span class="params">(<span class="keyword">char</span> s[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	bign a;</span><br><span class="line">	a.len=<span class="built_in">strlen</span>(s);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.len;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(s[a.len-i<span class="number">-1</span>]&gt;=<span class="string">'0'</span>&amp;&amp;s[a.len-i<span class="number">-1</span>]&lt;=<span class="string">'9'</span>)</span><br><span class="line">			a.d[i]=s[a.len-i<span class="number">-1</span>]-<span class="string">'0'</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(s[a.len-i<span class="number">-1</span>]&gt;=<span class="string">'A'</span>&amp;&amp;s[a.len-i<span class="number">-1</span>]&lt;=<span class="string">'Z'</span>)</span><br><span class="line">			a.d[i]=s[a.len-i<span class="number">-1</span>]-<span class="string">'A'</span>+<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m,n;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;m,&amp;n))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">char</span> a[<span class="number">1000</span>]=&#123;<span class="string">'\0'</span>&#125;;</span><br><span class="line">		<span class="keyword">char</span> out[<span class="number">1000</span>]=&#123;<span class="string">'\0'</span>&#125;;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>,a);</span><br><span class="line">		bign b=change(a);</span><br><span class="line">		<span class="keyword">int</span> k=b.len,len=b.len,num=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(len&gt;<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> c=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> s=(b.d[i]+m*c)/n;</span><br><span class="line">				<span class="comment">//终于明白了！！，c是循环计算，得出最后结果！！我傻了！！</span></span><br><span class="line">				c=(b.d[i]+m*c)%n;</span><br><span class="line">				b.d[i]=s;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(c&gt;=<span class="number">0</span>&amp;&amp;c&lt;=<span class="number">9</span>)</span><br><span class="line">				out[num++]=c+<span class="string">'0'</span>;</span><br><span class="line">			<span class="keyword">if</span>(c&gt;=<span class="number">10</span>&amp;&amp;c&lt;=<span class="number">36</span>)</span><br><span class="line">				out[num++]=c+<span class="string">'a'</span><span class="number">-10</span>;</span><br><span class="line">			<span class="keyword">while</span>(b.d[len<span class="number">-1</span>]==<span class="number">0</span>)</span><br><span class="line">				len--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=num<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%c"</span>,out[i]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">实际安排数字运用的范例</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bign</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> d[<span class="number">1010</span>];</span><br><span class="line">	<span class="keyword">int</span> len;</span><br><span class="line">	bign()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line">		len=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;big[<span class="number">110</span>];</span><br><span class="line"><span class="function">bign <span class="title">change</span><span class="params">(<span class="keyword">char</span> s[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	bign a;</span><br><span class="line">	a.len=<span class="built_in">strlen</span>(s);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.len;i++)</span><br><span class="line">		a.d[i]=s[a.len-i<span class="number">-1</span>]-<span class="string">'0'</span>;</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trans</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> temp=a[i];</span><br><span class="line">		a[i]=a[n<span class="number">-1</span>-i];</span><br><span class="line">		a[n<span class="number">-1</span>-i]=temp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> s[<span class="number">1010</span>];</span><br><span class="line">	<span class="keyword">int</span> mid[<span class="number">10010</span>]=&#123;<span class="number">0</span>&#125;,out[<span class="number">1010</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s))</span><br><span class="line">	&#123;</span><br><span class="line">		bign c=change(s);</span><br><span class="line">		<span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(c.len&gt;<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> re=<span class="number">0</span>;</span><br><span class="line">          <span class="comment">//关键是这个算法很棒！！，高位放在末尾，先动高位，高位除以成为0，可以直接删去</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=c.len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> temp=c.d[i]+re*<span class="number">10</span>;</span><br><span class="line">				c.d[i]=temp/<span class="number">2</span>;</span><br><span class="line">				re=temp%<span class="number">2</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			mid[len++]=re;</span><br><span class="line">			<span class="keyword">while</span>(c.d[c.len<span class="number">-1</span>]==<span class="number">0</span>)</span><br><span class="line">				c.len--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">		trans(mid,len);</span><br><span class="line">		<span class="keyword">while</span>(len&gt;<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> re=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> temp=mid[i]+re*<span class="number">2</span>;</span><br><span class="line">				mid[i]=temp/<span class="number">10</span>;</span><br><span class="line">				re=temp%<span class="number">10</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			out[sum++]=re;</span><br><span class="line">			<span class="keyword">while</span>(mid[len<span class="number">-1</span>]==<span class="number">0</span>)</span><br><span class="line">				len--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=sum<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d"</span>,out[i]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另一种更为简单的描述，大数转换两次</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 4000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">conversion</span><span class="params">(<span class="keyword">int</span> d[],<span class="keyword">int</span> data[],<span class="keyword">int</span> n,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;)&#123;</span><br><span class="line">        <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> t=(d[j]+k*x)%y;</span><br><span class="line">            d[j]=(d[j]+k*x)/y;</span><br><span class="line">            k=t;</span><br><span class="line">        &#125;</span><br><span class="line">        data[<span class="built_in">size</span>++]=k;</span><br><span class="line">        <span class="keyword">while</span>(d[i]==<span class="number">0</span>) i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">size</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">int</span> d[N],data[N];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</span><br><span class="line">            d[i]=s[i]-<span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">int</span> n=conversion(d,data,s.length(),<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span> start;</span><br><span class="line">        <span class="keyword">for</span>(start=<span class="number">0</span>;data[start]==<span class="number">0</span>;start++);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;n;i++)</span><br><span class="line">            data[i-start]=data[i];</span><br><span class="line">        n=conversion(data,d,n-start,<span class="number">2</span>,<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;d[i];</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="容器函数使用专题"><a href="#容器函数使用专题" class="headerlink" title="容器函数使用专题"></a>容器函数使用专题</h2><h3 id="string-h库函数memset-置零"><a href="#string-h库函数memset-置零" class="headerlink" title="string.h库函数memset()置零"></a>string.h库函数memset()置零</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">strcpy</span><span class="params">(<span class="keyword">char</span> *dest, <span class="keyword">const</span> <span class="keyword">char</span> *src)</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> src[<span class="number">40</span>];</span><br><span class="line">   <span class="keyword">char</span> dest[<span class="number">100</span>];</span><br><span class="line">  </span><br><span class="line">   <span class="built_in">memset</span>(dest, <span class="string">'\0'</span>, <span class="keyword">sizeof</span>(dest));</span><br><span class="line">   <span class="built_in">strcpy</span>(src, <span class="string">"This is runoob.com"</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>(dest, src);</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"最终的目标字符串： %s\n"</span>, dest);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">strcat</span><span class="params">(<span class="keyword">char</span> *dest, <span class="keyword">const</span> <span class="keyword">char</span> *src)</span></span></span><br><span class="line">   char src[50], dest[50];</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">strcpy</span>(src,  <span class="string">"This is source"</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>(dest, <span class="string">"This is destination"</span>);</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">strcat</span>(dest, src);</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"最终的目标字符串： |%s|"</span>, dest);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str1, <span class="keyword">const</span> <span class="keyword">char</span> *str2)</span></span></span><br><span class="line">     char str1[15];</span><br><span class="line">   <span class="keyword">char</span> str2[<span class="number">15</span>];</span><br><span class="line">   <span class="keyword">int</span> ret;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">   <span class="built_in">strcpy</span>(str1, <span class="string">"abcdef"</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>(str2, <span class="string">"ABCDEF"</span>);</span><br><span class="line"> </span><br><span class="line">   ret = <span class="built_in">strcmp</span>(str1, str2);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"str1 小于 str2"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>(ret &gt; <span class="number">0</span>) </span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"str2 小于 str1"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> </span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"str1 等于 str2"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="reverse-逆置函数algorithm头文件"><a href="#reverse-逆置函数algorithm头文件" class="headerlink" title="reverse()逆置函数algorithm头文件"></a>reverse()逆置函数algorithm头文件</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">        s.push_back(x);</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">     <span class="built_in">cout</span> &lt;&lt;s[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// reverse algorithm example</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;     // std::cout</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;    // std::reverse</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;       // std::vector</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; myvector;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set some values:</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">10</span>; ++i) myvector.push_back(i);   <span class="comment">// 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::reverse(myvector.<span class="built_in">begin</span>(),myvector.<span class="built_in">end</span>());    <span class="comment">// 9 8 7 6 5 4 3 2 1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// print out content:</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"myvector contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it=myvector.<span class="built_in">begin</span>(); it!=myvector.<span class="built_in">end</span>(); ++it)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *it;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="strrev逆置字符数组"><a href="#strrev逆置字符数组" class="headerlink" title="strrev逆置字符数组"></a>strrev逆置字符数组</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">char</span> s[]=<span class="string">"hello"</span>;</span><br><span class="line">     strrev(s);</span><br><span class="line">     <span class="built_in">puts</span>(s);</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><h3 id="排序sort函数"><a href="#排序sort函数" class="headerlink" title="排序sort函数"></a>排序sort函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> x;</span><br><span class="line">  <span class="keyword">int</span> y;</span><br><span class="line">  <span class="comment">//或在此处使用重载</span></span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;A) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x=A.x) <span class="keyword">return</span> x&lt;A.x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> y&lt;A.y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">com</span><span class="params">(Node &amp;a,Node &amp;b)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(a.x!=b.x) <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">vector</span>&lt;Node&gt; vec;</span><br><span class="line">  <span class="comment">//sort在vector容器中用法，在数组当中是sort(ans.ans+n);</span></span><br><span class="line">  sort(vec.<span class="built_in">begin</span>(),vec.<span class="built_in">end</span>(),com);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sort的其他写法,直接构造函数</span></span><br><span class="line">sort(raw.<span class="built_in">begin</span>(),raw.<span class="built_in">end</span>(),[](<span class="keyword">const</span> <span class="built_in">string</span> &amp;a,<span class="keyword">const</span> <span class="built_in">string</span> &amp;b)-&gt;<span class="keyword">bool</span>&#123;<span class="keyword">return</span> (a+b &lt; b+a);&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="stable-sort-稳定排序"><a href="#stable-sort-稳定排序" class="headerlink" title="stable_sort()稳定排序"></a>stable_sort()稳定排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生成绩排序</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, bs, score[<span class="number">500</span>], r[<span class="number">500</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> score[i]&lt;score[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> score[i]&gt;score[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> name[<span class="number">500</span>];</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt;n&gt;&gt;bs)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        r[i]=i;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt;name[i]&gt;&gt;score[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(bs==<span class="number">1</span>)</span><br><span class="line">        stable_sort(r,r+n,cmp);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        stable_sort(r,r+n,cmp1);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> t = r[i];</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; name[t]&lt;&lt;<span class="string">' '</span>&lt;&lt;score[t]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="algorithm头文件next-permulation函数（全排列）"><a href="#algorithm头文件next-permulation函数（全排列）" class="headerlink" title="algorithm头文件next_permulation函数（全排列）"></a>algorithm头文件next_permulation函数（全排列）</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// next_permutation example</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;     // std::cout</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;    // std::next_permutation, std::sort</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> myints[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::sort (myints,myints+<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The 3! possible permutations with 3 elements:\n"</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; myints[<span class="number">0</span>] &lt;&lt; <span class="string">' '</span> &lt;&lt; myints[<span class="number">1</span>] &lt;&lt; <span class="string">' '</span> &lt;&lt; myints[<span class="number">2</span>] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span> ( <span class="built_in">std</span>::next_permutation(myints,myints+<span class="number">3</span>) );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"After loop: "</span> &lt;&lt; myints[<span class="number">0</span>] &lt;&lt; <span class="string">' '</span> &lt;&lt; myints[<span class="number">1</span>] &lt;&lt; <span class="string">' '</span> &lt;&lt; myints[<span class="number">2</span>] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">output:</span><br><span class="line">The <span class="number">3</span>! possible permutations with <span class="number">3</span> elements:</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line">After loop: <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">  </span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> temp;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;temp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;temp&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;<span class="keyword">while</span>(next_permutation(temp.<span class="built_in">begin</span>(),temp.<span class="built_in">end</span>()));</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">样例输入 </span><br><span class="line">xyz</span><br><span class="line"></span><br><span class="line">样例输出 </span><br><span class="line">xyz </span><br><span class="line">xzy </span><br><span class="line">yxz </span><br><span class="line">yzx </span><br><span class="line">zxy </span><br><span class="line">zyx</span><br></pre></td></tr></table></figure>
<h3 id="vector容器insert函数"><a href="#vector容器insert函数" class="headerlink" title="vector容器insert函数"></a>vector容器insert函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; nameArr;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">string</span> name;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;name;</span><br><span class="line">          <span class="comment">//头部插入，倒序输出</span></span><br><span class="line">            nameArr.insert(nameArr.<span class="built_in">begin</span>(),name);</span><br><span class="line">            <span class="keyword">if</span>(i&lt;<span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;nameArr.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;j+<span class="number">1</span>&lt;&lt;<span class="string">"="</span>&lt;&lt;nameArr[j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;j+<span class="number">1</span>&lt;&lt;<span class="string">"="</span>&lt;&lt;nameArr[j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="vector容器pop-back-erase-方法删除元素"><a href="#vector容器pop-back-erase-方法删除元素" class="headerlink" title="vector容器pop_back(),erase()方法删除元素"></a>vector容器pop_back(),erase()方法删除元素</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">---- 向量容器<span class="built_in">vector</span>的成员函数pop_back()可以删除最后一个元素.</span><br><span class="line"></span><br><span class="line">---- 而函数erase()可以删除由一个iterator指出的元素，也可以删除一个指定范围的元素。</span><br><span class="line"></span><br><span class="line">---- 还可以采用通用算法<span class="built_in">remove</span>()来删除<span class="built_in">vector</span>容器中的元素.</span><br><span class="line"></span><br><span class="line">---- 不同的是：采用<span class="built_in">remove</span>一般情况下不会改变容器的大小，而pop_back()与erase()等成员函数会改变容器的大小。</span><br><span class="line"><span class="number">1</span>、pop_back()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_back</span><span class="params">()</span></span>;</span><br><span class="line">Delete last element</span><br><span class="line">Removes the last element in the <span class="built_in">vector</span>, effectively reducing the container <span class="built_in">size</span> by one.</span><br><span class="line"><span class="number">2</span>、erase()</span><br><span class="line">C++<span class="number">11</span></span><br><span class="line"><span class="function">iterator <span class="title">erase</span> <span class="params">(const_iterator <span class="built_in">position</span>)</span></span>;</span><br><span class="line"><span class="function">iterator <span class="title">erase</span> <span class="params">(const_iterator first, const_iterator last)</span></span>;</span><br><span class="line">删除指定位置的一个元素或删除指定范围内的元素</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        vec.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    vec.erase(vec.<span class="built_in">begin</span>()+<span class="number">5</span>);<span class="comment">//erase the 6th element</span></span><br><span class="line">    vec.erase(vec.<span class="built_in">begin</span>(),vec.<span class="built_in">begin</span>()+<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;vec[i]&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="string容器实用函数"><a href="#string容器实用函数" class="headerlink" title="string容器实用函数"></a>string容器实用函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">string</span> a=<span class="string">"xxxyyy"</span>;</span><br><span class="line">  <span class="built_in">string</span> b=<span class="string">"zzz"</span>;</span><br><span class="line">  <span class="comment">//substr要好好研究下</span></span><br><span class="line">  <span class="built_in">string</span> s2=a.substr(startpos,n);<span class="comment">//取子串</span></span><br><span class="line">  <span class="built_in">string</span>::size_type n=a.<span class="built_in">find</span>(<span class="string">"yy"</span>);</span><br><span class="line">  a.<span class="built_in">find</span>(<span class="string">"yyx"</span>); <span class="comment">//返回string::npos</span></span><br><span class="line">  <span class="built_in">string</span> s3=a.replace(<span class="number">0</span>,<span class="number">3</span>,<span class="string">"fff"</span>); <span class="comment">//替换fffyyy</span></span><br><span class="line">  <span class="built_in">string</span>::iterator p=a.insert(a.<span class="built_in">begin</span>(),<span class="string">'_'</span>);</span><br><span class="line">  a.insert(a.<span class="built_in">find</span>(<span class="string">'y'</span>),<span class="string">"_str_"</span>); <span class="comment">//在第一个找到"y"的下标前面插入一个指定字符</span></span><br><span class="line">  <span class="comment">//begin用法</span></span><br><span class="line">  <span class="comment">// sorts vec in "normal" order  </span></span><br><span class="line">sort(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());  </span><br><span class="line"><span class="comment">// sorts in reverse: puts smallest element at the end of vec  </span></span><br><span class="line">sort(vec.rbegin(), vec.rend()); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">string</span> c;</span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="built_in">cin</span>&gt;&gt;c;</span><br><span class="line">  <span class="keyword">if</span>(*(c.<span class="built_in">end</span>()<span class="number">-1</span>)== <span class="string">'*'</span>)&#123;  <span class="comment">//c.end() ;是一个迭代器，是个指针，前面加个* 就0k</span></span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="string-substr方法总结"><a href="#string-substr方法总结" class="headerlink" title="string::substr方法总结"></a>string::substr方法总结</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// string::substr</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">substr</span> <span class="params">(<span class="keyword">size_t</span> pos = <span class="number">0</span>, <span class="keyword">size_t</span> len = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line">pos:要作为子字符串复制的第一个字符的位置。如果等于字符串长度，则函数返回空字符串。如果它大于字符串长度，则抛出范围。注意：第一个字符用<span class="number">0</span>（不是<span class="number">1</span>）表示。</span><br><span class="line"> len:要包含在子字符串中的字符数（如果字符串较短，则使用尽可能多的字符）。字符串：：npos的值表示字符串结束之前的所有字符。</span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> str=<span class="string">"We think in generalities, but we live in details."</span>;</span><br><span class="line">                                           <span class="comment">// (quoting Alfred N. Whitehead)</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> str2 = str.substr (<span class="number">3</span>,<span class="number">5</span>);     <span class="comment">// "think"</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">size_t</span> pos = str.<span class="built_in">find</span>(<span class="string">"live"</span>);      <span class="comment">// position of "live" in str</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> str3 = str.substr (pos);     <span class="comment">// get from "live" to the end</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; str2 &lt;&lt; <span class="string">' '</span> &lt;&lt; str3 &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="erase删除方法总结"><a href="#erase删除方法总结" class="headerlink" title="erase删除方法总结"></a>erase删除方法总结</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">    <span class="built_in">string</span> str = <span class="string">"hello c++! +++"</span>;</span><br><span class="line">    <span class="comment">// 从位置pos=10处开始删除，直到结尾</span></span><br><span class="line">    <span class="comment">// 即： " +++"</span></span><br><span class="line">    str.erase(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">'-'</span> &lt;&lt; str &lt;&lt; <span class="string">'-'</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 从位置pos=6处开始，删除4个字符</span></span><br><span class="line">    <span class="comment">// 即: "c++!"</span></span><br><span class="line">    str.erase(<span class="number">6</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">'-'</span> &lt;&lt; str &lt;&lt; <span class="string">'-'</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除迭代器[first, last)区间的所有字符,返回一个指向被删除的最后一个元素的下一个字符的迭代器.</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> str = <span class="string">"hello c++! +++"</span>;</span><br><span class="line">    <span class="comment">// 删除"+++"前的一个空格</span></span><br><span class="line">    str.erase(str.<span class="built_in">begin</span>()+<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">'-'</span> &lt;&lt; str &lt;&lt; <span class="string">'-'</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 删除"+++"</span></span><br><span class="line">    str.erase(str.<span class="built_in">begin</span>() + <span class="number">10</span>, str.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">'-'</span> &lt;&lt; str &lt;&lt; <span class="string">'-'</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<h3 id="find方法总结"><a href="#find方法总结" class="headerlink" title="find方法总结"></a>find方法总结</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> (<span class="number">1</span>)	</span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">find</span> <span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; str, <span class="keyword">size_t</span> pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line">c-<span class="built_in">string</span> (<span class="number">2</span>)	</span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">find</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s, <span class="keyword">size_t</span> pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="built_in">buffer</span> (<span class="number">3</span>)	</span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">find</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s, <span class="keyword">size_t</span> pos, <span class="keyword">size_t</span> n)</span> <span class="keyword">const</span></span>;</span><br><span class="line">character (<span class="number">4</span>)	</span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">find</span> <span class="params">(<span class="keyword">char</span> c, <span class="keyword">size_t</span> pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">str</span><br><span class="line">Another <span class="built_in">string</span> with the subject to search <span class="keyword">for</span>.</span><br><span class="line">pos</span><br><span class="line">Position of the first character in the <span class="built_in">string</span> to be considered in the search.</span><br><span class="line">If <span class="keyword">this</span> is greater than the <span class="built_in">string</span> length, the function never finds matches.</span><br><span class="line">Note: The first character is denoted by a value of <span class="number">0</span> (<span class="keyword">not</span> <span class="number">1</span>): A value of <span class="number">0</span> means that the entire <span class="built_in">string</span> is searched.</span><br><span class="line">s</span><br><span class="line">Pointer to an <span class="built_in">array</span> of characters.</span><br><span class="line">If argument n is specified (3), the sequence to match are the first n characters in the array.</span><br><span class="line">Otherwise (<span class="number">2</span>), a null-terminated sequence is expected: the length of the sequence to match is determined by the first occurrence of a null character.</span><br><span class="line">n</span><br><span class="line">Length of sequence of characters to match.</span><br><span class="line">c</span><br><span class="line">Individual character to be searched <span class="keyword">for</span>.</span><br><span class="line">  </span><br><span class="line"><span class="comment">// string::find</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;       // std::cout</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;         // std::string</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">str</span> <span class="params">(<span class="string">"There are two needles in this haystack with needles."</span>)</span></span>;</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">str2</span> <span class="params">(<span class="string">"needle"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// different member versions of find in the same order as above:</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">size_t</span> found = str.<span class="built_in">find</span>(str2);</span><br><span class="line">  <span class="keyword">if</span> (found!=<span class="built_in">std</span>::<span class="built_in">string</span>::npos)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"first 'needle' found at: "</span> &lt;&lt; found &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  found=str.<span class="built_in">find</span>(<span class="string">"needles are small"</span>,found+<span class="number">1</span>,<span class="number">6</span>);</span><br><span class="line">  <span class="keyword">if</span> (found!=<span class="built_in">std</span>::<span class="built_in">string</span>::npos)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"second 'needle' found at: "</span> &lt;&lt; found &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  found=str.<span class="built_in">find</span>(<span class="string">"haystack"</span>);</span><br><span class="line">  <span class="keyword">if</span> (found!=<span class="built_in">std</span>::<span class="built_in">string</span>::npos)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"'haystack' also found at: "</span> &lt;&lt; found &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  found=str.<span class="built_in">find</span>(<span class="string">'.'</span>);</span><br><span class="line">  <span class="keyword">if</span> (found!=<span class="built_in">std</span>::<span class="built_in">string</span>::npos)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Period found at: "</span> &lt;&lt; found &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// let's replace the first needle:</span></span><br><span class="line">  str.replace(str.<span class="built_in">find</span>(str2),str2.length(),<span class="string">"preposition"</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">first 'needle' found at: 14</span><br><span class="line">second 'needle' found at: 44</span><br><span class="line">'haystack' also found at: 30</span><br><span class="line">Period found at: <span class="number">51</span></span><br><span class="line">There are two prepositions in <span class="keyword">this</span> haystack with needles.</span><br></pre></td></tr></table></figure>
<h3 id="find和erase联合使用实例"><a href="#find和erase联合使用实例" class="headerlink" title="find和erase联合使用实例"></a>find和erase联合使用实例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> key;</span><br><span class="line">    <span class="keyword">char</span> key2=<span class="string">' '</span>;</span><br><span class="line">    getline(<span class="built_in">cin</span>,key);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;key.<span class="built_in">size</span>();i++) key[i]=<span class="built_in">toupper</span>(key[i]);</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">while</span>(getline(<span class="built_in">cin</span>,str))&#123;</span><br><span class="line">        <span class="built_in">string</span> str2=str;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.<span class="built_in">size</span>();i++) str[i]=<span class="built_in">toupper</span>(str[i]);</span><br><span class="line">        <span class="keyword">while</span>(str.<span class="built_in">find</span>(key)!=<span class="built_in">string</span>::npos)&#123;</span><br><span class="line">        <span class="keyword">size_t</span> pos=str.<span class="built_in">find</span>(key);</span><br><span class="line">          <span class="comment">//用一个找位置，不输出，但也得同步删除</span></span><br><span class="line">        str.erase(pos,key.<span class="built_in">size</span>());</span><br><span class="line">        str2.erase(pos,key.<span class="built_in">size</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(str2.<span class="built_in">find</span>(key2)!=<span class="built_in">string</span>::npos)&#123;</span><br><span class="line">        <span class="keyword">size_t</span> pos=str2.<span class="built_in">find</span>(key2);</span><br><span class="line">        str2.erase(pos,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;str2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="replace使用方法"><a href="#replace使用方法" class="headerlink" title="replace使用方法"></a>replace使用方法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">用法一：用str替换指定字符串从起始位置pos开始长度为len的字符 </span><br><span class="line"><span class="function"><span class="built_in">string</span>&amp; <span class="title">replace</span> <span class="params">(<span class="keyword">size_t</span> pos, <span class="keyword">size_t</span> len, <span class="keyword">const</span> <span class="built_in">string</span>&amp; str)</span></span>; </span><br><span class="line">用法二： 用str替换 迭代器起始位置 和 结束位置 的字符 </span><br><span class="line"> <span class="function"><span class="built_in">string</span>&amp; <span class="title">replace</span> <span class="params">(const_iterator i1, const_iterator i2, <span class="keyword">const</span> <span class="built_in">string</span>&amp; str)</span></span>;</span><br><span class="line">用法三： 用substr的指定子串（给定起始位置和长度）替换从指定位置上的字符串 </span><br><span class="line">  <span class="function"><span class="built_in">string</span>&amp; <span class="title">replace</span> <span class="params">(<span class="keyword">size_t</span> pos, <span class="keyword">size_t</span> len, <span class="keyword">const</span> <span class="built_in">string</span>&amp; str, <span class="keyword">size_t</span> subpos, <span class="keyword">size_t</span> sublen)</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="string函数应用实例，小数指数转换"><a href="#string函数应用实例，小数指数转换" class="headerlink" title="string函数应用实例，小数指数转换"></a>string函数应用实例，小数指数转换</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">00.00120</span> <span class="number">000.012345</span></span><br><span class="line"><span class="comment">//stl应用，给出两个数，保留N位小数科学计数法之后是否相等,要给出转换结果</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">考虑数据本身，可以按整数部分是否为两种情况讨论</span></span><br><span class="line"><span class="comment">0.a1a2a3...</span></span><br><span class="line"><span class="comment">从小数点后第一个非零数字开始的三位，指数则是，小数点与非零位之间0的个数的相反数</span></span><br><span class="line"><span class="comment">b1b2..bm,a1a2a2...</span></span><br><span class="line"><span class="comment">首先判断是哪一类数据</span></span><br><span class="line"><span class="comment">在根据本体部分和指数是否都相等，判断是凑是相等的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="comment">//引用也要学会使用！！，这样可以返回修改多个东西</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">dipose</span><span class="params">(<span class="built_in">string</span> str,<span class="keyword">int</span> &amp;num)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(str[<span class="number">0</span>]==<span class="string">'0'</span>) &#123;</span><br><span class="line">        <span class="comment">//忘记一个重要的东西！！,i可以自增！！</span></span><br><span class="line">        str.erase(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//str.erase(str.begin())//去掉前导！！</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">'.'</span>)&#123;</span><br><span class="line">        str.erase(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//终于理顺了这个逻辑，不能用循环1！，因为每次删除的是前面</span></span><br><span class="line">        <span class="keyword">while</span>(str[<span class="number">0</span>]==<span class="string">'0'</span>)&#123;</span><br><span class="line">            str.erase(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        num=-num;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(str.<span class="built_in">find</span>(<span class="string">'.'</span>)!=<span class="built_in">string</span>::npos)&#123;</span><br><span class="line">            <span class="keyword">int</span> pos=str.<span class="built_in">find</span>(<span class="string">'.'</span>);</span><br><span class="line">            num=pos;</span><br><span class="line">            str.erase(pos,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            num=str.<span class="built_in">size</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">if</span>(str.<span class="built_in">size</span>()==<span class="number">0</span>) num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(str.<span class="built_in">size</span>()&lt;n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=str.<span class="built_in">size</span>();i&lt;n;i++)</span><br><span class="line">            str=str+<span class="string">'0'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            str=str.substr(<span class="number">0</span>,n);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str1,str2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;str1&gt;&gt;str2)&#123;</span><br><span class="line">        <span class="keyword">int</span> n1=<span class="number">0</span>,m2=<span class="number">0</span>;</span><br><span class="line">        str1=dipose(str1,n1);</span><br><span class="line">        str2=dipose(str2,m2);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;str1&lt;&lt;<span class="string">" "</span>&lt;&lt;n1&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;str2&lt;&lt;<span class="string">" "</span>&lt;&lt;m2&lt;&lt;  <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span>(n1==m2&amp;&amp;str1==str2)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="string">" 0."</span>&lt;&lt;str1&lt;&lt;<span class="string">"*10^"</span>&lt;&lt;n1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="string">" 0."</span>&lt;&lt;str1&lt;&lt;<span class="string">"*10^"</span>&lt;&lt;n1&lt;&lt;<span class="string">" 0."</span>&lt;&lt;str2&lt;&lt;<span class="string">"*10^"</span>&lt;&lt;m2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="reverse-函数使用方法"><a href="#reverse-函数使用方法" class="headerlink" title="reverse()函数使用方法"></a>reverse()函数使用方法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(getline(<span class="built_in">cin</span>,str))&#123;</span><br><span class="line">        reverse(str.<span class="built_in">begin</span>(),str.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;str&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//基础逆置方法</span></span><br><span class="line">	<span class="keyword">while</span>(gets(str))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len/<span class="number">2</span>;++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">char</span> temp=str[i];</span><br><span class="line">			str[i]=str[len<span class="number">-1</span>-i];</span><br><span class="line">			str[len<span class="number">-1</span>-i]=temp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s\n"</span>,str);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h3 id="swap函数使用"><a href="#swap函数使用" class="headerlink" title="swap函数使用"></a>swap函数使用</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">C++中的swap函数：交换函数</span><br><span class="line"></span><br><span class="line">好处：不用担心交换变量精度的缺失，无需构造临时变量，不会增加空间复杂度</span><br><span class="line"></span><br><span class="line">swap 包含在命名空间<span class="built_in">std</span> 里面</span><br><span class="line"></span><br><span class="line">swap(a,b);</span><br><span class="line"></span><br><span class="line">swap(a[i] = b[j]);</span><br><span class="line"></span><br><span class="line">leetcode的一个反转字符串举例：</span><br><span class="line"><span class="comment">//leetcode 反转字符串</span></span><br><span class="line"><span class="comment">//编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。</span></span><br><span class="line"><span class="comment">//不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。</span></span><br><span class="line"><span class="comment">//你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j = s.<span class="built_in">size</span>() - <span class="number">1</span>; i &lt; j; i++, j--)</span><br><span class="line">            swap(s[i] = s[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>；</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="set容器使用"><a href="#set容器使用" class="headerlink" title="set容器使用"></a>set容器使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;set&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">  	set&lt;int&gt; s;</span><br><span class="line">  	for(int i&#x3D;0;i&lt;5;i++)&#123;</span><br><span class="line">      s.insert(i*i);</span><br><span class="line">  	&#125;</span><br><span class="line">  	s.find(4); &#x2F;&#x2F;查找返回迭代器，找不到返回end()</span><br><span class="line">  	s.erase(4);</span><br><span class="line">  	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="map容器使用"><a href="#map容器使用" class="headerlink" title="map容器使用"></a>map容器使用</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line">  mp[<span class="string">'c'</span>]=<span class="number">1</span>;</span><br><span class="line">  mp[<span class="string">'b'</span>]=<span class="number">2</span>;</span><br><span class="line">  mp[<span class="string">'a'</span>]=<span class="number">3</span>;</span><br><span class="line">  <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator p=mp.<span class="built_in">begin</span>(); <span class="comment">//使用迭代器遍历</span></span><br><span class="line">  <span class="keyword">for</span>(;p!=mp.<span class="built_in">end</span>();++p)&#123;</span><br><span class="line">  <span class="comment">//输出顺序是a,b,c，map使用红黑树实现，自动排序的</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;p-&gt;first&lt;&lt;<span class="string">" "</span>&lt;&lt;p-&gt;second&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;mp[<span class="string">'b'</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  <span class="comment">//使用下标访问，输出2</span></span><br><span class="line">  <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator it=mp.<span class="built_in">find</span>(<span class="string">'b'</span>);</span><br><span class="line">  <span class="comment">//it指向&lt;'b',1&gt;</span></span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;it-&gt;second&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  mp.erase(it);</span><br><span class="line">  mp.erase(<span class="string">'a'</span>);</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;mp.<span class="built_in">size</span>()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//map使用方式</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mp1;</span><br><span class="line">    mp1[<span class="string">'C'</span>]=<span class="number">0</span>;</span><br><span class="line">    mp1[<span class="string">'J'</span>]=<span class="number">0</span>;</span><br><span class="line">    mp1[<span class="string">'B'</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mp2;</span><br><span class="line">    mp2[<span class="string">'C'</span>]=<span class="number">0</span>;</span><br><span class="line">    mp2[<span class="string">'J'</span>]=<span class="number">0</span>;</span><br><span class="line">    mp2[<span class="string">'B'</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> A[<span class="number">3</span>]=&#123;<span class="number">0</span>&#125;,B[<span class="number">3</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">char</span> c1,c2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;c1&gt;&gt;c2;</span><br><span class="line">            <span class="keyword">if</span>(c1==c2)&#123;</span><br><span class="line">                A[<span class="number">1</span>]++;</span><br><span class="line">                B[<span class="number">1</span>]++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>((c1==<span class="string">'C'</span>&amp;&amp;c2==<span class="string">'J'</span>)||(c1==<span class="string">'J'</span>&amp;&amp;c2==<span class="string">'B'</span>)||(c1==<span class="string">'B'</span>&amp;&amp;c2==<span class="string">'C'</span>))&#123;</span><br><span class="line">                A[<span class="number">0</span>]++;</span><br><span class="line">                B[<span class="number">2</span>]++;</span><br><span class="line">                mp1[c1]++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>((c2==<span class="string">'C'</span>&amp;&amp;c1==<span class="string">'J'</span>)||(c2==<span class="string">'J'</span>&amp;&amp;c1==<span class="string">'B'</span>)||(c2==<span class="string">'B'</span>&amp;&amp;c1==<span class="string">'C'</span>))&#123;</span><br><span class="line">                A[<span class="number">2</span>]++;</span><br><span class="line">                B[<span class="number">0</span>]++;</span><br><span class="line">                mp2[c2]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;A[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;B[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator p1=mp1.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator p2=mp2.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;p1-&gt;first&lt;&lt;<span class="string">" "</span>&lt;&lt;p2-&gt;first;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>map使用实例，借用key的自动排序功能：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt; mp1;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> key;</span><br><span class="line">            <span class="built_in">string</span> color;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;key&gt;&gt;color;</span><br><span class="line">            <span class="comment">//可以这样赋值,确实是按照key自动增序排列的</span></span><br><span class="line">            <span class="comment">//mp1[key]=color;</span></span><br><span class="line">            mp1.insert(pair&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt;(key,color));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*for(auto it=mp1.begin();it!=mp1.end();it++)&#123;</span></span><br><span class="line"><span class="comment">            cout&lt;&lt;it-&gt;second&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">        &#125; 正向遍历 */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt;::reverse_iterator rit=mp1.rbegin();rit!=mp1.rend();rit++)&#123;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;rit-&gt;second&lt;&lt;endl;</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;(*rit).second&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="unorder-map容器使用（hash树）"><a href="#unorder-map容器使用（hash树）" class="headerlink" title="unorder_map容器使用（hash树）"></a>unorder_map容器使用（hash树）</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m,temp;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">bool</span>&gt; mp;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">bool型      default 是 false;</span></span><br><span class="line"><span class="comment">bool 是基本型别，同 int；</span></span><br><span class="line"><span class="comment">BOOL 是个类，同INTEGER，可以调相应的方法.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp);</span><br><span class="line">			mp[temp]=<span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp);</span><br><span class="line">			<span class="keyword">if</span>(mp[temp]==<span class="literal">false</span>)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//unordered_map，运用出神入化！！学生id映射结构体student，用无序是为了使用hash，不让他乱排序</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> id,age;</span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">100</span>],sex[<span class="number">100</span>];</span><br><span class="line">&#125;stu;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m,temp;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,student&gt; mp;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %s %s %d"</span>,&amp;stu.id,stu.name,stu.sex,&amp;stu.age);</span><br><span class="line">			mp[stu.id]=stu;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d %s %s %d\n"</span>,mp[temp].id,mp[temp].name,mp[temp].sex,mp[temp].age);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="堆栈-ordermap使用括号匹配"><a href="#堆栈-ordermap使用括号匹配" class="headerlink" title="堆栈+ordermap使用括号匹配"></a>堆栈+ordermap使用括号匹配</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispose</span><span class="params">(<span class="built_in">string</span> str,<span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; <span class="built_in">list</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; bracket;</span><br><span class="line">    <span class="comment">//规则是，左括号全都入栈，直到找到右括号就全部弹出到第一个左括号</span></span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it=str.<span class="built_in">begin</span>();it!=str.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">list</span>.count(*it)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//此处应当是只将括号入栈</span></span><br><span class="line">                <span class="comment">//在list当中有括号的情况下</span></span><br><span class="line">            <span class="keyword">if</span>(bracket.empty()==<span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="comment">//这个意思是匹配上了！！一定要注意两个状态，栈顶和当前</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">list</span>[bracket.top()]+<span class="built_in">list</span>[*it]==<span class="number">7</span>)</span><br><span class="line">                    bracket.pop();</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">list</span>[*it]&lt;=<span class="number">3</span>)</span><br><span class="line">                        <span class="comment">//左括号全部推入</span></span><br><span class="line">                        bracket.push(*it);</span><br><span class="line">                    <span class="comment">//如果it右部匹配又是右括号就要跳出循环</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//如果当前是空的话，若是立马遇见错括号可以直接跳楼了</span></span><br><span class="line">                bracket.push(*it);</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">list</span>[*it]&gt;<span class="number">3</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这里是左括号多余的情况</span></span><br><span class="line">    <span class="keyword">if</span>(bracket.empty()==<span class="literal">false</span>)</span><br><span class="line">        flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"no\n"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"yes\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//堆栈括号匹配，主要是不记得括号匹配的规则了,</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; <span class="built_in">list</span>;</span><br><span class="line">    <span class="comment">//只想说这样匹配太好用了，优雅</span></span><br><span class="line">    <span class="built_in">list</span>[<span class="string">'&#123;'</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">list</span>[<span class="string">'['</span>]=<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">list</span>[<span class="string">'('</span>]=<span class="number">3</span>;</span><br><span class="line">    <span class="built_in">list</span>[<span class="string">')'</span>]=<span class="number">4</span>;</span><br><span class="line">    <span class="built_in">list</span>[<span class="string">']'</span>]=<span class="number">5</span>;</span><br><span class="line">    <span class="built_in">list</span>[<span class="string">'&#125;'</span>]=<span class="number">6</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="built_in">string</span> temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">            dispose(temp,<span class="built_in">list</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="堆栈使用简单计算器"><a href="#堆栈使用简单计算器" class="headerlink" title="堆栈使用简单计算器"></a>堆栈使用简单计算器</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">str_to_int</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;string_temp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="function"><span class="built_in">stringstream</span> <span class="title">stream</span><span class="params">(string_temp)</span></span>;</span><br><span class="line">    stream&gt;&gt;temp;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">compute</span><span class="params">(<span class="built_in">stack</span>&lt;<span class="keyword">double</span>&gt; &amp;number,<span class="built_in">stack</span>&lt;<span class="built_in">string</span>&gt; &amp;sign)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> b=number.top();</span><br><span class="line">    <span class="comment">//终于知道了，取值只能靠top！！，pop相当于清除</span></span><br><span class="line">    number.pop();</span><br><span class="line">    <span class="keyword">double</span> a=number.top();</span><br><span class="line">    number.pop();</span><br><span class="line">    <span class="built_in">string</span> op=sign.top();</span><br><span class="line">    sign.pop();</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="string">"+"</span>)&#123;</span><br><span class="line">            <span class="comment">//果然是按照算法一步步来的</span></span><br><span class="line">        number.push(a+b);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">"-"</span>)&#123;</span><br><span class="line">        number.push(a-b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">"*"</span>)&#123;</span><br><span class="line">        number.push(a*b);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        number.push(a/b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dispose</span><span class="params">(<span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; isp,<span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; osp,<span class="built_in">string</span> str)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">double</span>&gt; number;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="built_in">string</span>&gt; sign;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//这仿佛是在寻找数字和操作符</span></span><br><span class="line">    <span class="keyword">while</span>(str.empty()==<span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="built_in">string</span> temp;</span><br><span class="line">        <span class="keyword">int</span> pos=str.<span class="built_in">find</span>(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">if</span>(pos!=<span class="built_in">string</span>::npos)&#123;</span><br><span class="line">            temp=temp+str.substr(<span class="number">0</span>,pos);</span><br><span class="line">            str.erase(<span class="number">0</span>,pos+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//找不到空格的时候，直接可以取最后剩余作为字符串</span></span><br><span class="line">            temp=str;</span><br><span class="line">            str.<span class="built_in">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>)&#123;</span><br><span class="line">            number.push(str_to_int(temp));</span><br><span class="line">            <span class="comment">//fflag表示已经转换？？，最后存成了double型？？</span></span><br><span class="line">            <span class="comment">//flag为1应当表示的是操作符而不是数字</span></span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(sign.empty()==<span class="literal">false</span>)&#123;</span><br><span class="line">                    <span class="comment">//比较栈顶的和当前temp中的优先级</span></span><br><span class="line">                <span class="keyword">if</span>(isp[sign.top()]&gt;=osp[temp])&#123;</span><br><span class="line">                    <span class="keyword">while</span>(sign.empty()==<span class="literal">false</span>)&#123;</span><br><span class="line">                            <span class="comment">//比较堆栈优先级和当前操作符优先级</span></span><br><span class="line">                        <span class="keyword">if</span>(isp[sign.top()]&lt;osp[temp])</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//只有栈顶的优先级比较大的时候才可以计算，否则得要符号入栈</span></span><br><span class="line">                        compute(number,sign);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sign.push(temp);</span><br><span class="line">            <span class="comment">//操作符入栈，并且表示下一个字符为数字</span></span><br><span class="line">            flag=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(sign.empty()==<span class="literal">false</span>)&#123;</span><br><span class="line">        compute(number,sign);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> number.top();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中缀表达式转后缀表达式，最后按照相应规则处理数字栈和符号栈</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> temp;</span><br><span class="line">    <span class="keyword">while</span>(getline(<span class="built_in">cin</span>,temp))&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp!=<span class="string">"0"</span>)&#123;</span><br><span class="line">            <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; isp,osp;</span><br><span class="line">            isp[<span class="string">"+"</span>]=<span class="number">1</span>;</span><br><span class="line">            isp[<span class="string">"-"</span>]=<span class="number">1</span>;</span><br><span class="line">            isp[<span class="string">"*"</span>]=<span class="number">2</span>;</span><br><span class="line">            isp[<span class="string">"/"</span>]=<span class="number">2</span>;</span><br><span class="line">            osp[<span class="string">"+"</span>]=<span class="number">1</span>;</span><br><span class="line">            osp[<span class="string">"-"</span>]=<span class="number">1</span>;</span><br><span class="line">            osp[<span class="string">"*"</span>]=<span class="number">2</span>;</span><br><span class="line">            osp[<span class="string">"/"</span>]=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">double</span> result=dispose(isp,osp,temp);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>,result);</span><br><span class="line">            temp.<span class="built_in">clear</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="栈-队列实现中缀转后缀，计算后缀表达式"><a href="#栈-队列实现中缀转后缀，计算后缀表达式" class="headerlink" title="栈+队列实现中缀转后缀，计算后缀表达式"></a>栈+队列实现中缀转后缀，计算后缀表达式</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;32/bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//如何模仿计算器</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">步骤一：中缀表达式转后缀表达式</span></span><br><span class="line"><span class="comment">设立一个操作符栈，可以临时存放操作符，设立一个数组或者队列，用以存放后缀表达式</span></span><br><span class="line"><span class="comment">步骤二：计算后缀表达式</span></span><br><span class="line"><span class="comment">从左到右扫描后缀表达式，操作数则入栈，操作符则连续弹出两个操作数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> num; <span class="comment">//操作数</span></span><br><span class="line">    <span class="keyword">char</span> op;   <span class="comment">//操作符</span></span><br><span class="line">    <span class="keyword">bool</span> flag;  <span class="comment">//true表示操作数，false表示操作符</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="comment">//处理输入</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>&lt;node&gt; s; <span class="comment">//操作符栈</span></span><br><span class="line"><span class="built_in">queue</span>&lt;node&gt; q; <span class="comment">//后缀表达式序列</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; op;  <span class="comment">//存储优先级！！</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Change</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> num;</span><br><span class="line">    node temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.<span class="built_in">size</span>();)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isdigit</span>(str[i]))&#123;</span><br><span class="line">            temp.flag=<span class="literal">true</span>;  <span class="comment">//标记为数字</span></span><br><span class="line">            temp.num=str[i++]-<span class="string">'0'</span>;  <span class="comment">//由于可能是一个百位数字，先记录高位</span></span><br><span class="line">            <span class="keyword">while</span>(i&lt;str.<span class="built_in">size</span>()&amp;&amp;<span class="built_in">isdigit</span>(str[i]))&#123;</span><br><span class="line">                temp.num=temp.num*<span class="number">10</span>+(str[i]-<span class="string">'0'</span>);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            temp.flag=<span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//标记是操作符，只要栈顶元素比该操作符优先级高，就把栈顶元素弹到表达式中</span></span><br><span class="line">            <span class="keyword">while</span>(!s.empty()&amp;&amp;op[str[i]]&lt;=op[s.top().op])&#123;</span><br><span class="line">                q.push(s.top());</span><br><span class="line">                s.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            temp.op=str[i];</span><br><span class="line">            <span class="comment">//压入新的操作符</span></span><br><span class="line">            s.push(temp);</span><br><span class="line">            i++;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//若操作符中还有操作符，就得都弹入后缀表达式序列</span></span><br><span class="line">        q.push(s.top());</span><br><span class="line">        s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Cal</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//计算后缀表达式</span></span><br><span class="line">    <span class="keyword">double</span> temp1,temp2;</span><br><span class="line">    node cur,temp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        cur=q.front();  <span class="comment">//cur记录队首元素</span></span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(cur.flag==<span class="literal">true</span>) s.push(cur);  <span class="comment">//操作数直接压栈</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            temp2=s.top().num; <span class="comment">//先弹出来的是第二操作数</span></span><br><span class="line">            s.pop();</span><br><span class="line">            temp1=s.top().num; <span class="comment">//弹出第一操作数</span></span><br><span class="line">            s.pop();</span><br><span class="line"></span><br><span class="line">            temp.flag=<span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//临时记录草锁住</span></span><br><span class="line">            <span class="keyword">if</span>(cur.op==<span class="string">'+'</span>) temp.num=temp1+temp2;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cur.op==<span class="string">'-'</span>) temp.num=temp1-temp2;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cur.op==<span class="string">'*'</span>) temp.num=temp1*temp2;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cur.op==<span class="string">'/'</span>) temp.num=temp1/temp2;</span><br><span class="line"></span><br><span class="line">            s.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s.top().num;</span><br><span class="line">    <span class="comment">//栈顶元素为后缀表达式的值</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    op[<span class="string">'+'</span>]=op[<span class="string">'-'</span>]=<span class="number">1</span>;</span><br><span class="line">    op[<span class="string">'*'</span>]=op[<span class="string">'/'</span>]=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(getline(<span class="built_in">cin</span>,str),str!=<span class="string">"0"</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it=str.<span class="built_in">end</span>();it!=str.<span class="built_in">begin</span>();it--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(*it==<span class="string">' '</span>) str.erase(it); <span class="comment">//去除掉表达式中空格</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!s.empty()) s.pop(); <span class="comment">//初始化栈</span></span><br><span class="line">        Change();  <span class="comment">//中缀转后缀</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>,Cal());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello world!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="栈-队列计算，包括括号版"><a href="#栈-队列计算，包括括号版" class="headerlink" title="栈+队列计算，包括括号版"></a>栈+队列计算，包括括号版</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">48</span>*((<span class="number">70</span><span class="number">-65</span>)<span class="number">-43</span>)+<span class="number">8</span>*<span class="number">1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">char</span> op;</span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line">    <span class="comment">//true表示操作数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>&lt;node&gt; s; <span class="comment">//操作符栈</span></span><br><span class="line"><span class="built_in">queue</span>&lt;node&gt; q;<span class="comment">//后缀表达式序列</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; op;  <span class="comment">//map存储符号优先级</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Change</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    node temp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.<span class="built_in">size</span>();)&#123;</span><br><span class="line">            <span class="comment">//括号处理出的问题</span></span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'('</span>)&#123;</span><br><span class="line">            temp.flag=<span class="literal">false</span>;</span><br><span class="line">            temp.op=str[i];</span><br><span class="line">            s.push(temp);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">')'</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(s.top().op!=<span class="string">'('</span>)&#123;</span><br><span class="line">                q.push(s.top());</span><br><span class="line">                s.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            s.pop();</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isdigit</span>(str[i]))&#123;</span><br><span class="line">            temp.flag=<span class="literal">true</span>;</span><br><span class="line">            temp.num=str[i++]-<span class="string">'0'</span>;</span><br><span class="line">            <span class="comment">//多位数怎么办</span></span><br><span class="line">            <span class="keyword">while</span>(i&lt;str.<span class="built_in">size</span>()&amp;&amp;<span class="built_in">isdigit</span>(str[i]))&#123;</span><br><span class="line">                temp.num=temp.num*<span class="number">10</span>+(str[i]-<span class="string">'0'</span>);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//真正的队列压入</span></span><br><span class="line">            q.push(temp);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            temp.flag=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">while</span>(!s.empty()&amp;&amp;op[str[i]]&lt;=op[s.top().op])&#123;</span><br><span class="line">                q.push(s.top());</span><br><span class="line">                s.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            temp.op=str[i];</span><br><span class="line">            <span class="comment">//真正的操作符压入</span></span><br><span class="line">            s.push(temp);</span><br><span class="line">            i++;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">        q.push(s.top());</span><br><span class="line">        s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Cal</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp1,temp2;</span><br><span class="line">    node cur,temp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        cur=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(cur.flag==<span class="literal">true</span>)</span><br><span class="line">            <span class="comment">//一个栈多用</span></span><br><span class="line">            s.push(cur);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//第二操作数</span></span><br><span class="line">            temp2=s.top().num;</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="comment">//弹出第一操作数</span></span><br><span class="line">            temp1=s.top().num;</span><br><span class="line">            s.pop();</span><br><span class="line"></span><br><span class="line">            temp.flag=<span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//temp1,temp2生成</span></span><br><span class="line">            <span class="keyword">if</span>(cur.op==<span class="string">'+'</span>)</span><br><span class="line">                temp.num=temp1+temp2;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cur.op==<span class="string">'-'</span>)</span><br><span class="line">                temp.num=temp1-temp2;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cur.op==<span class="string">'*'</span>)</span><br><span class="line">                temp.num=temp1*temp2;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cur.op==<span class="string">'/'</span>)</span><br><span class="line">                temp.num=temp1/temp2;</span><br><span class="line"></span><br><span class="line">            s.push(temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.top().num;</span><br><span class="line">    <span class="comment">//栈顶元素为最后值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    op[<span class="string">'+'</span>]=op[<span class="string">'-'</span>]=<span class="number">1</span>;</span><br><span class="line">    op[<span class="string">'*'</span>]=op[<span class="string">'/'</span>]=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(getline(<span class="built_in">cin</span>,str))&#123;</span><br><span class="line">        <span class="keyword">while</span>(!s.empty()) s.pop(); <span class="comment">//初始化栈</span></span><br><span class="line">        Change();  <span class="comment">//中缀转后缀</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Cal());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="另一种直接写法，不会栈溢出"><a href="#另一种直接写法，不会栈溢出" class="headerlink" title="另一种直接写法，不会栈溢出"></a>另一种直接写法，不会栈溢出</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">char</span> op;</span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; s;</span><br><span class="line"><span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">1010</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    m[<span class="string">'+'</span>]=<span class="number">1</span>;</span><br><span class="line">    m[<span class="string">'-'</span>]=<span class="number">1</span>;</span><br><span class="line">    m[<span class="string">'('</span>]=<span class="number">0</span>;</span><br><span class="line">    m[<span class="string">'*'</span>]=<span class="number">2</span>;</span><br><span class="line">    m[<span class="string">'/'</span>]=<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]&gt;=<span class="string">'0'</span>&amp;&amp;str[i]&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(str[i]&gt;=<span class="string">'0'</span>&amp;&amp;str[i]&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">                sum=sum*<span class="number">10</span>+str[i]-<span class="string">'0'</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            Node.data=sum;</span><br><span class="line">            Node.flag=<span class="number">1</span>;</span><br><span class="line">            q.push(Node);</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!(str[i]&gt;=<span class="string">'0'</span>&amp;&amp;str[i]&lt;=<span class="string">'9'</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i]==<span class="string">'('</span>)</span><br><span class="line">                s.push(str[i]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">')'</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span>(s.top()!=<span class="string">'('</span>)&#123;</span><br><span class="line">                    Node.op=s.top();</span><br><span class="line">                    Node.flag=<span class="number">0</span>;</span><br><span class="line">                    q.push(Node);</span><br><span class="line">                    s.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                s.pop();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.empty()||m[str[i]]&gt;m[s.top()])&#123;</span><br><span class="line">                s.push(str[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">while</span>(!s.empty()&amp;&amp;m[str[i]]&lt;=m[s.top()])&#123;</span><br><span class="line">                Node.op=s.top();</span><br><span class="line">                Node.flag=<span class="number">0</span>;</span><br><span class="line">                q.push(Node);</span><br><span class="line">                s.pop();</span><br><span class="line">               &#125;</span><br><span class="line">               s.push(str[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//printf("2");</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">        Node.op=s.top();</span><br><span class="line">        Node.flag=<span class="number">0</span>;</span><br><span class="line">        q.push(Node);</span><br><span class="line">        s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s1;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        node no=q.front();</span><br><span class="line">        <span class="keyword">if</span>(no.flag==<span class="number">1</span>)&#123;</span><br><span class="line">            s1.push(no.data);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> a=s1.top();</span><br><span class="line">            s1.pop();</span><br><span class="line">            <span class="keyword">int</span> b=s1.top();</span><br><span class="line">            s1.pop();</span><br><span class="line">            <span class="keyword">if</span>(no.op==<span class="string">'+'</span>)&#123;</span><br><span class="line">                sum=a+b;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(no.op==<span class="string">'-'</span>)&#123;</span><br><span class="line">                sum=b-a;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(no.op==<span class="string">'*'</span>)&#123;</span><br><span class="line">                sum=a*b;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sum=b/a;</span><br><span class="line">            &#125;</span><br><span class="line">            s1.push(sum);</span><br><span class="line">        &#125;</span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,s1.top());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="队列使用"><a href="#队列使用" class="headerlink" title="队列使用"></a>队列使用</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">    q.push(i);</span><br><span class="line">    <span class="comment">//入队</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(q.empty())&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;q.front()&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//输出队首1和队尾5</span></span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;q.back()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">if</span>(q.empty())&#123;</span><br><span class="line">    q.pop();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="任务调度：优先队列-string处理和unordermap"><a href="#任务调度：优先队列-string处理和unordermap" class="headerlink" title="任务调度：优先队列+string处理和unordermap"></a>任务调度：优先队列+string处理和unordermap</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//优先队列进行任务调度</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入 </span></span><br><span class="line"><span class="comment">输入包含多组测试数据。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">每组第一行输入一个整数n（n&lt;100000），表示有n个任务。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">接下来n行，每行第一个表示前序任务，括号中的任务为若干个后序任务，表示只有在前序任务完成的情况下，后序任务才能开始。若后序为NULL则表示无后继任务。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出 </span></span><br><span class="line"><span class="comment">输出调度方式，输出如果有多种适合的调度方式，请输出字典序最小的一种。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Task</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> level;</span><br><span class="line">    <span class="comment">//定义优先规则</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> <span class="built_in">Task</span> &amp;t1,<span class="keyword">const</span> <span class="built_in">Task</span> &amp;t2)&#123;</span><br><span class="line">        <span class="keyword">if</span>(t1.level!=t2.level)</span><br><span class="line">            <span class="keyword">return</span> t1.level&gt;t2.level;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> t1.name&gt;t2.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用引用表示要修改</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispose</span><span class="params">(<span class="built_in">string</span> str,priority_queue&lt;<span class="built_in">Task</span>&gt; &amp;task,<span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; &amp;<span class="built_in">list</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> first;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">int</span> firstlevel;</span><br><span class="line">    <span class="comment">//从输入当中分理出任务</span></span><br><span class="line">    pos=str.<span class="built_in">find</span>(<span class="string">'('</span>);</span><br><span class="line">    first=str.substr(<span class="number">0</span>,pos);</span><br><span class="line">    str.erase(<span class="number">0</span>,pos+<span class="number">1</span>);</span><br><span class="line">  <span class="comment">//list.count只能是1或0，,1表示存在，0表示没有，类似find</span></span><br><span class="line">  <span class="comment">//而find返回的则是元素的迭代器</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">list</span>.count(first)==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">Task</span> newtask;</span><br><span class="line">        newtask.name=first;</span><br><span class="line">        newtask.level=<span class="number">0</span>;</span><br><span class="line">        task.push(newtask);</span><br><span class="line">        firstlevel=<span class="built_in">list</span>[first]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        firstlevel=<span class="built_in">list</span>[first];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//str也可以使用empty函数</span></span><br><span class="line">    <span class="keyword">while</span>(str.empty()==<span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="built_in">string</span> last;</span><br><span class="line">        pos=str.<span class="built_in">find</span>(<span class="string">','</span>);</span><br><span class="line">        <span class="keyword">if</span>(str.<span class="built_in">find</span>(<span class="string">','</span>)==<span class="built_in">string</span>::npos)&#123;</span><br><span class="line">            pos=str.<span class="built_in">find</span>(<span class="string">')'</span>);</span><br><span class="line">            last=str.substr(<span class="number">0</span>,pos);</span><br><span class="line">            str.<span class="built_in">clear</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        last=str.substr(<span class="number">0</span>,pos);</span><br><span class="line">        str.erase(<span class="number">0</span>,pos+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(last!=<span class="string">"NULL"</span>)&#123;</span><br><span class="line">            <span class="built_in">Task</span> newtask;</span><br><span class="line">            newtask.name=last;</span><br><span class="line">            newtask.level=firstlevel+<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">list</span>[last]=newtask.level;</span><br><span class="line">            task.push(newtask);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        priority_queue&lt;<span class="built_in">Task</span>&gt; task;</span><br><span class="line">      <span class="comment">//hash对应，且不排序</span></span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; <span class="built_in">list</span>;</span><br><span class="line">        <span class="built_in">string</span> temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">            dispose(temp,task,<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(task.empty()==<span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;task.top().name;</span><br><span class="line">            task.pop();</span><br><span class="line">            <span class="keyword">if</span>(!task.empty())&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">list</span>.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="输入输出专题"><a href="#输入输出专题" class="headerlink" title="输入输出专题"></a>输入输出专题</h2><h3 id="控制小数点后精度位数及补齐整数位数"><a href="#控制小数点后精度位数及补齐整数位数" class="headerlink" title="控制小数点后精度位数及补齐整数位数"></a>控制小数点后精度位数及补齐整数位数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n=<span class="number">9</span>;</span><br><span class="line">  <span class="keyword">double</span> pi=<span class="number">3.1415926</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%02d\n"</span>,n); <span class="comment">//保存两位然后补齐,输出09</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"0.3f\n"</span>,pi); <span class="comment">//小数保留三位,输出3.142</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="scanf输入规则"><a href="#scanf输入规则" class="headerlink" title="scanf输入规则"></a>scanf输入规则</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输入字符</span></span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;c);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入字符串</span></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">26</span>],b[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,a,&amp;b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//不同整型输出</span></span><br><span class="line">    short a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">long</span> c = <span class="number">9437</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a=%hd, b=%d, c=%ld\n"</span>, a, b, c);</span><br><span class="line">    </span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str1[<span class="number">10</span>], str2[<span class="number">10</span>], str3[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入字符串："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%s%s"</span>, str1, str2, str3);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输出结果：%s %s %s\n"</span>, str1, str2, str3);  <span class="comment">//%s间要加空格</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需要注意的是，前面讲“清空缓冲区”的时候讲过，用 scanf 输入时，不管输入什么，最后“敲”的回车都会被留在缓冲区，这里也不例外。输入字符串时最后“敲”的回车也会被留在缓冲区，如果紧接着要给一个字符变量赋值的话，那么还没等你输入系统就自动退出来了。因为系统自动将回车产生的字符 '\n' 赋给该字符变量了，所以此时对字符变量赋值前要首先清空缓冲区。</span></span><br></pre></td></tr></table></figure>
<h3 id="其他输入规则，getchar-cin-get-gets-如何终止循环输入跳出"><a href="#其他输入规则，getchar-cin-get-gets-如何终止循环输入跳出" class="headerlink" title="其他输入规则，getchar(),cin,get(),gets()如何终止循环输入跳出"></a>其他输入规则，getchar(),cin,get(),gets()如何终止循环输入跳出</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str)&#123;</span><br><span class="line">  <span class="keyword">char</span> ch=getchar();</span><br><span class="line">  <span class="keyword">if</span>(ch==<span class="string">'\n'</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//另一种强悍输入，每一次可以读两个东西</span></span><br><span class="line"><span class="keyword">while</span>((<span class="built_in">cin</span>&gt;&gt;<span class="keyword">word</span>).<span class="built_in">get</span>(c)&amp;&amp;flag)&#123;</span><br><span class="line">  <span class="keyword">if</span>(c==<span class="string">'\n'</span>)&#123;</span><br><span class="line">    flag==<span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">word</span>.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            count[<span class="built_in">tolower</span>(<span class="keyword">word</span>[i])]++;      <span class="comment">//将字符全部转换为小写，并以ascii值为下标，数组值为出现次数计数</span></span><br><span class="line">        &#125;</span><br><span class="line">        words.push_back(<span class="keyword">word</span>);</span><br><span class="line">        <span class="keyword">if</span> (!flag)                          <span class="comment">//判断回车</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">第一：要注意不同的函数是否接受空格符、是否舍弃最后的回车符的问题!</span><br><span class="line">读取字符时：</span><br><span class="line"><span class="built_in">scanf</span>()以Space、Enter、Tab结束一次输入，不会舍弃最后的回车符（即回车符会残留在缓冲区中）；</span><br><span class="line">getchar()以Enter结束输入，也不会舍弃最后的回车符；</span><br><span class="line">回车本身也是一个字符，getchar得到的是键盘流字符，须要清除一下键盘缓冲区：如用fflush(<span class="built_in">stdin</span>); rewind(<span class="built_in">stdin</span>);等</span><br><span class="line">读取字符串时：</span><br><span class="line"><span class="built_in">scanf</span>()以Space、Enter、Tab结束一次输入</span><br><span class="line">gets()以Enter结束输入（空格不结束），接受空格，会舍弃最后的回车符！</span><br><span class="line"></span><br><span class="line">第二：为了避免出现上述问题，必须要清空缓冲区的残留数据，可以用以下的方法解决：</span><br><span class="line">方法<span class="number">1</span>：C语言里提供了函数清空缓冲区，只要在读数据之前先清空缓冲区就没问题了！</span><br><span class="line">       这个函数是fflush(<span class="built_in">stdin</span>)。</span><br><span class="line">方法<span class="number">2</span>：自己取出缓冲区里的残留数据。</span><br><span class="line">（说实话这个语句我也没看懂，呵呵！为什么格式控制是这样的！希望高手指点一下！）</span><br><span class="line">       <span class="built_in">scanf</span>(<span class="string">"%[^\n]"</span>,<span class="built_in">string</span>);</span><br><span class="line">       </span><br><span class="line"> <span class="comment">//getchar()的正确使用方式</span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ch;</span><br><span class="line">    <span class="keyword">int</span> line_no = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>((ch = getchar()) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d--"</span>, line_no);</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(ch);</span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">'\n'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            line_no++;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getchar：<span class="function"><span class="keyword">int</span> <span class="title">getchar</span><span class="params">(<span class="keyword">void</span>)</span></span>;从标准输入流（<span class="built_in">stdin</span>，通常是键盘）中读取一个字符。</span><br><span class="line">函数声明在头文件&lt;stdio.h&gt;中。 getc：</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getc</span><span class="params">(FILE *stream)</span></span>;</span><br><span class="line">从文件流中读取一个字符。</span><br><span class="line">函数声明在头文件&lt;stdio.h&gt;中。 fgetc：</span><br><span class="line">与 getc 完全相同，从文件中读取一个字符。</span><br><span class="line">  </span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) 是从标准输入读入一个整数赋值给n，并且返回值是读入的值。</span><br><span class="line"><span class="keyword">while</span>( <span class="built_in">scanf</span>(..) != EOF ) 就是一直从读取数据，直到读到一个EOF标记为止</span><br><span class="line">EOF 是 <span class="built_in">end</span> of <span class="built_in">line</span>的意思，也就是行结束标识</span><br><span class="line">  getline(<span class="built_in">cin</span>,str)输入一行<span class="comment">//gets也是一行，但是需要char arr[100]型</span></span><br><span class="line">      <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">while</span>(getline(<span class="built_in">cin</span>,str))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">islower</span>(str[<span class="number">0</span>])) str[<span class="number">0</span>]=<span class="built_in">toupper</span>(str[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;str.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((str[i]==<span class="string">' '</span>&amp;&amp;<span class="built_in">isalpha</span>(str[i+<span class="number">1</span>]))||(str[i]==<span class="string">'\t'</span>&amp;&amp;<span class="built_in">isalpha</span>(str[i+<span class="number">1</span>]))||(str[i]==<span class="string">'\r'</span>&amp;&amp;<span class="built_in">isalpha</span>(str[i+<span class="number">1</span>]))||(str[i]==<span class="string">'\n'</span>&amp;&amp;<span class="built_in">isalpha</span>(str[i+<span class="number">1</span>])))&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">islower</span>(str[i+<span class="number">1</span>])) str[i+<span class="number">1</span>]=<span class="built_in">toupper</span>(str[i+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;str&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span>.<span class="built_in">get</span>()该函数有三种格式：无参，一参数，二参数即<span class="built_in">cin</span>.<span class="built_in">get</span>(),<span class="built_in">cin</span>.<span class="built_in">get</span>(<span class="keyword">char</span> ch), <span class="built_in">cin</span>.<span class="built_in">get</span>(array_name, Arsize) 读取字符的情况：输入结束条件：Enter键对结束符处理：不丢弃缓冲区中的Entercin.<span class="built_in">get</span>() 与 <span class="built_in">cin</span>.<span class="built_in">get</span>(<span class="keyword">char</span> ch)用于读取字符，他们的使用是相似的，即：ch=<span class="built_in">cin</span>.<span class="built_in">get</span>() 与 <span class="built_in">cin</span>.<span class="built_in">get</span>(ch)是等价的。</span><br></pre></td></tr></table></figure>
<h3 id="sstream输入流"><a href="#sstream输入流" class="headerlink" title="sstream输入流"></a>sstream输入流</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(getline(<span class="built_in">cin</span>,str))&#123;</span><br><span class="line">        <span class="built_in">string</span> word1;</span><br><span class="line">        <span class="built_in">string</span> word2;</span><br><span class="line">      <span class="comment">//隔行的还是选择行读好了，使用cin有风险，不用置零，清一下vec即可</span></span><br><span class="line">        getline(<span class="built_in">cin</span>,word1);</span><br><span class="line">        getline(<span class="built_in">cin</span>,word2);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//输入流输入范例</span></span><br><span class="line">        <span class="built_in">string</span> buf;</span><br><span class="line">        <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(str)</span></span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vec;</span><br><span class="line">        <span class="keyword">while</span>(ss&gt;&gt;buf) vec.push_back(buf);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it=vec.<span class="built_in">begin</span>();it!=vec.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(*it==word1) *it=word2;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        vec.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//int型转string型变得这么简单</span></span><br><span class="line"><span class="built_in">stringstream</span> sstream;</span><br><span class="line">    <span class="built_in">string</span> strResult;</span><br><span class="line">    <span class="keyword">int</span> nValue = <span class="number">1000</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 将int类型的值放入输入流中</span></span><br><span class="line">    sstream &lt;&lt; nValue;</span><br><span class="line">    <span class="comment">// 从sstream中抽取前面插入的int类型的值，赋给string类型</span></span><br><span class="line">    sstream &gt;&gt; strResult;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"[cout]strResult is: "</span> &lt;&lt; strResult &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[printf]strResult is: %s\n"</span>, strResult.c_str());</span><br><span class="line"><span class="comment">//string型转int型</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">str_to_int</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;string_temp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="function"><span class="built_in">stringstream</span> <span class="title">stream</span><span class="params">(string_temp)</span></span>;</span><br><span class="line">    stream&gt;&gt;temp;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="sstream输入排序实例istringstream"><a href="#sstream输入排序实例istringstream" class="headerlink" title="sstream输入排序实例istringstream"></a>sstream输入排序实例istringstream</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    考察字符串的划分和排序</span></span><br><span class="line"><span class="comment">    我用的是istringstream 对读入的字符串进行划分,但是时间会比sscanf慢</span></span><br><span class="line"><span class="comment">    毕竟io还是c快的多</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Log</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> s; <span class="comment">// 保存原本的数据</span></span><br><span class="line">    <span class="built_in">string</span> name; <span class="comment">// 名字</span></span><br><span class="line">    <span class="keyword">double</span> time; <span class="comment">// 记录时间</span></span><br><span class="line">&#125;logs[<span class="number">10000</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Log a,Log b)</span></span>&#123; <span class="comment">// 排序函数</span></span><br><span class="line">    <span class="keyword">if</span>(a.time == b.time) <span class="keyword">return</span> a.name&lt;b.name;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.time&lt;b.time;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(getline(<span class="built_in">cin</span>,logs[i].s))&#123; <span class="comment">// 读入一行</span></span><br><span class="line">        <span class="function"><span class="built_in">istringstream</span> <span class="title">is</span><span class="params">(logs[i].s)</span></span>; <span class="comment">// 绑定s，对读入的数据进行划分</span></span><br><span class="line">        <span class="built_in">string</span> str1,str2,str3;</span><br><span class="line">        <span class="comment">//hs_10000_p   2007-01-17 19:22:53,315     253.035(s)</span></span><br><span class="line">        is&gt;&gt;str1&gt;&gt;str2&gt;&gt;str3&gt;&gt;logs[i].time;</span><br><span class="line">        logs[i].name = str2+str3;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(logs,logs+i,cmp); <span class="comment">// 排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;logs[j].s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="sscanf输入实例"><a href="#sscanf输入实例" class="headerlink" title="sscanf输入实例"></a>sscanf输入实例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Message</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> raw[<span class="number">101</span>];</span><br><span class="line">    <span class="keyword">char</span> task[<span class="number">21</span>];</span><br><span class="line">    <span class="keyword">int</span> year, month, day;</span><br><span class="line">    <span class="keyword">int</span> hour, minute, second, msecond;</span><br><span class="line">    <span class="keyword">int</span> timeSecond, timeMsecond;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Message&amp; b) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(timeSecond != b.timeSecond) <span class="keyword">return</span> timeSecond &lt; b.timeSecond;</span><br><span class="line">        <span class="keyword">if</span>(timeMsecond != b.timeMsecond) <span class="keyword">return</span> timeMsecond &lt; b.timeMsecond;</span><br><span class="line">        <span class="keyword">if</span>(year != b.year) <span class="keyword">return</span> year &lt; b.year;</span><br><span class="line">        <span class="keyword">if</span>(month != b.month) <span class="keyword">return</span> month &lt; b.month;</span><br><span class="line">        <span class="keyword">if</span>(day != b.day) <span class="keyword">return</span> day &lt; b.day;</span><br><span class="line">        <span class="keyword">if</span>(hour != b.hour) <span class="keyword">return</span> hour &lt; b.hour;</span><br><span class="line">        <span class="keyword">if</span>(minute != b.minute) <span class="keyword">return</span> minute &lt; b.minute;</span><br><span class="line">        <span class="keyword">if</span>(second != b.second) <span class="keyword">return</span> second &lt; b.second;</span><br><span class="line">        <span class="keyword">return</span> msecond &lt; b.msecond;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; message[<span class="number">10000</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(gets(message[cnt].raw)) &#123;</span><br><span class="line">        <span class="built_in">sscanf</span>(message[cnt].raw, <span class="string">"%s %d-%d-%d %d:%d:%d,%d %d.%d"</span>,   </span><br><span class="line">               message[cnt].task, &amp;message[cnt].year, &amp;message[cnt].month,</span><br><span class="line">               &amp;message[cnt].day, &amp;message[cnt].hour, &amp;message[cnt].minute,</span><br><span class="line">               &amp;message[cnt].second, &amp;message[cnt].msecond, &amp;message[cnt].timeSecond, &amp;message[cnt].timeMsecond);</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(message, message+cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, message[i].raw);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//打开文件，清空内容，重新写入，ofstream::out指示以写模式打开</span></span><br><span class="line">  <span class="function">ofstream <span class="title">out1</span><span class="params">(<span class="string">"D\\abc.txt"</span>,ofstream::out)</span></span>;</span><br><span class="line">  <span class="built_in">string</span> s;</span><br><span class="line">  <span class="keyword">while</span>(getline(<span class="built_in">cin</span>,s))&#123;</span><br><span class="line">    out1&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  out1.<span class="built_in">close</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//打开文件，向文件追加内容</span></span><br><span class="line">  <span class="comment">//ofstream::out指示以写模式打开，ofstream::app指示写操作前定位到文件末尾</span></span><br><span class="line">  <span class="function">ofstream <span class="title">out2</span><span class="params">(<span class="string">"D:\\abc.txt"</span>,ofstream::out|ofstream::app)</span></span>;</span><br><span class="line">  <span class="keyword">while</span>(getline(<span class="built_in">cin</span>,s))&#123;</span><br><span class="line">    out2&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  out2.<span class="built_in">close</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//读取文件</span></span><br><span class="line">  <span class="function">ifstream <span class="title">in</span><span class="params">(<span class="string">"D:\\abc.txt"</span>)</span></span>;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vecs;</span><br><span class="line">  <span class="keyword">while</span>(getline(in,s))&#123;</span><br><span class="line">    vecs.push_back(s);</span><br><span class="line">  &#125;</span><br><span class="line">  in.<span class="built_in">close</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入输出流配合操作</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; inputArr;</span><br><span class="line">    <span class="built_in">string</span> inStr;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;inStr)&#123;</span><br><span class="line">        inputArr.push_back(inStr);</span><br><span class="line">        <span class="keyword">char</span> ch=getchar();</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'\n'</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> len=inputArr.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">ofstream <span class="title">out1</span><span class="params">(inputArr[len<span class="number">-1</span>].c_str(),ofstream::out|ofstream::app)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="function">ifstream <span class="title">in</span><span class="params">(inputArr[i].c_str())</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="keyword">while</span>(getline(in,s))&#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="comment">//直接从文件里进文件里出</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//终于领会到了cout,cin流的精髓</span></span><br><span class="line">            out1&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        in.<span class="built_in">close</span>();</span><br><span class="line">        out1.<span class="built_in">close</span>();</span><br><span class="line">        <span class="comment">//app定位到文件末尾，追加内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">string</span> <span class="keyword">String</span>;</span><br><span class="line"><span class="comment">//还有一种用法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loadDirect</span><span class="params">(<span class="keyword">const</span> <span class="keyword">String</span>&amp; filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::ifstream fp;</span><br><span class="line">    fp.<span class="built_in">open</span>(filename.c_str(), <span class="built_in">std</span>::ios::in | <span class="built_in">std</span>::ios::binary);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;fp.rdbuf();</span><br><span class="line">    fp.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">if</span>(!fp.bad())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"打开 失败。"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fstream f;  </span><br><span class="line">f.<span class="built_in">open</span>(<span class="string">"1.txt"</span>, ios::in | ios::binary);  </span><br><span class="line"><span class="keyword">if</span> (!f.is_open()) <span class="comment">// 检查文件是否成功打开  </span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"cannot open file."</span> &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">ios::in与ios::bianry均为<span class="keyword">int</span>型，定义文件打开的方式。  </span><br><span class="line">ios::in -- 打开文件用于读。  </span><br><span class="line">ios::out -- 打开文件用于写，如果文件不存在，则新建一个；存在则清空其内容。  </span><br><span class="line">ios::binary -- 以二进制<span class="built_in">bit</span>流方式进行读写，默认是ios::<span class="built_in">text</span>，但最好指定这种读写方式，即使要读写的是文本。因为在ios::<span class="built_in">text</span>模式下，在写入时’\ n’字符将转换成两个字符：回车+换行（HEX: <span class="number">0</span>D <span class="number">0</span>A) 写入，读入时作逆转换，这容易引起不必要的麻烦。ios::app -- 打开文件在文件尾进行写入，即使使用了seekp改变了写入位置，仍将在文件尾写入。  </span><br><span class="line">ios::ate -- 打开文件在文件尾进行写入，但seekp有效。  </span><br><span class="line">读写位置的改变  </span><br><span class="line">f.seekg(<span class="number">0</span>, ios::beg); <span class="comment">// 改变读入位置 g mean Get  </span></span><br><span class="line">f.seekp(<span class="number">0</span>, ios::<span class="built_in">end</span>); <span class="comment">// 改变写入位置 p mean Put  </span></span><br><span class="line">第一个参数是偏移量offset(<span class="keyword">long</span>)，第二个参数是offset相对的位置，三个值：  </span><br><span class="line">ios::beg -- 文件头    ios::<span class="built_in">end</span> -- 文件尾    ios::cur -- 当前位置</span><br></pre></td></tr></table></figure>
<h2 id="strlen和sizeof区别"><a href="#strlen和sizeof区别" class="headerlink" title="strlen和sizeof区别"></a>strlen和sizeof区别</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//c语言没有字符串，用的是字符串数组来模拟字符串，c风格字符串数组再末尾加0表示结尾</span></span><br><span class="line"><span class="comment">//strlen不加结束标志表示字符串长度，sizeof求得是字符串在内存中的长度</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[]=<span class="string">"abcd"</span>;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"sizeof(buf) = %d\n"</span>,<span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"strlen(buf) = %d\n"</span>,<span class="built_in">strlen</span>(buf));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果</span><br><span class="line"><span class="keyword">sizeof</span>(buf) = <span class="number">5</span></span><br><span class="line"><span class="built_in">strlen</span>(buf) = <span class="number">4</span></span><br></pre></td></tr></table></figure>
<h2 id="short-int-long区别"><a href="#short-int-long区别" class="headerlink" title="short ,int,long区别"></a>short ,int,long区别</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="number">16</span>位编译器</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> ：<span class="number">1</span>个字节  </span><br><span class="line"><span class="keyword">char</span>*(即指针变量): <span class="number">2</span>个字节</span><br><span class="line">short <span class="keyword">int</span> : <span class="number">2</span>个字节</span><br><span class="line"><span class="keyword">int</span>： <span class="number">2</span>个字节</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> : <span class="number">2</span>个字节</span><br><span class="line"><span class="keyword">float</span>: <span class="number">4</span>个字节</span><br><span class="line"><span class="keyword">double</span>: <span class="number">8</span>个字节</span><br><span class="line"><span class="keyword">long</span>: <span class="number">4</span>个字节</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span>: <span class="number">8</span>个字节</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>: <span class="number">4</span>个字节</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、<span class="number">32</span>位编译器</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> ：<span class="number">1</span>个字节</span><br><span class="line"><span class="keyword">char</span>*: <span class="number">4</span>个字节    </span><br><span class="line">short    <span class="keyword">int</span> : <span class="number">2</span>个字节</span><br><span class="line"><span class="keyword">int</span>： <span class="number">4</span>个字节</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> : <span class="number">4</span>个字节</span><br><span class="line"><span class="keyword">float</span>: <span class="number">4</span>个字节</span><br><span class="line"><span class="keyword">double</span>: <span class="number">8</span>个字节</span><br><span class="line"><span class="keyword">long</span>: <span class="number">4</span>个字节</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span>: <span class="number">8</span>个字节</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>: <span class="number">4</span>个字节</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">	<span class="keyword">int</span> n_int=INT_MAX;</span><br><span class="line">	short n_short=SHRT_MAX;</span><br><span class="line">	<span class="keyword">long</span> n_long=LONG_MAX;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> n_llong=LLONG_MAX;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"int is "</span>&lt;&lt;<span class="keyword">sizeof</span>(<span class="keyword">int</span>)&lt;&lt;<span class="string">" bytes."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"short is "</span>&lt;&lt;<span class="keyword">sizeof</span> n_short&lt;&lt;<span class="string">" bytes."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"long is "</span>&lt;&lt;<span class="keyword">sizeof</span> n_long&lt;&lt;<span class="string">" bytes."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"long long is "</span>&lt;&lt;<span class="keyword">sizeof</span> n_llong&lt;&lt;<span class="string">" bytes."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"Maximum values:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"int: "</span>&lt;&lt;n_int&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"short: "</span>&lt;&lt;n_short&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"long: "</span>&lt;&lt;n_long&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"long long: "</span>&lt;&lt;n_llong&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"Minimum int value="</span>&lt;&lt;INT_MIN&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"Bits per byte= "</span>&lt;&lt;CHAR_BIT&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果</span><br><span class="line"><span class="keyword">int</span> is <span class="number">4</span> bytes.(<span class="number">32</span>位) <span class="number">10</span>^<span class="number">9</span>大小</span><br><span class="line">short is <span class="number">2</span> bytes.</span><br><span class="line"><span class="keyword">long</span> is <span class="number">4</span> bytes. <span class="number">2</span>^<span class="number">32</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> is <span class="number">8</span> bytes. <span class="number">2</span>^<span class="number">64</span></span><br><span class="line"></span><br><span class="line">Maximum values:</span><br><span class="line"><span class="keyword">int</span>: <span class="number">2147483647</span></span><br><span class="line">short: <span class="number">32767</span>  <span class="comment">//10^5</span></span><br><span class="line"><span class="keyword">long</span>: <span class="number">2147483647</span>  <span class="comment">//10^10</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span>: <span class="number">9223372036854775807</span>  <span class="comment">//10^19</span></span><br><span class="line"></span><br><span class="line">Minimum <span class="keyword">int</span> value=<span class="number">-2147483648</span></span><br><span class="line">Bits per <span class="keyword">byte</span>= <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Process</span> returned <span class="number">0</span> (<span class="number">0x0</span>)   execution time : <span class="number">1.937</span> s</span><br><span class="line">Press any key to <span class="keyword">continue</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment">//这说明，再有符号计算中第一位是0或1表示政府</span></span><br><span class="line">类型名称          字节数      取值范围</span><br><span class="line"><span class="keyword">signed</span> <span class="keyword">char</span>        <span class="number">1</span>         <span class="number">-2</span>^<span class="number">7</span> ~ <span class="number">2</span>^<span class="number">7</span><span class="number">-1</span>    <span class="number">-128</span>～+<span class="number">127</span></span><br><span class="line"> </span><br><span class="line">short <span class="keyword">int</span>          <span class="number">2</span>         <span class="number">-2</span>^<span class="number">14</span> ~ <span class="number">2</span>^<span class="number">14</span><span class="number">-1</span>  <span class="number">-32768</span>～+<span class="number">32767</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>                <span class="number">4</span>         <span class="number">-2</span>^<span class="number">31</span> ~ <span class="number">2</span>^<span class="number">31</span><span class="number">-1</span>  <span class="number">-2147483648</span>～+<span class="number">2147483647</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>       <span class="number">4</span>         <span class="number">0</span> ~ <span class="number">2</span>^<span class="number">32</span><span class="number">-1</span>      <span class="number">0</span> ~ <span class="number">4294967295</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">long</span> <span class="keyword">int</span>           <span class="number">4</span>         <span class="number">-2</span>^<span class="number">31</span> ~ <span class="number">2</span>^<span class="number">31</span><span class="number">-1</span>  <span class="number">-2147483648</span>～+<span class="number">2141483647</span>   （同<span class="keyword">int</span>）<span class="comment">//soga</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>      <span class="number">4</span>         <span class="number">0</span> ~ <span class="number">2</span>^<span class="number">32</span><span class="number">-1</span>      <span class="number">0</span>～<span class="number">4294967295</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>      <span class="number">8</span>         <span class="number">-2</span>^<span class="number">63</span> ~ <span class="number">2</span>^<span class="number">63</span><span class="number">-1</span>  <span class="number">-9223372036854775808</span>～+<span class="number">9223372036854775807</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="number">8</span>         <span class="number">0</span> ~ <span class="number">2</span>^<span class="number">64</span><span class="number">-1</span>      <span class="number">18446744073709551615</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">__int64的最大值：<span class="number">9223372036854775807</span></span><br><span class="line">__int64的最小值：<span class="number">-9223372036854775808</span></span><br><span class="line"><span class="keyword">unsigned</span> __int64的最大值：<span class="number">18446744073709551615</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//无符号区别</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> ulA = <span class="number">0x70000000</span>; <span class="comment">// 数值范围不大</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> ulB = <span class="number">0x80000000</span>; <span class="comment">// 数值范围大</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> ulC = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lu 0x%x %ld\n"</span>,ulA,ulA,ulA);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lu 0x%x %ld\n"</span>,ulB,ulB,ulB);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lu 0x%x %ld\n"</span>,ulC,ulC,ulC);</span><br></pre></td></tr></table></figure>
<h2 id="transform函数应用大小写转换"><a href="#transform函数应用大小写转换" class="headerlink" title="transform函数应用大小写转换"></a>transform函数应用大小写转换</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">unary <span class="title">operation</span><span class="params">(<span class="number">1</span>)</span>	</span></span><br><span class="line">template &lt;class InputIterator, class OutputIterator, class UnaryOperation&gt;</span><br><span class="line">  <span class="function">OutputIterator <span class="title">transform</span> <span class="params">(InputIterator first1, InputIterator last1,</span></span></span><br><span class="line"><span class="function"><span class="params">                            OutputIterator result, UnaryOperation op)</span></span>;</span><br><span class="line"><span class="function">binary <span class="title">operation</span><span class="params">(<span class="number">2</span>)</span>	</span></span><br><span class="line">template &lt;class InputIterator1, class InputIterator2,</span><br><span class="line">          <span class="class"><span class="keyword">class</span> <span class="title">OutputIterator</span>, <span class="title">class</span> <span class="title">BinaryOperation</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">OutputIterator</span> <span class="title">transform</span> (<span class="title">InputIterator1</span> <span class="title">first1</span>, <span class="title">InputIterator1</span> <span class="title">last1</span>,</span></span><br><span class="line"><span class="class">                            <span class="title">InputIterator2</span> <span class="title">first2</span>, <span class="title">OutputIterator</span> <span class="title">result</span>,</span></span><br><span class="line"><span class="class">                            <span class="title">BinaryOperation</span> <span class="title">binary_op</span>);</span></span><br><span class="line">(<span class="number">1</span>) unary operation</span><br><span class="line">Applies op to each of the elements in the range [first1,last1) <span class="keyword">and</span> stores the value returned by each operation in the range that begins at result.</span><br><span class="line">(<span class="number">2</span>) binary operation</span><br><span class="line">Calls binary_op <span class="keyword">using</span> each of the elements in the range [first1,last1) as first argument, <span class="keyword">and</span> the respective argument in the range that begins at first2 as second argument. The value returned by each call is stored in the range that begins at result.</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>, <span class="title">class</span> <span class="title">OutputIterator</span>, <span class="title">class</span> <span class="title">UnaryOperator</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">OutputIterator</span> <span class="title">transform</span> (<span class="title">InputIterator</span> <span class="title">first1</span>, <span class="title">InputIterator</span> <span class="title">last1</span>,</span></span><br><span class="line"><span class="class">                            <span class="title">OutputIterator</span> <span class="title">result</span>, <span class="title">UnaryOperator</span> <span class="title">op</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">while</span> (first1 != last1) &#123;</span><br><span class="line">    *result = op(*first1);  <span class="comment">// or: *result=binary_op(*first1,*first2++);</span></span><br><span class="line">    ++result; ++first1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"> first1, last1</span><br><span class="line">Input iterators to the initial <span class="keyword">and</span> <span class="keyword">final</span> positions of the first sequence. The range used is [first1,last1), which contains all the elements between first1 <span class="keyword">and</span> last1, including the element pointed to by first1 but <span class="keyword">not</span> the element pointed to by last1.</span><br><span class="line">first2</span><br><span class="line">Input iterator to the initial <span class="built_in">position</span> of the second range. The range includes as many elements as [first1,last1).</span><br><span class="line">result</span><br><span class="line">Output iterator to the initial <span class="built_in">position</span> of the range where the operation results are stored. The range includes as many elements as [first1,last1).</span><br><span class="line">op</span><br><span class="line">Unary function that accepts one element of the type pointed to by InputIterator 一元函数，接受InputIterator所指类型的一个元素作为参数，并返回一些可转换为OutputIterator所指类型的结果值。这可以是函数指针，也可以是函数对象。</span><br><span class="line">binary_op</span><br><span class="line">二元函数，接受两个元素作为参数（两个序列中的一个），并返回一些可转换为OutputIterator所指类型的结果值。这可以是函数指针，也可以是函数对象。</span><br><span class="line">                                                                                   <span class="comment">// transform algorithm example</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;     // std::cout</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;    // std::transform</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;       // std::vector</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;   // std::plus</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">op_increase</span> <span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; <span class="keyword">return</span> ++i; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; foo;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; bar;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set some values:</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">6</span>; i++)</span><br><span class="line">    foo.push_back (i*<span class="number">10</span>);                         <span class="comment">// foo: 10 20 30 40 50</span></span><br><span class="line"></span><br><span class="line">  bar.resize(foo.<span class="built_in">size</span>());                         <span class="comment">// allocate space</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::transform (foo.<span class="built_in">begin</span>(), foo.<span class="built_in">end</span>(), bar.<span class="built_in">begin</span>(), op_increase);</span><br><span class="line">                                                  <span class="comment">// bar: 11 21 31 41 51</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// std::plus adds together its two arguments:</span></span><br><span class="line">  <span class="built_in">std</span>::transform (foo.<span class="built_in">begin</span>(), foo.<span class="built_in">end</span>(), bar.<span class="built_in">begin</span>(), foo.<span class="built_in">begin</span>(), <span class="built_in">std</span>::plus&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">                                                  <span class="comment">// foo: 21 41 61 81 101</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"foo contains:"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it=foo.<span class="built_in">begin</span>(); it!=foo.<span class="built_in">end</span>(); ++it)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; *it;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;           </span><br><span class="line">                                                                                    foo contains: <span class="number">21</span> <span class="number">41</span> <span class="number">61</span> <span class="number">81</span> <span class="number">101</span></span><br></pre></td></tr></table></figure>
<h2 id="链表专题"><a href="#链表专题" class="headerlink" title="链表专题"></a>链表专题</h2><h3 id="链表增删改查"><a href="#链表增删改查" class="headerlink" title="链表增删改查"></a>链表增删改查</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">str_to_int</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;temp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp_int;</span><br><span class="line">    <span class="function"><span class="built_in">stringstream</span> <span class="title">stream</span><span class="params">(temp)</span></span>;</span><br><span class="line">    stream&gt;&gt;temp_int;</span><br><span class="line">    <span class="keyword">return</span> temp_int;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    node * next;  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(node * &amp;L,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L=<span class="keyword">new</span> node;</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> elem;</span><br><span class="line">    node * p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;elem);</span><br><span class="line">        p=<span class="keyword">new</span> node;</span><br><span class="line">        p-&gt;data=elem;</span><br><span class="line">        p-&gt;next=L-&gt;next;</span><br><span class="line">        L-&gt;next=p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(node * L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Link list is empty\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,p-&gt;data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,p-&gt;data);</span><br><span class="line">        &#125;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(node * &amp;L,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node * pre=L;</span><br><span class="line">    node * p=L-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"delete fail\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pre=p;</span><br><span class="line">        p=pre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"delete fail\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    pre-&gt;next=p-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"delete OK\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node * &amp;L,<span class="keyword">int</span> n,<span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *p=L;</span><br><span class="line">  <span class="comment">//每次都是要移入到插入位置的</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"insert fail\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    node * q;</span><br><span class="line">  <span class="comment">//关键是使用new方法</span></span><br><span class="line">    q=<span class="keyword">new</span> node;</span><br><span class="line">    q-&gt;data=e;</span><br><span class="line">    q-&gt;next=p-&gt;next;</span><br><span class="line">    p-&gt;next=q;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"insert OK\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(node * L,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *p=L;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"get fail\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,p-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        node * L;</span><br><span class="line">        create(L,n);</span><br><span class="line">        <span class="keyword">int</span> row;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;row);</span><br><span class="line">        <span class="built_in">string</span> temp;</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;row;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            getline(<span class="built_in">cin</span>,temp);</span><br><span class="line">            <span class="keyword">if</span>(temp[<span class="number">0</span>]==<span class="string">'s'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                show(L);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(temp[<span class="number">0</span>]==<span class="string">'d'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                temp.erase(<span class="number">0</span>,<span class="number">7</span>);</span><br><span class="line">                Delete(L,str_to_int(temp));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(temp[<span class="number">0</span>]==<span class="string">'g'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                temp.erase(<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">                <span class="built_in">get</span>(L,str_to_int(temp));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(temp[<span class="number">0</span>]==<span class="string">'i'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                temp.erase(<span class="number">0</span>,<span class="number">7</span>);</span><br><span class="line">                <span class="keyword">int</span> pos=temp.<span class="built_in">find</span>(<span class="string">' '</span>);</span><br><span class="line">                <span class="keyword">int</span> x=str_to_int(temp.substr(<span class="number">0</span>,pos));</span><br><span class="line">                temp.erase(<span class="number">0</span>,pos+<span class="number">1</span>);</span><br><span class="line">                insert(L,x,str_to_int(temp));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"error!"</span>&lt;&lt;temp&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="链表选择排序法-找到新节点排序位置再插入"><a href="#链表选择排序法-找到新节点排序位置再插入" class="headerlink" title="链表选择排序法+找到新节点排序位置再插入"></a>链表选择排序法+找到新节点排序位置再插入</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> sno;</span><br><span class="line">    <span class="keyword">int</span> grade;</span><br><span class="line">    Node *next;</span><br><span class="line">&#125;Node,*List;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(Node * &amp;L,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    L=<span class="keyword">new</span> Node;</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//空的头结点</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    Node *p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        p=<span class="keyword">new</span> Node;</span><br><span class="line">        p-&gt;sno=x;</span><br><span class="line">        p-&gt;grade=y;</span><br><span class="line">        <span class="comment">//头插法</span></span><br><span class="line">        p-&gt;next=L-&gt;next;</span><br><span class="line">        L-&gt;next=p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(Node *L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(L-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;L-&gt;next-&gt;sno&lt;&lt;<span class="string">" "</span>&lt;&lt;L-&gt;next-&gt;grade&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        L=L-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortL</span><span class="params">(Node *&amp;L)</span></span>&#123;</span><br><span class="line">    Node *p,*q,*small;</span><br><span class="line">    <span class="keyword">int</span> temp1,temp2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//选择排序，找出最小的，while已经不够用</span></span><br><span class="line">    <span class="keyword">for</span>(p=L-&gt;next;p-&gt;next!=<span class="literal">NULL</span>;p=p-&gt;next)&#123;</span><br><span class="line">        <span class="comment">//果然是将第一个值当做最小</span></span><br><span class="line">        small=p;</span><br><span class="line">        <span class="comment">//类似于i，j，指针（j）q向后寻找，最小值放在i（p）</span></span><br><span class="line">        <span class="keyword">for</span>(q=p-&gt;next;q!=<span class="literal">NULL</span>;q=q-&gt;next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(q-&gt;sno&lt;small-&gt;sno)&#123;</span><br><span class="line">                small=q;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(small!=p)&#123;</span><br><span class="line">        temp1=p-&gt;sno;</span><br><span class="line">        temp2=p-&gt;grade;</span><br><span class="line">        p-&gt;sno=small-&gt;sno;</span><br><span class="line">        p-&gt;grade=small-&gt;grade;</span><br><span class="line">        small-&gt;sno=temp1;</span><br><span class="line">        small-&gt;grade=temp2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表排序和合并</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">        Node *L1,*L2;</span><br><span class="line">        create(L1,n+m);</span><br><span class="line">        sortL(L1);</span><br><span class="line">        show(L1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">int</span> grade;</span><br><span class="line">    node * next;  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;m,&amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        node * L=<span class="keyword">new</span> node;</span><br><span class="line">        L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m+n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            node * temp=<span class="keyword">new</span> node;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;temp-&gt;number,&amp;temp-&gt;grade);</span><br><span class="line">            node * pre=L;</span><br><span class="line">            node * p=L-&gt;next;</span><br><span class="line">            <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(temp-&gt;number&lt;p-&gt;number)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    pre=p;</span><br><span class="line">                    p=p-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            temp-&gt;next=pre-&gt;next;</span><br><span class="line">            pre-&gt;next=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        node * p=L-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,p-&gt;number,p-&gt;grade);</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="单循环链表-合并"><a href="#单循环链表-合并" class="headerlink" title="单循环链表+合并"></a>单循环链表+合并</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    node * next;  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        node * L1=<span class="keyword">new</span> node;</span><br><span class="line">        L1-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        node * rear1=L1;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            node * temp=<span class="keyword">new</span> node;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp-&gt;data);</span><br><span class="line">            rear1-&gt;next=temp;</span><br><span class="line">            temp-&gt;next=L1;</span><br><span class="line">            rear1=rear1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        node * L2=<span class="keyword">new</span> node;</span><br><span class="line">        L2-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        node * rear2=L2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            node * temp=<span class="keyword">new</span> node;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp-&gt;data);</span><br><span class="line">            rear2-&gt;next=temp;</span><br><span class="line">            temp-&gt;next=L2;</span><br><span class="line">          <span class="comment">//直接找到尾部2</span></span><br><span class="line">            rear2=rear2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        rear1-&gt;next=L2-&gt;next;</span><br><span class="line">        rear2-&gt;next=L1;</span><br><span class="line">      <span class="comment">//delete释放L2结点</span></span><br><span class="line">        <span class="keyword">delete</span>(L2);</span><br><span class="line">        node * p=L1-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(p!=L1)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;next==L1)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,p-&gt;data);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>,p-&gt;data);</span><br><span class="line">            &#125;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    Node *next;</span><br><span class="line">&#125;Node,*List;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(Node * &amp;L,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    L=<span class="keyword">new</span> Node;</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//空的头结点</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    Node *p;</span><br><span class="line">    Node *q=L;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">        p=<span class="keyword">new</span> Node;</span><br><span class="line">        p-&gt;data=x;</span><br><span class="line">        <span class="comment">//尾插法</span></span><br><span class="line">        q-&gt;next=p;</span><br><span class="line">        q=q-&gt;next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    q-&gt;next=L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(Node *L,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;L-&gt;next-&gt;data&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        L=L-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeL</span><span class="params">(Node *&amp;L1,Node *L2,<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    Node *p=L1,*q=L2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) &#123;q=q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next=L2-&gt;next;</span><br><span class="line">    q-&gt;next=L1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//链表排序和合并</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        Node *L1,*L2;</span><br><span class="line">        create(L1,n);</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">        create(L2,m);</span><br><span class="line">        mergeL(L1,L2,n,m);</span><br><span class="line">        show(L1,n+m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="链表查找和交换"><a href="#链表查找和交换" class="headerlink" title="链表查找和交换"></a>链表查找和交换</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    Node *next;</span><br><span class="line">&#125;Node,*List;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(Node * &amp;L,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    L=<span class="keyword">new</span> Node;</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//空的头结点</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    Node *p;</span><br><span class="line">    Node *q=L;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">        p=<span class="keyword">new</span> Node;</span><br><span class="line">        p-&gt;data=x;</span><br><span class="line">        <span class="comment">//尾插法</span></span><br><span class="line">        q-&gt;next=p;</span><br><span class="line">        q=q-&gt;next;</span><br><span class="line">        q-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(Node *L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(L-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;L-&gt;next-&gt;data&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        L=L-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findL</span><span class="params">(Node *&amp;L,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    Node *pre=L;</span><br><span class="line">    Node *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;data&lt;x)&#123;</span><br><span class="line">        pre=p;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x==p-&gt;data)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        temp=p-&gt;data;</span><br><span class="line">        p-&gt;data=p-&gt;next-&gt;data;</span><br><span class="line">        p-&gt;next-&gt;data=temp;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        Node *s=<span class="keyword">new</span> Node;</span><br><span class="line">        s-&gt;data=x;</span><br><span class="line">        s-&gt;next=p;</span><br><span class="line">        pre-&gt;next=s;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"no"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表排序和合并</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">        Node *L1;</span><br><span class="line">        create(L1,m);</span><br><span class="line">        findL(L1,n);</span><br><span class="line">        show(L1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="链表如何删除最大值，排序，释放结点"><a href="#链表如何删除最大值，排序，释放结点" class="headerlink" title="链表如何删除最大值，排序，释放结点"></a>链表如何删除最大值，排序，释放结点</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    Node *next;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">InitialList</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Node *L;</span><br><span class="line">    L=(Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">createList</span><span class="params">(Node *List,<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">    Node *p=List;</span><br><span class="line">    Node *newNode;</span><br><span class="line">    newNode=(Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    newNode-&gt;data=data;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next)&#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next=newNode;</span><br><span class="line">    p=p-&gt;next;</span><br><span class="line">    p-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//老师忘记了返回</span></span><br><span class="line">    <span class="comment">//老师忘记了返回</span></span><br><span class="line">    <span class="keyword">return</span> List;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找出最大值，就应该是找到最大值的位置！！</span></span><br><span class="line"><span class="comment">//删除成功</span></span><br><span class="line"><span class="function">Node *<span class="title">Delete_max</span><span class="params">(Node *List)</span></span>&#123;</span><br><span class="line">    Node *q=List-&gt;next;</span><br><span class="line">    Node *pre=List;</span><br><span class="line">    Node *p=List-&gt;next;</span><br><span class="line">    <span class="keyword">int</span> maxL=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data&gt;maxL)&#123;</span><br><span class="line">            maxL=p-&gt;data;</span><br><span class="line">        &#125;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q-&gt;data!=maxL)&#123;</span><br><span class="line">        q=q-&gt;next;</span><br><span class="line">        pre=pre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如何删除</span></span><br><span class="line">    pre-&gt;next=q-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;maxL&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> List;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序不用交换结点，只需要交换数字,很重要！！</span></span><br><span class="line"><span class="function">Node *<span class="title">sort_List</span><span class="params">(Node *List)</span></span>&#123;</span><br><span class="line">    Node *p,*q,*small;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="comment">//终于搞好了for循环，主要是边界问题</span></span><br><span class="line">    <span class="keyword">for</span>(p=List-&gt;next;p-&gt;next!=<span class="literal">NULL</span>;p=p-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        small=p;</span><br><span class="line">        <span class="comment">//链表循环如何描写,循环边界的控制</span></span><br><span class="line">        <span class="keyword">for</span>(q=p-&gt;next;q!=<span class="literal">NULL</span>;q=q-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//选择交换法最适合链表。选择最小的和当前的交换</span></span><br><span class="line">            <span class="keyword">if</span>(q-&gt;data&lt;small-&gt;data)</span><br><span class="line">                small=q;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(small!=p)&#123;</span><br><span class="line">            temp=p-&gt;data;</span><br><span class="line">            p-&gt;data=small-&gt;data;</span><br><span class="line">            small-&gt;data=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> List;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Node *L;</span><br><span class="line">    L=InitialList();</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;x)&#123;</span><br><span class="line">        L=createList(L,x);</span><br><span class="line">        <span class="keyword">char</span> ch=getchar();</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'\n'</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//终于成功打印了，按照自己的理解</span></span><br><span class="line">    L=Delete_max(L);</span><br><span class="line">    L=sort_List(L);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(L-&gt;next)&#123;</span><br><span class="line">        Node *temp=L-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(L);</span><br><span class="line">        L=temp;</span><br><span class="line">    <span class="comment">//一开始十个空节点，之后才有值</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;L-&gt;data&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="循环链表删除结点"><a href="#循环链表删除结点" class="headerlink" title="循环链表删除结点"></a>循环链表删除结点</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkList <span class="title">createList</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> len)</span></span>&#123;<span class="comment">//创建单链表；</span></span><br><span class="line">	LinkList L,p,r;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">if</span>(len&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	L=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	L-&gt;data=a[<span class="number">0</span>];</span><br><span class="line">	p=L;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">		r=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">		r-&gt;data=a[i];</span><br><span class="line">		p-&gt;next=r;</span><br><span class="line">		p=r;</span><br><span class="line">	&#125;</span><br><span class="line">	p-&gt;next=<span class="literal">NULL</span>;<span class="comment">//表尾；</span></span><br><span class="line">	<span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkList <span class="title">changeList</span><span class="params">(LinkList L)</span></span>&#123;<span class="comment">//把单链表变成单循环链表；</span></span><br><span class="line">	LinkList p;</span><br><span class="line">	p=L;</span><br><span class="line">	<span class="keyword">while</span>(p-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">		p=p-&gt;next;<span class="comment">//p移至表尾；</span></span><br><span class="line">	&#125;</span><br><span class="line">	p-&gt;next=L;</span><br><span class="line">	<span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkList <span class="title">deleteLNode</span><span class="params">(LinkList L)</span></span>&#123;<span class="comment">//从链表中删除结点；</span></span><br><span class="line">	LinkList p,r;</span><br><span class="line">	<span class="keyword">int</span> count=<span class="number">1</span>;</span><br><span class="line">	p=L;</span><br><span class="line">	<span class="keyword">while</span>(count&lt;=<span class="number">16</span>)&#123;</span><br><span class="line">		r=p;<span class="comment">//r指向前驱；</span></span><br><span class="line">		p=p-&gt;next;<span class="comment">//p移至第17个结点；</span></span><br><span class="line">		count++;</span><br><span class="line">	&#125;</span><br><span class="line">	r-&gt;next=p-&gt;next;</span><br><span class="line">	<span class="built_in">free</span>(p);</span><br><span class="line">	<span class="keyword">return</span> r-&gt;next;<span class="comment">//新的头结点；</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(LinkList L)</span></span>&#123;<span class="comment">//输出单链表；</span></span><br><span class="line">	<span class="keyword">if</span>(L!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">		LinkList p;</span><br><span class="line">		p=L;</span><br><span class="line">		<span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d "</span>,p-&gt;data);</span><br><span class="line">			p=p-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">21</span>],i;</span><br><span class="line">	LinkList L,p;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">21</span>;i++)&#123;</span><br><span class="line">		a[i]=i+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	L=createList(a,<span class="number">21</span>);</span><br><span class="line">	L=changeList(L);</span><br><span class="line">	<span class="comment">//L=deleteLNode(L);</span></span><br><span class="line">	<span class="keyword">while</span>(L-&gt;next!=L)&#123;</span><br><span class="line">		L=deleteLNode(L);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"链表中最后剩下的结点是：%d\n"</span>,L-&gt;data);</span><br><span class="line">	<span class="comment">//display(L);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="链表中的排序操作，链表复制s-k-用法"><a href="#链表中的排序操作，链表复制s-k-用法" class="headerlink" title="链表中的排序操作，链表复制s[k]用法"></a>链表中的排序操作，链表复制s[k]用法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">78</span> <span class="number">90</span> <span class="number">56</span></span><br><span class="line"><span class="number">2</span> <span class="number">89</span> <span class="number">56</span> <span class="number">97</span></span><br><span class="line"><span class="number">3</span> <span class="number">78</span> <span class="number">97</span> <span class="number">95</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*输入学生信息：学号，三门课程的成绩，学号为0时结束，将其存储在链表A中，从中找出分数大于平均分的学生，并将该学生信息按平均分降序排列存入到链表B中，最后输出链表B*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span><span class="keyword">char</span> xuehao[<span class="number">20</span>];</span><br><span class="line"> <span class="keyword">int</span> chengji[<span class="number">3</span>];</span><br><span class="line"> <span class="keyword">float</span> av;</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;stud,*UerInfo;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  UerInfo ui;</span><br><span class="line">  ui=(UerInfo)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(stud));</span><br><span class="line">  <span class="comment">//多个指针指针用完位置变化了</span></span><br><span class="line">  UerInfo p=ui;</span><br><span class="line">  UerInfo q=ui;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"input students' information:\n"</span>);</span><br><span class="line">  <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"input 学号："</span>);</span><br><span class="line">     <span class="built_in">scanf</span>(<span class="string">"%s"</span>,ui-&gt;xuehao);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(ui-&gt;xuehao,<span class="string">"0"</span>)==<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"input 成绩："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;ui-&gt;chengji[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"input 成绩："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;ui-&gt;chengji[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"input 成绩："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;ui-&gt;chengji[<span class="number">2</span>]);</span><br><span class="line">    ui-&gt;av=((ui-&gt;chengji[<span class="number">0</span>]+ui-&gt;chengji[<span class="number">1</span>]+ui-&gt;chengji[<span class="number">2</span>])/<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//创建了新节点</span></span><br><span class="line">    <span class="comment">//创建了新节点</span></span><br><span class="line">    ui-&gt;next=(UerInfo)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(stud));</span><br><span class="line">    ui=ui-&gt;next;</span><br><span class="line">    cnt++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> chengji1=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> chengji2=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> chengji3=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (p&amp;&amp;<span class="built_in">strcmp</span>(p-&gt;xuehao,<span class="string">"0"</span>)!=<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">//三科成绩相加</span></span><br><span class="line">  chengji1+=p-&gt;chengji[<span class="number">0</span>];</span><br><span class="line">  chengji2+=p-&gt;chengji[<span class="number">1</span>];</span><br><span class="line">  chengji3+=p-&gt;chengji[<span class="number">2</span>];</span><br><span class="line">  p=p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">float</span> chengji1av=<span class="number">0.0</span>;</span><br><span class="line">  <span class="keyword">float</span> chengji2av=<span class="number">0.0</span>;</span><br><span class="line">  <span class="keyword">float</span> chengji3av=<span class="number">0.0</span>;</span><br><span class="line">  <span class="keyword">float</span> avfinal=<span class="number">0.0</span>;</span><br><span class="line">  <span class="keyword">if</span>(cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//算3可平均分和最终评分，平均分计算方法，各科平均数除以三科</span></span><br><span class="line">    chengji1av=(<span class="keyword">float</span>)chengji1/(<span class="keyword">float</span>)cnt;</span><br><span class="line">    chengji2av=(<span class="keyword">float</span>)chengji2/(<span class="keyword">float</span>)cnt;</span><br><span class="line">    chengji3av=(<span class="keyword">float</span>)chengji3/(<span class="keyword">float</span>)cnt;</span><br><span class="line">    avfinal=(chengji1av+chengji2av+chengji3av)/<span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"高于平均分的有：\n"</span>);</span><br><span class="line">  UerInfo s;</span><br><span class="line">  <span class="comment">//复制链表</span></span><br><span class="line">  s=(UerInfo)<span class="built_in">malloc</span>(cnt*<span class="keyword">sizeof</span>(stud));</span><br><span class="line">  <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (q&amp;&amp;<span class="built_in">strcmp</span>(q-&gt;xuehao,<span class="string">"0"</span>)!=<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">//如何借用s[k].复制链表</span></span><br><span class="line">     s[k].av=q-&gt;av;</span><br><span class="line">    s[k].chengji[<span class="number">0</span>]=q-&gt;chengji[<span class="number">0</span>];</span><br><span class="line">    s[k].chengji[<span class="number">1</span>]=q-&gt;chengji[<span class="number">1</span>];</span><br><span class="line">    s[k].chengji[<span class="number">2</span>]=q-&gt;chengji[<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(s[k].xuehao,q-&gt;xuehao);</span><br><span class="line">    k++;</span><br><span class="line">     <span class="keyword">if</span>(q-&gt;av&gt;avfinal)</span><br><span class="line">    &#123;</span><br><span class="line">     <span class="comment">//输出高于平均分的学生</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,q-&gt;xuehao);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f\n"</span>,q-&gt;av);</span><br><span class="line">    &#125;</span><br><span class="line">    q=q-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n降序排列如下：\n"</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//如何复制链表</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> l,m;</span><br><span class="line">    stud temps;</span><br><span class="line">    <span class="comment">//选择排序，每次选出最大的</span></span><br><span class="line">  <span class="keyword">for</span> (l=<span class="number">0</span>;l&lt;cnt<span class="number">-1</span>;l++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (m=l+<span class="number">1</span>;m&lt;cnt;m++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(s[l].av&lt;s[m].av)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//可怕的交换</span></span><br><span class="line">    temps.chengji[<span class="number">0</span>]=s[l].chengji[<span class="number">0</span>];</span><br><span class="line">    temps.chengji[<span class="number">1</span>]=s[l].chengji[<span class="number">1</span>];</span><br><span class="line">    temps.chengji[<span class="number">2</span>]=s[l].chengji[<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(temps.xuehao,s[l].xuehao);</span><br><span class="line">    s[l].chengji[<span class="number">0</span>]=s[m].chengji[<span class="number">0</span>];</span><br><span class="line">    s[l].chengji[<span class="number">1</span>]=s[m].chengji[<span class="number">1</span>];</span><br><span class="line">    s[l].chengji[<span class="number">2</span>]=s[m].chengji[<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(s[l].xuehao,s[m].xuehao);</span><br><span class="line">    s[m].chengji[<span class="number">0</span>]=temps.chengji[<span class="number">0</span>];</span><br><span class="line">    s[m].chengji[<span class="number">1</span>]=temps.chengji[<span class="number">1</span>];</span><br><span class="line">    s[m].chengji[<span class="number">2</span>]=temps.chengji[<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(s[m].xuehao,temps.xuehao);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"学号：%s\n"</span>,s[i].xuehao);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"成绩：%d\n"</span>,s[i].chengji[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"成绩：%d\n"</span>,s[i].chengji[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"成绩：%d\n"</span>,s[i].chengji[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="静态链表实现链表部分反转"><a href="#静态链表实现链表部分反转" class="headerlink" title="静态链表实现链表部分反转"></a>静态链表实现链表部分反转</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输入形式</span></span><br><span class="line"><span class="number">00100</span> <span class="number">6</span> <span class="number">4</span></span><br><span class="line"><span class="number">00000</span> <span class="number">4</span> <span class="number">99999</span></span><br><span class="line"><span class="number">00100</span> <span class="number">1</span> <span class="number">12309</span></span><br><span class="line"><span class="number">68237</span> <span class="number">6</span> <span class="number">-1</span></span><br><span class="line"><span class="number">33218</span> <span class="number">3</span> <span class="number">00000</span></span><br><span class="line"><span class="number">99999</span> <span class="number">5</span> <span class="number">68237</span></span><br><span class="line"><span class="number">12309</span> <span class="number">2</span> <span class="number">33218</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> address;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,first,K;</span><br><span class="line">    <span class="built_in">vector</span>&lt;node&gt; shunxu;</span><br><span class="line">    <span class="built_in">vector</span>&lt;node&gt; rev;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;first&gt;&gt;N&gt;&gt;K;</span><br><span class="line">    <span class="comment">//如何给结点组输入值</span></span><br><span class="line">    node temp;</span><br><span class="line">    node addr[<span class="number">100000</span>];</span><br><span class="line">    <span class="comment">//由于结点的下标是五位数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;temp.address&gt;&gt;temp.data&gt;&gt;temp.next;</span><br><span class="line">        addr[temp.address]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//first是头结点下标,接下来就是考虑怎样将分散结点联系起来</span></span><br><span class="line">    <span class="keyword">int</span> nextAdd=first;</span><br><span class="line">    <span class="keyword">while</span>(nextAdd!=<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="comment">//我傻了@@，存储起来就好</span></span><br><span class="line">        shunxu.push_back(addr[nextAdd]);</span><br><span class="line">        nextAdd=addr[nextAdd].next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=shunxu.<span class="built_in">size</span>(); <span class="comment">//输入结点可能有些不在链表中，记录下链表长度</span></span><br><span class="line">    <span class="keyword">int</span> tempInt=K<span class="number">-1</span>; <span class="comment">//翻转个数</span></span><br><span class="line">    <span class="keyword">while</span>(tempInt&lt;<span class="built_in">size</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=tempInt;i&gt;tempInt-K;i--)&#123;</span><br><span class="line">            rev.push_back(shunxu[i]);</span><br><span class="line">            <span class="comment">//反转链表，每次反转K个，不足K个反转并退出循环</span></span><br><span class="line">        &#125;</span><br><span class="line">        tempInt=tempInt+K;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=tempInt-K+<span class="number">1</span>;i&lt;<span class="built_in">size</span>;i++)&#123;</span><br><span class="line">        rev.push_back(shunxu[i]);</span><br><span class="line">        <span class="comment">//最后没有反转的复制</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">size</span><span class="number">-1</span>;i++)&#123;</span><br><span class="line">        rev[i].next=rev[i+<span class="number">1</span>].address;</span><br><span class="line">        <span class="comment">//如何修改next值，改为下一个元素的Address</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%05d %d %05d\n"</span>,rev[i].address,rev[i].data,rev[i].next);</span><br><span class="line">    &#125;<span class="comment">//最后一个结点的处理办法--单独~~</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%05d %d %d\n"</span>,rev[<span class="built_in">size</span><span class="number">-1</span>].address,rev[<span class="built_in">size</span><span class="number">-1</span>].data,<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="树专题"><a href="#树专题" class="headerlink" title="树专题"></a>树专题</h2><h3 id="静态创建新结点、构造二叉树实现前序中序遍历还原"><a href="#静态创建新结点、构造二叉树实现前序中序遍历还原" class="headerlink" title="静态创建新结点、构造二叉树实现前序中序遍历还原"></a>静态创建新结点、构造二叉树实现前序中序遍历还原</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//复原二叉树，。想出算法，</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//静态版，递归的边界条件和递归式由str1的s1,e1,str2的s2,e2联合确定，缩小开头和结尾划分子问题</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">    Node *rchild;</span><br><span class="line">    Node *lchild;</span><br><span class="line">&#125;Tree[<span class="number">50</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态如何创建新节点，就是loc游标移动</span></span><br><span class="line"><span class="keyword">int</span> loc;</span><br><span class="line"><span class="function">Node *<span class="title">create</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Tree[loc].lchild=Tree[loc].rchild=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//返回的是指针</span></span><br><span class="line">    <span class="keyword">return</span> &amp;Tree[loc++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> str1,str2;</span><br><span class="line"><span class="comment">//在函数当中就要用到，提前定义</span></span><br><span class="line"><span class="function">Node *<span class="title">build</span><span class="params">(<span class="keyword">int</span> s1,<span class="keyword">int</span> e1,<span class="keyword">int</span> s2,<span class="keyword">int</span> e2)</span></span>&#123;</span><br><span class="line">    <span class="comment">//直接每个都要创建新节点的！！我傻了</span></span><br><span class="line">    Node *ret=create();</span><br><span class="line">    ret-&gt;data=str1[s1];</span><br><span class="line">    <span class="keyword">int</span> rootIdx=str2.<span class="built_in">find</span>(str1[s1]);</span><br><span class="line">    <span class="comment">//找到根节点在str2中的位置</span></span><br><span class="line">    <span class="comment">//递归边界+递归式</span></span><br><span class="line">    <span class="keyword">if</span>(rootIdx!=s2)&#123;</span><br><span class="line">        <span class="comment">//左子树不为空</span></span><br><span class="line">        ret-&gt;lchild=build(s1+<span class="number">1</span>,s1+(rootIdx-s2),s2,rootIdx<span class="number">-1</span>);</span><br><span class="line">        <span class="comment">//边界的确定最难了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(rootIdx!=e2)&#123;</span><br><span class="line">        ret-&gt;rchild=build(s1+(rootIdx-s2)+<span class="number">1</span>,e1,rootIdx+<span class="number">1</span>,e2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//动态创建的办法，以及带出口边界的写法</span></span><br><span class="line"><span class="function">node * <span class="title">create</span><span class="params">(<span class="keyword">int</span> preL,<span class="keyword">int</span> preR,<span class="keyword">int</span> inL,<span class="keyword">int</span> inR)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(preL&gt;preR)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	node * p=<span class="keyword">new</span> node;</span><br><span class="line">	p-&gt;data=pre[preL];</span><br><span class="line">	<span class="keyword">int</span> k;</span><br><span class="line">	<span class="keyword">for</span>(k=inL;k&lt;inR;++k)</span><br><span class="line">		<span class="keyword">if</span>(in[k]==pre[preL])</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">int</span> numleft=k-inL;</span><br><span class="line">	p-&gt;lchild=create(preL+<span class="number">1</span>,preL+numleft,inL,k<span class="number">-1</span>);</span><br><span class="line">	p-&gt;rchild=create(preL+numleft+<span class="number">1</span>,preR,k+<span class="number">1</span>,inR);</span><br><span class="line">	<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(Node *r)</span></span>&#123;</span><br><span class="line">    <span class="comment">//遍历出口</span></span><br><span class="line">    <span class="keyword">if</span>(r==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    postOrder(r-&gt;lchild);</span><br><span class="line">    postOrder(r-&gt;rchild);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>,r-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str1&gt;&gt;str2)&#123;</span><br><span class="line">        Node *T;</span><br><span class="line">        <span class="keyword">int</span> e1=str1.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> e2=str2.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        T=build(<span class="number">0</span>,e1,<span class="number">0</span>,e2);</span><br><span class="line">        postOrder(T);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二叉排序树查找、插入、构造科学方法"><a href="#二叉排序树查找、插入、构造科学方法" class="headerlink" title="二叉排序树查找、插入、构造科学方法"></a>二叉排序树查找、插入、构造科学方法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span> <span class="number">6</span> <span class="number">5</span> <span class="number">7</span> <span class="number">10</span> <span class="number">8</span> <span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    node *rchild;</span><br><span class="line">    node *lchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建新结点还是要写一个，这样的话，才可以创建空结点，类似于链表知道到了链表尾部</span></span><br><span class="line"><span class="function">node *<span class="title">newNode</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    node *Node=<span class="keyword">new</span> node;</span><br><span class="line">    Node-&gt;data=x;</span><br><span class="line">    Node-&gt;rchild=Node-&gt;lchild=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> Node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如何构造二叉排序树</span></span><br><span class="line"><span class="comment">//有无到有，其实就是n次插入,而插入其实是查找的更进一步，找到空的位置！！</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insL</span><span class="params">(node *&amp;root,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//次数一定要加上引用，因为root结构发生了变化</span></span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">//定义出口，空结点的位置创建新点</span></span><br><span class="line">        root=newNode(x);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//原因在这里，相等时也可以插</span></span><br><span class="line"> <span class="comment">/*   if(x==root-&gt;data)&#123;</span></span><br><span class="line"><span class="comment">        return;</span></span><br><span class="line"><span class="comment">        //查找结点，如果发现这个结点被插入，就不用二次插入</span></span><br><span class="line"><span class="comment">    &#125;else if(x&lt;root-&gt;data)&#123;</span></span><br><span class="line"><span class="comment">        insL(root-&gt;lchild,x);</span></span><br><span class="line"><span class="comment">    &#125;else &#123;</span></span><br><span class="line"><span class="comment">        insL(root-&gt;rchild,x);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="keyword">if</span>(x&lt;root-&gt;data) insL(root-&gt;lchild,x);</span><br><span class="line">    <span class="keyword">else</span> insL(root-&gt;rchild,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数组参数如何处理</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//换成高级写法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(node *T,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    vi.push_back(T-&gt;data);</span><br><span class="line">    preOrder(T-&gt;lchild,vi);</span><br><span class="line">    preOrder(T-&gt;rchild,vi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(node *T,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    postOrder(T-&gt;lchild,vi);</span><br><span class="line">    postOrder(T-&gt;rchild,vi);</span><br><span class="line">    vi.push_back(T-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mirOrderPre</span><span class="params">(node *T,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    vi.push_back(T-&gt;data);</span><br><span class="line"></span><br><span class="line">    mirOrderPre(T-&gt;rchild,vi);</span><br><span class="line">    mirOrderPre(T-&gt;lchild,vi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mirOrderPost</span><span class="params">(node *T,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    mirOrderPost(T-&gt;rchild,vi);</span><br><span class="line">    mirOrderPost(T-&gt;lchild,vi);</span><br><span class="line">    vi.push_back(T-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; origin,pre,preM,post,postM;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line"></span><br><span class="line">        node *T=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">            origin.push_back(x);</span><br><span class="line">            <span class="comment">//循环插入即可</span></span><br><span class="line">            insL(T,x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        preOrder(T,pre);</span><br><span class="line">        postOrder(T,post);</span><br><span class="line">        mirOrderPre(T,preM);</span><br><span class="line">        mirOrderPost(T,postM);</span><br><span class="line">        <span class="comment">//容器vector可以直接相等！！！</span></span><br><span class="line">        <span class="keyword">if</span>(origin==pre)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;post.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;post[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(origin==preM)&#123;</span><br><span class="line">             <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;postM.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;postM[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二叉排序树建立，非递归遍历方法"><a href="#二叉排序树建立，非递归遍历方法" class="headerlink" title="二叉排序树建立，非递归遍历方法"></a>二叉排序树建立，非递归遍历方法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*第三题：输入一个字符串，建立一个二叉排序树，并中序遍历输出；*/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*这里采用了两种遍历，此处是非递归。下面注释的是递归*/</span></span><br><span class="line"><span class="comment">/*测试数据: poiuyt    输出数据;i o p t u y   </span></span><br><span class="line"><span class="comment">  测试数据: 621345     输出数据: 1 2 3 4 5 6*/</span></span><br><span class="line"><span class="comment">/*程序：*************************爱X的味道 07级华中农业大学计算机系*****************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 50</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">char</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">Lchild</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">Rchild</span>;</span></span><br><span class="line">&#125;Node,*BiTree;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	BiTree elem[MAX];</span><br><span class="line">	<span class="keyword">int</span> top;</span><br><span class="line">&#125;Stack;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(Stack *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	s-&gt;top=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Push</span><span class="params">(Stack *s,BiTree *T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(s-&gt;top&gt;MAX<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	s-&gt;top++;</span><br><span class="line">	s-&gt;elem[s-&gt;top]=(*T);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pop</span><span class="params">(Stack *s,BiTree *T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(s-&gt;top&lt;<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    *T=s-&gt;elem[s-&gt;top];   </span><br><span class="line">	s-&gt;top--;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="number">-1</span>==s.top)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSortTree</span><span class="params">(BiTree *tree, <span class="keyword">char</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	BiTree T;</span><br><span class="line">	<span class="keyword">if</span>(*tree == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		T=(BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">		T-&gt;data=key;</span><br><span class="line">		T-&gt;Lchild=<span class="literal">NULL</span>;</span><br><span class="line">		T-&gt;Rchild=<span class="literal">NULL</span>;</span><br><span class="line">		*tree=T;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">if</span>((*tree)-&gt;data&gt;key)</span><br><span class="line">			InsertSortTree(&amp;((*tree)-&gt;Lchild),key);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">if</span>((*tree)-&gt;data&lt;key)</span><br><span class="line">				InsertSortTree(&amp;((*tree)-&gt;Rchild),key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateSortTree</span><span class="params">(BiTree  *tree,<span class="keyword">char</span> *str )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	*tree=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(str[i]!=<span class="string">'\0'</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		InsertSortTree(&amp;(*tree),str[i]);</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrdTree</span><span class="params">(BiTree T)</span>    </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Stack s;</span><br><span class="line">	BiTree p=T;</span><br><span class="line">	InitStack(&amp;s);</span><br><span class="line">	<span class="keyword">while</span>(p!=<span class="literal">NULL</span> || !IsEmpty(s))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			Push(&amp;s,&amp;p);</span><br><span class="line">			p=p-&gt;Lchild;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			Pop(&amp;s,&amp;p);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">" %c "</span>,p-&gt;data);</span><br><span class="line">			p=p-&gt;Rchild;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> str[<span class="number">100</span>]=<span class="string">"\0"</span>;</span><br><span class="line">	BiTree tree;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"请输入一个字符串:\n\n"</span>);</span><br><span class="line">	gets(str);</span><br><span class="line">	CreateSortTree(&amp;tree,str);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"中序遍历的结果是:\n\n"</span>);</span><br><span class="line">    InOrdTree(tree);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">/*输入一个字符串，建立一个二叉排序树，并中序遍历输出；</span></span><br><span class="line"><span class="comment">要考虑字符串，好难</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">using namespace std;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">typedef struct Node&#123;</span></span><br><span class="line"><span class="comment">    int data;</span></span><br><span class="line"><span class="comment">    Node *lchild,*rchild;</span></span><br><span class="line"><span class="comment">&#125;Node,*BiTree;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Node * creatNode(int data)&#123;</span></span><br><span class="line"><span class="comment">    Node *T=(Node*)malloc(sizeof(Node));</span></span><br><span class="line"><span class="comment">    if(T==NULL)&#123;</span></span><br><span class="line"><span class="comment">        exit(0);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    T-&gt;data=data;</span></span><br><span class="line"><span class="comment">    T-&gt;lchild=NULL;</span></span><br><span class="line"><span class="comment">    T-&gt;rchild=NULL;</span></span><br><span class="line"><span class="comment">    return T;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//只有返回值时树节点才node *好不好</span></span><br><span class="line"><span class="comment">int InsertNode(BiTree &amp;T,int key)&#123;</span></span><br><span class="line"><span class="comment">    if(T==NULL)&#123;</span></span><br><span class="line"><span class="comment">        T=creatNode(key);</span></span><br><span class="line"><span class="comment">        return 1;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    //应当要检查要插入的是否已经存在的，如果查找失败直接插入，则p指向遍历最后一个节点</span></span><br><span class="line"><span class="comment">    //主要是根据key找位置</span></span><br><span class="line"><span class="comment">    else if(key==T-&gt;data)&#123;</span></span><br><span class="line"><span class="comment">        return 0;</span></span><br><span class="line"><span class="comment">    &#125;else if(key&lt;T-&gt;data)&#123;</span></span><br><span class="line"><span class="comment">    return InsertNode(T-&gt;lchild,key);</span></span><br><span class="line"><span class="comment">    &#125;else return InsertNode(T-&gt;rchild,key);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void inOrder(Node *T)&#123;</span></span><br><span class="line"><span class="comment">    if(T!=NULL)&#123;</span></span><br><span class="line"><span class="comment">        inOrder(T-&gt;lchild);</span></span><br><span class="line"><span class="comment">        printf("%c ",T-&gt;data);</span></span><br><span class="line"><span class="comment">        inOrder(T-&gt;rchild);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()&#123;</span></span><br><span class="line"><span class="comment">    Node *T=NULL;</span></span><br><span class="line"><span class="comment">    string str;</span></span><br><span class="line"><span class="comment">    cin&gt;&gt;str;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;str.size();i++)&#123;</span></span><br><span class="line"><span class="comment">            //我错了，strcpy(c,s.c_str()); 用在一整个串</span></span><br><span class="line"><span class="comment">        char c=str[i];</span></span><br><span class="line"><span class="comment">        InsertNode(T,c);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    //这个怎么能在循环内部呢.想看一下传值里面是怎么变化的！！</span></span><br><span class="line"><span class="comment">    //刚才使用返回return，每次都返回当前节点~~</span></span><br><span class="line"><span class="comment">    inOrder(T);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="无冗余字符串数组加建立二叉排序树"><a href="#无冗余字符串数组加建立二叉排序树" class="headerlink" title="无冗余字符串数组加建立二叉排序树"></a>无冗余字符串数组加建立二叉排序树</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">char</span> *s;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BiNode</span> *<span class="title">lchild</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BiNode</span> *<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BiNode,*BiTree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrder</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(T)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s\n"</span>,T-&gt;s);</span><br><span class="line">		PreOrder(T-&gt;lchild);</span><br><span class="line">		PreOrder(T-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> **str,e;</span><br><span class="line">	<span class="keyword">int</span> row=<span class="number">1</span>,col=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> tag,i,len;</span><br><span class="line">	BiTree T,r,t;</span><br><span class="line">	str=(<span class="keyword">char</span> **)<span class="built_in">malloc</span>(row*<span class="keyword">sizeof</span>(<span class="keyword">char</span> *));</span><br><span class="line">	str[col<span class="number">-1</span>]=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(col*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">	tag=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>((e=getchar())!=<span class="string">'\n'</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(e==<span class="string">' '</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			str[row<span class="number">-1</span>][col<span class="number">-1</span>]=<span class="string">'\0'</span>;</span><br><span class="line">			tag=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(tag==<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				row++;</span><br><span class="line">				col=<span class="number">2</span>;</span><br><span class="line">				str=(<span class="keyword">char</span> **)<span class="built_in">realloc</span>(str,row*<span class="keyword">sizeof</span>(<span class="keyword">char</span> *));</span><br><span class="line">				str[row<span class="number">-1</span>]=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(col*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">				str[row<span class="number">-1</span>][col<span class="number">-2</span>]=e;</span><br><span class="line">				tag=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				col++;</span><br><span class="line">				str[row<span class="number">-1</span>]=(<span class="keyword">char</span> *)<span class="built_in">realloc</span>(str[row<span class="number">-1</span>],col*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">				str[row<span class="number">-1</span>][col<span class="number">-2</span>]=e;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	str[row<span class="number">-1</span>][col<span class="number">-1</span>]=<span class="string">'\0'</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;row;i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s\n"</span>,str[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">	len=<span class="built_in">strlen</span>(str[<span class="number">0</span>]);</span><br><span class="line">	T=(BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiNode));</span><br><span class="line">	T-&gt;s=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>((len+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">	<span class="built_in">strcpy</span>(T-&gt;s,str[<span class="number">0</span>]);</span><br><span class="line">	T-&gt;lchild=T-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">	t=T;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;row;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		len=<span class="built_in">strlen</span>(str[i]);</span><br><span class="line">		r=(BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiNode));</span><br><span class="line">		r-&gt;s=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>((len+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">		r-&gt;lchild=<span class="literal">NULL</span>;</span><br><span class="line">		r-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">		<span class="built_in">strcpy</span>(r-&gt;s,str[i]);</span><br><span class="line">		<span class="keyword">while</span>(t)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">strcmp</span>(t-&gt;s,r-&gt;s)&gt;<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(t-&gt;lchild)</span><br><span class="line">					t=t-&gt;lchild;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					t-&gt;lchild=r;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(t-&gt;rchild)</span><br><span class="line">					t=t-&gt;rchild;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					t-&gt;rchild=r;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		t=T;</span><br><span class="line">	&#125;</span><br><span class="line">	PreOrder(T);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="如何创建树链表，进行逆中序遍历"><a href="#如何创建树链表，进行逆中序遍历" class="headerlink" title="如何创建树链表，进行逆中序遍历"></a>如何创建树链表，进行逆中序遍历</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*输入一个数列以0结尾，建立二叉遍历数，并对其进行逆中序遍历，释放空间*/</span></span><br><span class="line"><span class="comment">/*(2)输入一个数列以0位结束标志，建立二叉遍历树，并对其进行逆中序遍历，释放空间。*/</span></span><br><span class="line"><span class="comment">/*示例树为 :             1    </span></span><br><span class="line"><span class="comment">					    /	\</span></span><br><span class="line"><span class="comment">					   2      3</span></span><br><span class="line"><span class="comment">					    \      \</span></span><br><span class="line"><span class="comment">					     4       5</span></span><br><span class="line"><span class="comment">					   /  \       \</span></span><br><span class="line"><span class="comment">					  6    7       8       每次输入一个数，按一次回车</span></span><br><span class="line"><span class="comment">   输入的序列为 : 1 2 0 4 6 0 0 7 0 0 3 0 5 0 8 0 0  </span></span><br><span class="line"><span class="comment">   输出的结果应为: 8 5 3 1 7 4 6 2           */</span></span><br><span class="line">————————————————</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span><span class="comment">//二叉树数据结构定义；</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    BiTNode *lchild,*rchild;</span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"></span><br><span class="line"><span class="function">BiTree <span class="title">CreateTree</span><span class="params">()</span></span>&#123;<span class="comment">//创建二叉树；</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    BiTree t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;value);</span><br><span class="line">    <span class="keyword">if</span>(value==<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">         t=(BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">         t-&gt;data=value;</span><br><span class="line">         t-&gt;lchild=CreateTree();</span><br><span class="line">         t-&gt;rchild=CreateTree();</span><br><span class="line">         <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReInOrder</span><span class="params">(BiTree t)</span></span>&#123;<span class="comment">//逆中序遍历二叉树；</span></span><br><span class="line">     <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">          ReInOrder(t-&gt;rchild);</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"%d "</span>,t-&gt;data);</span><br><span class="line">          ReInOrder(t-&gt;lchild);</span><br><span class="line">          <span class="built_in">free</span>(t);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    BiTree t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请按序输入二叉树结点的值(以0为标志结束)：\n"</span>);</span><br><span class="line">    t=CreateTree();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"逆中序遍历二叉树：\n"</span>);</span><br><span class="line">    ReInOrder(t);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//另一种写法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;32/bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    node *lchild,*rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//两种方式，引用或者node *返回！！！</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertT</span><span class="params">(node *&amp;root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="comment">//应当创建新结点</span></span><br><span class="line">        root=<span class="keyword">new</span> node;</span><br><span class="line">        root-&gt;data=x;</span><br><span class="line">        root-&gt;lchild=<span class="literal">NULL</span>;</span><br><span class="line">        root-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//每个结点应该都是空的，可以自己往下接s</span></span><br><span class="line">    insertT(root-&gt;lchild);</span><br><span class="line">    insertT(root-&gt;rchild);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrdedr</span><span class="params">(node *root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        inOrdedr(root-&gt;rchild);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;root-&gt;data&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        inOrdedr(root-&gt;lchild);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    node *T=<span class="literal">NULL</span>;</span><br><span class="line">    insertT(T);</span><br><span class="line">    inOrdedr(T);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="后序加中序还原加层序遍历"><a href="#后序加中序还原加层序遍历" class="headerlink" title="后序加中序还原加层序遍历"></a>后序加中序还原加层序遍历</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">5</span> <span class="number">7</span> <span class="number">6</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//后序加中序遍历推出</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    node *lchild;</span><br><span class="line">    node *rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">40</span>],b[<span class="number">40</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">node *<span class="title">build</span><span class="params">(<span class="keyword">int</span> s1,<span class="keyword">int</span> e1,<span class="keyword">int</span> s2,<span class="keyword">int</span> e2)</span></span>&#123;</span><br><span class="line">    <span class="comment">//终于知道了！！没有创建新结点，咋个有空间放数据和指针</span></span><br><span class="line">    <span class="keyword">if</span>(s1&gt;e1) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//启示！！写法要配套，不然会出现没有NULL结点无法结束的情况</span></span><br><span class="line">    node *newNode=<span class="keyword">new</span> node;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后序遍历最后一个结点为根结点</span></span><br><span class="line">    newNode-&gt;data=a[e1];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=s2;i&lt;=e2;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b[i]==a[e1]) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> pos=i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> leftNum=pos-s2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//左子树非空，构建左子树</span></span><br><span class="line">    newNode-&gt;lchild=build(s1,s1+leftNum<span class="number">-1</span>,s2,pos<span class="number">-1</span>);</span><br><span class="line">    newNode-&gt;rchild=build(s1+leftNum,e1<span class="number">-1</span>,pos+<span class="number">1</span>,e2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(node *T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;T-&gt;data&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    preOrder(T-&gt;lchild);</span><br><span class="line">    preOrder(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floor</span><span class="params">(node *T)</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node*&gt; q;</span><br><span class="line">    <span class="comment">//注意队列当中存放的是地址</span></span><br><span class="line">    q.push(T);</span><br><span class="line">    <span class="comment">//while条件就出口</span></span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="comment">//取队头，出队，访问</span></span><br><span class="line">            node *now=q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;now-&gt;data&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            <span class="keyword">if</span>(now-&gt;lchild!=<span class="literal">NULL</span>) q.push(now-&gt;lchild);</span><br><span class="line">            <span class="keyword">if</span>(now-&gt;rchild!=<span class="literal">NULL</span>) q.push(now-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    node *T;</span><br><span class="line">    T=build(<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">floor</span>(T);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h2><h2 id="排序算法-冒泡、选择"><a href="#排序算法-冒泡、选择" class="headerlink" title="排序算法-冒泡、选择"></a>排序算法-冒泡、选择</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冒泡排序,每次都将一个最大的浮出水面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buble_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, <span class="built_in">max</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>, i&lt;length<span class="number">-1</span>, i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>, j&lt;length-i<span class="number">-1</span>, j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">max</span> = a[j];</span><br><span class="line">                a[j] = a[j+<span class="number">1</span>];</span><br><span class="line">                a[j+<span class="number">1</span>] = <span class="built_in">max</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//另一种，冒泡排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">        &#123;<span class="comment">//每次选择最小的来进行排序</span></span><br><span class="line">            <span class="keyword">if</span>(temp[j]&lt;temp[j<span class="number">-1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                num=temp[j<span class="number">-1</span>];</span><br><span class="line">                temp[j<span class="number">-1</span>]=temp[j];</span><br><span class="line">                temp[j]=num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     <span class="comment">//这个选择比较正宗   </span></span><br><span class="line">     <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; ++i)  <span class="comment">//n个数比较n-1轮</span></span><br><span class="line">    &#123;</span><br><span class="line">        MinIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (j=i+<span class="number">1</span>; j&lt;n; ++j)  <span class="comment">//每轮比较n-1-i次, 找本轮最小数的下标</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[MinIndex] &gt; a[j])</span><br><span class="line">            &#123;</span><br><span class="line">                MinIndex = j;  <span class="comment">//保存小的数的下标</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (MinIndex != i)  <span class="comment">/*找到最小数之后如果它的下标不是i则说明它不在最左边, 则互换位置*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            buf = a[MinIndex];</span><br><span class="line">            a[MinIndex] = a[i];</span><br><span class="line">            a[i] = buf;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="高低字节交换，循环左右移动"><a href="#高低字节交换，循环左右移动" class="headerlink" title="高低字节交换，循环左右移动"></a>高低字节交换，循环左右移动</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//十六进制的表达0xff前面是填充4字节</span></span><br><span class="line">%x可以输出<span class="number">16</span>进制的数</span><br><span class="line"></span><br><span class="line">位移操作   </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0xf12d2ec2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c = a &gt;&gt; <span class="number">8</span>  位移<span class="number">8</span>个  后面的<span class="number">8</span>个<span class="number">2</span>进制将变成<span class="number">0</span>   结果是 <span class="number">0xf12d2e</span></span><br><span class="line"></span><br><span class="line">然后 c &amp; <span class="number">0xff</span>    做与运算   之后最后的<span class="number">2</span>位会保留  （<span class="number">2</span>e会因为FF都是<span class="number">1</span>做与运算保留下来 ，<span class="number">2</span>e前面的因为和<span class="number">0</span>做了运算所以会变成<span class="number">0</span>）</span><br><span class="line"></span><br><span class="line"> <span class="number">0xf12d2ec2</span></span><br><span class="line"></span><br><span class="line"> <span class="number">0x000000ff</span>   做与运算则会保留下来c2</span><br><span class="line"> </span><br><span class="line"> #include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//Q1:第1、4字节交换</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> ulIn,ulHigh=<span class="number">0</span>,ulLow=<span class="number">0</span>,rolBit;</span><br><span class="line"><span class="keyword">int</span> n,<span class="built_in">bit</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入一个十六进制数：\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%x"</span>,&amp;ulIn);</span><br><span class="line"><span class="comment">//fflush(stdin);</span></span><br><span class="line"><span class="comment">//必须移位！！才可以交换位置</span></span><br><span class="line">ulHigh=ulIn&gt;&gt;<span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">ulLow=ulIn&lt;&lt;<span class="number">24</span>;</span><br><span class="line"><span class="comment">//不动才可以相与</span></span><br><span class="line">ulIn=ulIn&amp;<span class="number">0x00ffff00</span>;</span><br><span class="line">ulIn=ulIn|ulHigh;</span><br><span class="line">ulIn=ulIn|ulLow;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"交换后的结果为：%x\n"</span>,ulIn);</span><br><span class="line"><span class="comment">//Q2:在Q1的基础上，2、3字节左移n位</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n输入移位的位数：\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">n=n%<span class="number">16</span>;</span><br><span class="line">rolBit=ulIn&amp;<span class="number">0x00ffff00</span>;</span><br><span class="line"><span class="comment">//循环左移的操作实现</span></span><br><span class="line">rolBit=rolBit&gt;&gt;<span class="number">8</span>;</span><br><span class="line">rolBit=rolBit&lt;&lt;n;</span><br><span class="line">  <span class="comment">//最多可以移动16位，创造16位的移动环境,循环移动2个字节效果和移动4个字节一样</span></span><br><span class="line">ulHigh=<span class="number">0</span>;</span><br><span class="line">ulHigh=(rolBit&amp;<span class="number">0xffff0000</span>)&gt;&gt;<span class="number">16</span>;</span><br><span class="line">  <span class="comment">//高位循环结果</span></span><br><span class="line">rolBit=(rolBit&amp;<span class="number">0x0000ffff</span>)|ulHigh;</span><br><span class="line">  <span class="comment">//借8位还原</span></span><br><span class="line">rolBit=rolBit&lt;&lt;<span class="number">8</span>;</span><br><span class="line">ulIn=(ulIn&amp;<span class="number">0xff0000ff</span>)|rolBit;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"对2、3字节循环移位后的结果为：%x\n"</span>,ulIn);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Q3:按照位输出Q2的结果</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n二进制格式输出为：\n"</span>);</span><br><span class="line">  <span class="comment">//16进制如何移位输出2进制！！太强了！</span></span><br><span class="line">ulHigh=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">bit</span>=<span class="number">0</span>;<span class="built_in">bit</span>&lt;=<span class="number">31</span>;<span class="built_in">bit</span>++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">bit</span>%<span class="number">8</span>==<span class="number">0</span>)</span><br><span class="line">   <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">  ulLow=ulIn&amp;(ulHigh&lt;&lt;(<span class="number">31</span>-<span class="built_in">bit</span>));</span><br><span class="line">  <span class="comment">//得到最高位，其余为都是0</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d"</span>,ulLow&gt;&gt;(<span class="number">31</span>-<span class="built_in">bit</span>));</span><br><span class="line">  <span class="comment">//最高位移到最低位，输出值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="移位二进制表达"><a href="#移位二进制表达" class="headerlink" title="移位二进制表达"></a>移位二进制表达</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">for</span>(c=<span class="number">0</span>;n!=<span class="number">0</span>;c++)</span><br><span class="line">        <span class="comment">//通过n的相与，1&amp;1&amp;1=1,1</span></span><br><span class="line">        <span class="comment">//相与就是位与，但为什么减1就可以呢</span></span><br><span class="line">        <span class="comment">//有几个1就可以减动几次1</span></span><br><span class="line">        n=n&amp;(n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">scanf</span>(<span class="string">"%s"</span>,str)!=EOF;)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;str[i];i++)&#123;</span><br><span class="line">              <span class="keyword">int</span> x=f(str[i]);</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);</span><br><span class="line">              <span class="comment">//x是用来判断奇数还是偶数</span></span><br><span class="line">              <span class="comment">//有4个1时4&amp;1=0,3&amp;1=1;!!</span></span><br><span class="line">              <span class="comment">//str[i]不用转为2进制，直接移位就可以显示二进制表达，与1相与就可以得到当前位的信息！！</span></span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"%d"</span>,x&amp;<span class="number">1</span>?<span class="number">0</span>:<span class="number">1</span>);</span><br><span class="line">              <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">6</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">                   <span class="built_in">printf</span>(<span class="string">"%d"</span>,(str[i]&gt;&gt;j)&amp;<span class="number">1</span>);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="16位循环移位"><a href="#16位循环移位" class="headerlink" title="16位循环移位"></a>16位循环移位</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//做复杂了！！位操作就可以解决,结合进制转换一起学习</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">可以不用转化成二进制， 直接用位操作即可，</span></span><br><span class="line"><span class="comment">但是需要注意整数的位操作默认是32位的，题目中要求是16位二进制，</span></span><br><span class="line"><span class="comment">所以左移的结果要与上低16位都为1 ，</span></span><br><span class="line"><span class="comment">高16位都为0 的数（65535）。循环左移可以用左移n位 与上 右移16-n位</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">16</span>;i++)&#123;</span><br><span class="line">                <span class="comment">//实现16位循环位移的关键</span></span><br><span class="line">            <span class="keyword">if</span>(n==(((m&lt;&lt;i)&amp;<span class="number">65535</span>)|(m&gt;&gt;(<span class="number">16</span>-i))))&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="函数指针数组"><a href="#函数指针数组" class="headerlink" title="函数指针数组"></a>函数指针数组</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*ptask)</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//函数指针如何定义</span></span><br><span class="line"><span class="comment">//8个任务函数，task0,task1就是相当于指向函数头部的指针；</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">task0</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"task0 is called！\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">task1</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"task1 is called！\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">task2</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"task2 is called！\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">task3</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"task3 is called！\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">task4</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"task4 is called！\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">task5</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"task5 is called！\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">task6</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"task6 is called！\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">task7</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"task7 is called！\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ptask fun[9]=&#123;task0,task1,task2,task3,task4,task5,task6,task7&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(ptask* fun,<span class="keyword">int</span> len)</span></span>&#123;<span class="comment">//执行函数</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="comment">//我懂了！！fun[i]指向的是函数名，函数指针！！</span></span><br><span class="line">          ptask pfun=fun[i];</span><br><span class="line">          pfun();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">schedule</span><span class="params">()</span></span>&#123;<span class="comment">//调度函数；</span></span><br><span class="line"><span class="comment">//和一般指针一样，可以定义指针数组</span></span><br><span class="line">     ptask fun[<span class="number">100</span>];<span class="comment">//定义函数指针数组**；</span></span><br><span class="line">     <span class="keyword">int</span> len;<span class="comment">//字符串长度；</span></span><br><span class="line">     <span class="keyword">char</span> s[<span class="number">1000</span>];</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"请输入字符串：\n"</span>);</span><br><span class="line">     <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">     len=<span class="built_in">strlen</span>(s);</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">         <span class="keyword">int</span> temp;</span><br><span class="line">         temp=s[i]-<span class="string">'0'</span>;</span><br><span class="line">         <span class="keyword">if</span>(temp==<span class="number">0</span>)fun[i]=task0;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span>(temp==<span class="number">1</span>)fun[i]=task1;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span>(temp==<span class="number">2</span>)fun[i]=task2;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span>(temp==<span class="number">3</span>)fun[i]=task3;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span>(temp==<span class="number">4</span>)fun[i]=task4;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span>(temp==<span class="number">5</span>)fun[i]=task5;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span>(temp==<span class="number">6</span>)fun[i]=task6;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span>(temp==<span class="number">7</span>)fun[i]=task7;</span><br><span class="line">     &#125;</span><br><span class="line">     execute(fun,len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    schedule();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="如何定义二维数组并初始化new方法使用"><a href="#如何定义二维数组并初始化new方法使用" class="headerlink" title="如何定义二维数组并初始化new方法使用"></a>如何定义二维数组并初始化new方法使用</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">int</span> M = <span class="number">10</span>, N = <span class="number">5</span>;<span class="comment">//10行5列。</span></span><br><span class="line">   <span class="keyword">int</span> ** a;</span><br><span class="line">   <span class="comment">//指针数组，表示有M个数组指针</span></span><br><span class="line">   a = <span class="keyword">new</span> <span class="keyword">int</span> *[M];</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i ++)</span><br><span class="line">       a[i] = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j++)&#123;</span><br><span class="line">           a[i][j]=<span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j++)&#123;</span><br><span class="line">           <span class="built_in">cout</span>&lt;&lt;a[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fill</span>(a[<span class="number">0</span>],a[<span class="number">0</span>]+M*N,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<h2 id="动态分配内存，new方法"><a href="#动态分配内存，new方法" class="headerlink" title="动态分配内存，new方法"></a>动态分配内存，new方法</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">example1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//可以在new后面直接赋值</span></span><br><span class="line">  <span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">3</span>);</span><br><span class="line">  <span class="comment">//也可以单独赋值</span></span><br><span class="line">  <span class="comment">//*p = 3;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">//如果不想使用指针，可以定义一个变量，在new之前用“*”表示new出来的内容</span></span><br><span class="line">  <span class="keyword">int</span> q = *<span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">  q = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; q &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> *p;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">example2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//当new一个数组时，同样用一个指针接住数组的首地址</span></span><br><span class="line">  <span class="keyword">int</span> *q = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">    q[i] = i;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="built_in">string</span> name;</span><br><span class="line">  <span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function">student* <span class="title">example3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//这里是用一个结构体指针接住结构体数组的首地址</span></span><br><span class="line">  <span class="comment">//对于结构体指针，个人认为目前这种赋值方法比较方便</span></span><br><span class="line">  student *stlist = <span class="keyword">new</span> student[<span class="number">3</span>]&#123;&#123;<span class="string">"abc"</span>, <span class="number">90</span>&#125;, &#123;<span class="string">"bac"</span>, <span class="number">78</span>&#125;, &#123;<span class="string">"ccd"</span>, <span class="number">93</span>&#125;&#125;;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> stlist;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> e1 = example1();</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt;<span class="string">"e1: "</span>&lt;&lt; e1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">int</span> *e2 = example2();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; e2[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  student *st1 = example3();</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; st1[i].name &lt;&lt; <span class="string">" "</span> &lt;&lt; st1[i].score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="动态分配内存，实现输入无限制长度字符串malloc和realloc"><a href="#动态分配内存，实现输入无限制长度字符串malloc和realloc" class="headerlink" title="动态分配内存，实现输入无限制长度字符串malloc和realloc"></a>动态分配内存，实现输入无限制长度字符串malloc和realloc</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STRLEN 20 <span class="comment">//每次分配的长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> strSize=STRLEN; <span class="comment">//字符串能存储的最大长度</span></span><br><span class="line">    <span class="keyword">int</span> strLength=<span class="number">0</span>; <span class="comment">//已使用长度</span></span><br><span class="line">    <span class="keyword">char</span> input=<span class="literal">NULL</span>; <span class="comment">//接受输入的字符</span></span><br><span class="line">    <span class="keyword">char</span> *arr=(<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*STRLEN);</span><br><span class="line">    <span class="comment">//数组如何分配内存</span></span><br><span class="line">    <span class="keyword">while</span>((input=getc(<span class="built_in">stdin</span>))!=<span class="string">'\n'</span>)&#123;</span><br><span class="line">        arr[strLength++]=input;</span><br><span class="line">        <span class="keyword">if</span>(strLength==STRLEN)&#123;</span><br><span class="line">            strSize=strSize+STRLEN;<span class="comment">//更新数组能存储最大长度</span></span><br><span class="line">            arr=(<span class="keyword">char</span>*)<span class="built_in">realloc</span>(arr,strSize); <span class="comment">//如何在已经申请空间上扩展</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[strLength]=<span class="string">'\0'</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%s\n"</span>,<span class="built_in">strlen</span>(arr),arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">realloc</span>总结-主要用来实现无冗余：</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">realloc</span><span class="params">(<span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line">ptr -- 指针指向一个要重新分配内存的内存块，该内存块之前是通过调用 malloc、calloc 或 realloc 进行分配内存的。如果为空指针，则会分配一个新的内存块，且函数返回一个指向它的指针。</span><br><span class="line"><span class="built_in">size</span> -- 内存块的新的大小，以字节为单位。如果大小为 <span class="number">0</span>，且 ptr 指向一个已存在的内存块，则 ptr 所指向的内存块会被释放，并返回一个空指针。</span><br></pre></td></tr></table></figure>
<h2 id="无冗余输入字符串"><a href="#无冗余输入字符串" class="headerlink" title="无冗余输入字符串"></a>无冗余输入字符串</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fflush(<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">int</span> lenth=<span class="number">0</span>; <span class="comment">//已使用长度</span></span><br><span class="line">    <span class="keyword">char</span> input; <span class="comment">//接受输入字符</span></span><br><span class="line">    <span class="comment">//括号的原因,必须要带括号，且位置不能出错</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//关键在于malloc分配空间</span></span><br><span class="line">    <span class="keyword">char</span> *arr=(<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">    <span class="keyword">while</span>((input=getchar())!=<span class="string">'\n'</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(input!=<span class="string">' '</span>)&#123;</span><br><span class="line">        arr[lenth++]=input;</span><br><span class="line">        arr=(<span class="keyword">char</span>*)<span class="built_in">realloc</span>(arr,<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*(lenth+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[lenth]=<span class="string">'\0'</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,arr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> a[lenth/<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">char</span> b[lenth/<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> num1=<span class="number">0</span>,num2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lenth;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>((i+<span class="number">1</span>)%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            a[num1++]=arr[i];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            b[num2++]=arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s %s\n"</span>,a,b);</span><br><span class="line"></span><br><span class="line">    sort(a,a+num1);</span><br><span class="line">    sort(b,b+num2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s %s\n"</span>,a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> *preal = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">int</span> num, count = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"请输入一个整数（-1表示结束）："</span> );</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (num != <span class="number">-1</span>) &#123;</span><br><span class="line">			count++;</span><br><span class="line">			preal = (<span class="keyword">int</span> *)<span class="built_in">realloc</span>(preal, count * <span class="keyword">sizeof</span>(<span class="keyword">int</span>)); <span class="comment">// 申请内存，随count的增加而扩展</span></span><br><span class="line">			<span class="keyword">if</span> (preal == <span class="literal">NULL</span>) &#123; <span class="built_in">printf</span>(<span class="string">"申请内存失败"</span> ); <span class="built_in">exit</span>(<span class="number">1</span>); &#125;</span><br><span class="line">			preal[count - <span class="number">1</span>] = num;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125; <span class="keyword">while</span> (num != <span class="number">-1</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">free</span>(preal); <span class="comment">// 释放内存</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="char和string的转换方法"><a href="#char和string的转换方法" class="headerlink" title="char和string的转换方法"></a>char和string的转换方法</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> c[<span class="number">20</span>]; </span><br><span class="line"><span class="built_in">string</span> s=<span class="string">"1234"</span>; </span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(c,s.c_str()); </span><br><span class="line"></span><br><span class="line">这样才不会出错，c_str()返回的是一个临时指针，不能对其进行操作。</span><br><span class="line">语法: <span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">c_str</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">c_str()函数返回一个指向正规C字符串的指针, 内容与本<span class="built_in">string</span>串相同.，这是为了与c语言兼容，在c语言中没有<span class="built_in">string</span>类型，故必须通过<span class="built_in">string</span>类对象的成员函数c_str()把<span class="built_in">string</span> 对象转换成c中的字符串样式。</span><br><span class="line"></span><br><span class="line">注意：一定要使用<span class="built_in">strcpy</span>()函数 等来操作方法c_str()返回的指针</span><br></pre></td></tr></table></figure>
<h2 id="日期问题"><a href="#日期问题" class="headerlink" title="日期问题"></a>日期问题</h2><h3 id="日期问题的常规操作"><a href="#日期问题的常规操作" class="headerlink" title="日期问题的常规操作"></a>日期问题的常规操作</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*给出年份m和一年中的第几天，算出第几天是几月几号，按照yyyy-mm-dd格式打印*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsYeap</span><span class="params">(<span class="keyword">int</span> year)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(year%<span class="number">400</span>==<span class="number">0</span>||(year%<span class="number">100</span>!=<span class="number">0</span>&amp;&amp;year%<span class="number">4</span>==<span class="number">0</span>)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> DayOfMonth[<span class="number">13</span>][<span class="number">2</span>]=&#123;</span><br><span class="line">    <span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">    <span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line">    <span class="number">28</span>,<span class="number">29</span>,</span><br><span class="line">    <span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line">    <span class="number">30</span>,<span class="number">30</span>,</span><br><span class="line">    <span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line">    <span class="number">30</span>,<span class="number">30</span>,</span><br><span class="line">    <span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line">    <span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line">    <span class="number">30</span>,<span class="number">30</span>,</span><br><span class="line">    <span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line">    <span class="number">30</span>,<span class="number">30</span>,</span><br><span class="line">    <span class="number">31</span>,<span class="number">31</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;m,&amp;n)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">int</span> month=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">12</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n&gt;DayOfMonth[i][IsYeap(m)])&#123;</span><br><span class="line">                n=n-DayOfMonth[i][IsYeap(m)];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                month=i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//c语言的格式输出好处</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d-%02d-%02d\n"</span>,m,month,n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="日期问题相差天数"><a href="#日期问题相差天数" class="headerlink" title="日期问题相差天数"></a>日期问题相差天数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//太复杂的做法    </span></span><br><span class="line"><span class="built_in">string</span> s1,s2,tmp;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">    <span class="keyword">if</span>(s1&gt;s2)&#123;</span><br><span class="line">        tmp=s1;</span><br><span class="line">        s1=s2;</span><br><span class="line">        s2=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> yearS1=s1.substr(<span class="number">0</span>,<span class="number">4</span>),monS1=s1.substr(<span class="number">4</span>,<span class="number">2</span>),dayS1=s1.substr(<span class="number">6</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">string</span> yearS2=s2.substr(<span class="number">0</span>,<span class="number">4</span>),monS2=s2.substr(<span class="number">4</span>,<span class="number">2</span>),dayS2=s2.substr(<span class="number">6</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">int</span> year1,mon1,day1,year2,mon2,day2;</span><br><span class="line">    year1=atoi(yearS1.c_str());</span><br><span class="line">    mon1=atoi(monS1.c_str());</span><br><span class="line">    day1=atoi(dayS1.c_str());</span><br><span class="line">    year2=atoi(yearS2.c_str());</span><br><span class="line">    mon2=atoi(monS2.c_str());</span><br><span class="line">    day2=atoi(dayS2.c_str());</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; year1 &lt;&lt;<span class="string">" "</span>&lt;&lt; mon1 &lt;&lt;<span class="string">" "</span>&lt;&lt;day1&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//机制简便的处理办法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> month[<span class="number">13</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">28</span>,<span class="number">29</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,</span><br><span class="line">&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> time1,y1,m1,d1;</span><br><span class="line">	<span class="keyword">int</span> time2,y2,m2,d2;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;time1,&amp;time2)!=EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(time1&gt;time2)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> temp=time1;</span><br><span class="line">			time1=time2;</span><br><span class="line">			time2=temp;</span><br><span class="line">		&#125;</span><br><span class="line">		y1=time1/<span class="number">10000</span>;m1=time1%<span class="number">10000</span>/<span class="number">100</span>;d1=time1%<span class="number">100</span>;</span><br><span class="line">		y2=time2/<span class="number">10000</span>;m2=time2%<span class="number">10000</span>/<span class="number">100</span>;d2=time2%<span class="number">100</span>;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(y1&lt;y2||m1&lt;m2||d1&lt;d2)</span><br><span class="line">		&#123;</span><br><span class="line">			d1++;</span><br><span class="line">			<span class="keyword">if</span>(d1==month[m1][(y1%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;y1%<span class="number">100</span>!=<span class="number">0</span>)||(y1%<span class="number">400</span>==<span class="number">0</span>)]+<span class="number">1</span>)</span><br><span class="line">			&#123;	</span><br><span class="line">				m1++;</span><br><span class="line">				d1=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(m1==<span class="number">13</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				y1++;</span><br><span class="line">				m1=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			ans++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="利用日期差值求星期"><a href="#利用日期差值求星期" class="headerlink" title="利用日期差值求星期"></a>利用日期差值求星期</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> month[<span class="number">13</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">28</span>,<span class="number">29</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,</span><br><span class="line">&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">char</span> weekname[<span class="number">8</span>][<span class="number">15</span>]=&#123;<span class="string">""</span>,<span class="string">"Monday"</span>,<span class="string">"Tuesday"</span>,<span class="string">"Wednesday"</span>,<span class="string">"Thursday"</span>,<span class="string">"Friday"</span>,<span class="string">"Saturday"</span>,<span class="string">"Sunday"</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> monthname[<span class="number">13</span>][<span class="number">15</span>]=&#123;<span class="string">""</span>,<span class="string">"January"</span>,<span class="string">"February"</span>,<span class="string">"March"</span>,<span class="string">"April"</span>,<span class="string">"May"</span>,<span class="string">"June"</span>,<span class="string">"July"</span>,<span class="string">"August"</span>,<span class="string">"September"</span>,<span class="string">"October"</span>,<span class="string">"November"</span>,<span class="string">"December"</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StringtoNumber</span><span class="params">(<span class="keyword">char</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">13</span>;++i)</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">strcmp</span>(a,monthname[i])==<span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NumbertoString</span><span class="params">(<span class="keyword">char</span> a[],<span class="keyword">int</span> ans,<span class="keyword">int</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> b;</span><br><span class="line">	<span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">		b=<span class="number">6</span>-ans%<span class="number">7</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		b=(ans+<span class="number">6</span>)%<span class="number">7</span>;</span><br><span class="line">	<span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">		b=<span class="number">7</span>;</span><br><span class="line">	<span class="built_in">strcat</span>(a,weekname[b]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">	<span class="keyword">char</span> m[<span class="number">20</span>],week[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">int</span> y1,m1,d1;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %s %d"</span>,&amp;d1,m,&amp;y1)!=EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> y2=<span class="number">2018</span>,m2=<span class="number">1</span>,d2=<span class="number">6</span>,flag=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">		m1=StringtoNumber(m);</span><br><span class="line">		<span class="built_in">memset</span>(m,<span class="string">'\0'</span>,<span class="keyword">sizeof</span>(m));</span><br><span class="line">		<span class="built_in">memset</span>(week,<span class="string">'\0'</span>,<span class="keyword">sizeof</span>(week));</span><br><span class="line">		<span class="keyword">if</span>(y1&gt;y2||(y1==y2&amp;&amp;m1&gt;m2)||(y1==y2&amp;&amp;m1==m2&amp;&amp;d1&gt;d2))</span><br><span class="line">		&#123;</span><br><span class="line">			flag=<span class="number">1</span>;</span><br><span class="line">			swap(y1,y2);</span><br><span class="line">			swap(m1,m2);</span><br><span class="line">			swap(d1,d2);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(y1&lt;y2||m1&lt;m2||d1&lt;d2)</span><br><span class="line">		&#123;</span><br><span class="line">			d1++;</span><br><span class="line">			<span class="keyword">if</span>(d1==month[m1][(y1%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;y1%<span class="number">100</span>!=<span class="number">0</span>)||(y1%<span class="number">400</span>==<span class="number">0</span>)]+<span class="number">1</span>)</span><br><span class="line">			&#123;	</span><br><span class="line">				m1++;</span><br><span class="line">				d1=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(m1==<span class="number">13</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				y1++;</span><br><span class="line">				m1=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			ans++;</span><br><span class="line">		&#125;</span><br><span class="line">		NumbertoString(week,ans,flag);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s\n"</span>,week);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="矩阵转置"><a href="#矩阵转置" class="headerlink" title="矩阵转置"></a>矩阵转置</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;a[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="for循环的进阶用法"><a href="#for循环的进阶用法" class="headerlink" title="for循环的进阶用法"></a>for循环的进阶用法</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">     <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n%<span class="number">10</span>;n!=<span class="number">0</span>;n=n/<span class="number">10</span>,i=n%<span class="number">10</span>)&#123;</span><br><span class="line">      <span class="comment">//开始循环前的定义，可以多个先后语句 ；  循环终止的条件；每次执行一次循环之后的操作</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> temp=m,j=temp%<span class="number">10</span>;temp!=<span class="number">0</span>;temp=temp/<span class="number">10</span>,j=temp%<span class="number">10</span>)&#123;</span><br><span class="line">         count=count+i*j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;count&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="结构体查找学生信息新办法"><a href="#结构体查找学生信息新办法" class="headerlink" title="结构体查找学生信息新办法"></a>结构体查找学生信息新办法</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">char</span> sex[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;stu[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;       <span class="keyword">int</span> n,no,m;</span><br><span class="line">        <span class="keyword">char</span> temp[<span class="number">100</span>];</span><br><span class="line">        <span class="comment">//可以自动省去001前缀</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;no;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;stu[no].name&gt;&gt;stu[no].sex&gt;&gt;stu[no].age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">        <span class="keyword">if</span>(m==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//终于知道了。由于要输出学号，因此需要要使用字符串转整型</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="built_in">memset</span>(temp,<span class="string">'\0'</span>,<span class="keyword">sizeof</span>(temp));</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">            <span class="comment">//使用方法不对，和scanf一样，得要赋给地址</span></span><br><span class="line">            <span class="built_in">sscanf</span>(temp,<span class="string">"%d"</span>,&amp;no);</span><br><span class="line">            <span class="keyword">if</span>(stu[no].age!=<span class="literal">NULL</span>)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;temp&lt;&lt;<span class="string">" "</span>&lt;&lt;stu[no].name&lt;&lt;<span class="string">" "</span>&lt;&lt;stu[no].sex&lt;&lt;<span class="string">" "</span>&lt;&lt;stu[no].age&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"No Answer!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="图形题漏斗，两种思路"><a href="#图形题漏斗，两种思路" class="headerlink" title="图形题漏斗，两种思路"></a>图形题漏斗，两种思路</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//静态数组，进行填充</span></span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>-i;j++) </span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"* "</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i<span class="number">-1</span>;j++)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>-i+<span class="number">1</span>;j++) </span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"* "</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i<span class="number">-1</span>;j++)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接找规律输出，太强</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>-i;j++) </span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"* "</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i<span class="number">-1</span>;j++)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>-i+<span class="number">1</span>;j++) </span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"* "</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i<span class="number">-1</span>;j++)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">d</span><br><span class="line">a b c d c b a</span><br><span class="line"> a b c b a</span><br><span class="line">  a b a</span><br><span class="line">   a</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;c)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">islower</span>(c))&#123;</span><br><span class="line">            <span class="keyword">int</span> h=c-<span class="string">'a'</span>+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> l=<span class="number">2</span>*h<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;h;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i<span class="number">-1</span>;j++) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;h;j++) <span class="built_in">printf</span>(<span class="string">"%c "</span>,<span class="string">'a'</span>+j-i);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=h;j&lt;l-i;j++) <span class="built_in">printf</span>(<span class="string">"%c "</span>,<span class="string">'a'</span>+l-i-j<span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=l-i;j&lt;l;j++) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> h=c-<span class="string">'A'</span>+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> l=<span class="number">2</span>*h<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;h;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i<span class="number">-1</span>;j++) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;h;j++) <span class="built_in">printf</span>(<span class="string">"%c "</span>,<span class="string">'A'</span>+j-i);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=h;j&lt;l-i;j++) <span class="built_in">printf</span>(<span class="string">"%c "</span>,<span class="string">'A'</span>+l-i-j<span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=l-i;j&lt;l;j++) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="打印图形，上下翻转"><a href="#打印图形，上下翻转" class="headerlink" title="打印图形，上下翻转"></a>打印图形，上下翻转</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">C</span><br><span class="line">    AA</span><br><span class="line">  AB  BA</span><br><span class="line">ABC    CBA</span><br><span class="line">  AB  BA</span><br><span class="line">    AA</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> c;</span><br><span class="line">	<span class="keyword">int</span> sum,i,j;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;c)!=EOF)&#123;</span><br><span class="line">		sum=c-<span class="string">'A'</span>+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;sum;i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">2</span>*(sum<span class="number">-1</span>-i);j++)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">" "</span>);<span class="comment">//输出前边的空格；</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=i;j++)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="string">'A'</span>+j);<span class="comment">//输出前边一串字符串；</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"  "</span>);<span class="comment">//输出中间的字符串；</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(j=i;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="string">'A'</span>+j);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(i=sum<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">			<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">2</span>*(sum<span class="number">-1</span>-i);j++)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">" "</span>);<span class="comment">//输出前边的空格；</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=i;j++)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="string">'A'</span>+j);<span class="comment">//输出前边一串字符串；</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"  "</span>);<span class="comment">//输出中间的字符串；</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(j=i;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="string">'A'</span>+j);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		getchar();<span class="comment">//接受回车符；</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="哈希专题"><a href="#哈希专题" class="headerlink" title="哈希专题"></a>哈希专题</h2><h3 id="hash表的用法"><a href="#hash表的用法" class="headerlink" title="hash表的用法"></a>hash表的用法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">      <span class="comment">//最好还是固定住值，不然会编译报错，初始化为0</span></span><br><span class="line">        <span class="keyword">int</span> hashTable[<span class="number">201</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> arr[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">            hashTable[arr[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(hashTable[arr[i]]&gt;<span class="number">1</span>)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;hashTable[arr[i]]<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"BeiJu"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="hash表高阶用法，二维数组存放不同组的hash值"><a href="#hash表高阶用法，二维数组存放不同组的hash值" class="headerlink" title="hash表高阶用法，二维数组存放不同组的hash值"></a>hash表高阶用法，二维数组存放不同组的hash值</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m,s[<span class="number">110</span>],g[<span class="number">110</span>],t[<span class="number">110</span>];</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">	&#123; 	</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> z[<span class="number">110</span>][<span class="number">2100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;s[j]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;g[j]);</span><br><span class="line">				z[g[j]][s[j]]++;</span><br><span class="line">			&#125;</span><br><span class="line">          <span class="comment">//这里的排序算法，使用很是巧妙</span></span><br><span class="line">			sort(s,s+m);</span><br><span class="line">			sort(g,g+m);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">			&#123;<span class="comment">//关键要落实到此处，输出第一个之后，每次都输出与前一个不同的数</span></span><br><span class="line">				<span class="keyword">if</span>(j==<span class="number">0</span>||(j&gt;<span class="number">0</span>&amp;&amp;g[j]!=g[j<span class="number">-1</span>]))</span><br><span class="line">				&#123;<span class="comment">//输出格式也很关键</span></span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">"%d=&#123;"</span>,g[j]);</span><br><span class="line">					<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;m;k++)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span>(k==<span class="number">0</span>||(k&gt;<span class="number">0</span>&amp;&amp;s[k]!=s[k<span class="number">-1</span>]))</span><br><span class="line">						&#123;</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">"%d=%d"</span>,s[k],z[g[j]][s[k]]);</span><br><span class="line">							<span class="keyword">if</span>(k!=m<span class="number">-1</span>&amp;&amp;s[k]!=s[m<span class="number">-1</span>])</span><br><span class="line">								<span class="built_in">printf</span>(<span class="string">","</span>);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">"&#125;\n"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="hash结合字母表处理字符串的使用方法"><a href="#hash结合字母表处理字符串的使用方法" class="headerlink" title="hash结合字母表处理字符串的使用方法"></a>hash结合字母表处理字符串的使用方法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个题的输出处理方式太强了</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> str1,str2;</span><br><span class="line">    <span class="keyword">while</span>(getline(<span class="built_in">cin</span>,str1))&#123;</span><br><span class="line">        <span class="keyword">int</span> hashTable[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        getline(<span class="built_in">cin</span>,str2);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str2.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            hashTable[str2[i]-<span class="string">'a'</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str1.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str1[i]!=<span class="string">' '</span>&amp;&amp;hashTable[str1[i]-<span class="string">'a'</span>]!=<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    str1.erase(i,<span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//这个减一必不可少，因为erase去除了当前的i，则原来的i+1向前移动，如果不向前移动，会错过检查原来的i+1</span></span><br><span class="line">                    i=i<span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;str1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其实做的复杂了，可以更简单的，不用删除，控制输出即可</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> s1[<span class="number">10010</span>],s2[<span class="number">10010</span>];</span><br><span class="line">  <span class="comment">//255表示全部字符的范围</span></span><br><span class="line">	<span class="keyword">int</span> flag[<span class="number">255</span>];</span><br><span class="line">	<span class="keyword">while</span>(gets(s1))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span>(flag));</span><br><span class="line">		gets(s2);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;s2[i]!=<span class="string">'\0'</span>;++i)</span><br><span class="line">			flag[s2[i]]=<span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;s1[i]!=<span class="string">'\0'</span>;++i)</span><br><span class="line">			<span class="keyword">if</span>(flag[s1[i]]==<span class="literal">false</span>)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%c"</span>,s1[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="递归专题"><a href="#递归专题" class="headerlink" title="递归专题"></a>递归专题</h2><h3 id="递归加上图形按规律打印"><a href="#递归加上图形按规律打印" class="headerlink" title="递归加上图形按规律打印"></a>递归加上图形按规律打印</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">样例输入</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">样例输出</span></span><br><span class="line"><span class="comment">          0</span></span><br><span class="line"><span class="comment">        0 1 1</span></span><br><span class="line"><span class="comment">      0 1 1 2 3</span></span><br><span class="line"><span class="comment">    0 1 1 2 3 5 8</span></span><br><span class="line"><span class="comment">  0 1 1 2 3 5 8 13 21</span></span><br><span class="line"><span class="comment">0 1 1 2 3 5 8 13 21 34 55</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归输出中间值不是从中间输出的1！！，观念性错误，应当从传入的值入手</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">0</span>||a==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> f(a<span class="number">-1</span>)+f(a<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;k++)&#123;</span><br><span class="line">            <span class="keyword">int</span> num;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">              <span class="comment">//一定要学会找规律啊~~，不能只想着把它们存在数组里一起输出</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>*(num<span class="number">-1</span>-i);j++)</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">                <span class="keyword">if</span>(i!=<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">"0 "</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>*i<span class="number">-1</span>;j++)</span><br><span class="line">                        <span class="built_in">cout</span>&lt;&lt;f(j)&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;f(<span class="number">2</span>*i<span class="number">-1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">              <span class="comment">//特殊情况都得要考虑到</span></span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="另一种方向的递归"><a href="#另一种方向的递归" class="headerlink" title="另一种方向的递归"></a>另一种方向的递归</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scheme</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//出口是当a减成0</span></span><br><span class="line">	<span class="keyword">if</span>(a==<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		count++;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="comment">//每次都从最大处开始减少，减少的方式不同</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>&amp;&amp;i&lt;=a;i++)</span><br><span class="line">		scheme(a-i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">	&#123;</span><br><span class="line">		count=<span class="number">0</span>;</span><br><span class="line">		scheme(n);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,count);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简单的递归，主要是要理清楚逻辑，对于所有的物品，都可以选择放入或者不放入，最后能使总和为40即为一种解~</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count,n,a[<span class="number">20</span>];</span><br><span class="line"><span class="comment">//n要在此处定义的原因，作为界限</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sum==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//出口是最后可以完全拿满40，这才可以出去</span></span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index&gt;=n)</span><br><span class="line">    <span class="comment">//如果n个值都遍历完了，还找不到那么就失败了</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(sum-a[index]&gt;=<span class="number">0</span>)</span><br><span class="line">        search(index+<span class="number">1</span>,sum-a[index]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最关键的来了，一种方法失败，则把index往后面进移动，从后面开始计算，即使没失败，也要继续往下试探</span></span><br><span class="line">    search(index+<span class="number">1</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        search(<span class="number">0</span>,<span class="number">40</span>);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;count&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="循环递归-全排列"><a href="#循环递归-全排列" class="headerlink" title="循环递归+全排列"></a>循环递归+全排列</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="comment">//正确定义是集合</span></span><br><span class="line"><span class="keyword">bool</span> flag[<span class="number">20</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combine</span><span class="params">(<span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt==n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag[i]==<span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="comment">//cnt计数的是以第几个数打头</span></span><br><span class="line">            ans[cnt]=i+<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//访问过</span></span><br><span class="line">            flag[i]=<span class="literal">true</span>;</span><br><span class="line">            combine(cnt+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//访问完之后恢复</span></span><br><span class="line">            flag[i]=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        combine(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//非递归方法，还没有研究透彻，但是调试有了进步</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; answer;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">process</span>;</span><br><span class="line"><span class="keyword">bool</span> flag[<span class="number">20</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combine</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">process</span>.push(<span class="number">1</span>);</span><br><span class="line">    answer.push_back(<span class="number">1</span>);</span><br><span class="line">    flag[<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> visit;</span><br><span class="line">    <span class="keyword">bool</span> pop=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">process</span>.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(answer.<span class="built_in">size</span>()==n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>,answer[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">            pop=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        visit=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(flag[i]==<span class="literal">false</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                visit=i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(visit==<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flag[<span class="built_in">process</span>.top()]=<span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">process</span>.pop();</span><br><span class="line">            answer.pop_back();</span><br><span class="line">            pop=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pop)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">bool</span> search=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="built_in">process</span>.top()+<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(flag[i]==<span class="literal">false</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    search=<span class="literal">true</span>;</span><br><span class="line">                    visit=i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            flag[<span class="built_in">process</span>.top()]=<span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">process</span>.pop();</span><br><span class="line">            answer.pop_back();</span><br><span class="line">            <span class="keyword">if</span>(search==<span class="literal">false</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                pop=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                pop=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(visit!=<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flag[visit]=<span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">process</span>.push(visit);</span><br><span class="line">            answer.push_back(visit);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        combine();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="求组合数递归"><a href="#求组合数递归" class="headerlink" title="求组合数递归"></a>求组合数递归</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="comment">//正确定义是集合</span></span><br><span class="line"><span class="keyword">bool</span> flag[<span class="number">20</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combine</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">    <span class="comment">//只能证明出口问题，关键在于不知道如何分叉，返回数据</span></span><br><span class="line">    <span class="keyword">if</span>(cnt==n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//果然x是变化的，只是没想到怎么变1！，可以带参数的，循环一次之后前面那个就不用参与循环</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag[i<span class="number">-1</span>]==<span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="comment">//cnt计数的是以第几个数打头</span></span><br><span class="line">            ans[cnt]=i;</span><br><span class="line">            <span class="comment">//访问过</span></span><br><span class="line">            flag[i<span class="number">-1</span>]=<span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//可以理解为记住了x的值！！往下走</span></span><br><span class="line">            combine(i,cnt+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//访问完之后恢复</span></span><br><span class="line">            flag[i<span class="number">-1</span>]=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n)&#123;</span><br><span class="line">        combine(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//非递归方法，关键是什么时候入栈，什么时候出战，利用栈的特性，可以将一个数定住循环其他</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,r;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combine</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">process</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; answer;</span><br><span class="line">    <span class="built_in">process</span>.push(<span class="number">1</span>);</span><br><span class="line">    answer.push_back(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> elem;</span><br><span class="line">    <span class="keyword">bool</span> pop=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">process</span>.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(answer.<span class="built_in">size</span>()==r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>,answer[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">            pop=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        elem=<span class="built_in">process</span>.top();</span><br><span class="line">      <span class="comment">//如果elem已经达到最大值，就一定要出栈了，不然没得位置,并且后面不能继续，直接跳过</span></span><br><span class="line">        <span class="keyword">if</span>(elem==n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">process</span>.pop();</span><br><span class="line">            answer.pop_back();</span><br><span class="line">            pop=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//后面的行为就是先出再进</span></span><br><span class="line">        <span class="keyword">if</span>(pop)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">process</span>.pop();</span><br><span class="line">            answer.pop_back();</span><br><span class="line">            pop=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//只要初始的第一个值还没到n，process就不会为空</span></span><br><span class="line">        <span class="keyword">if</span>(elem&lt;n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">process</span>.push(elem+<span class="number">1</span>);</span><br><span class="line">            answer.push_back(elem+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;r))</span><br><span class="line">    &#123;</span><br><span class="line">        combine();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="递归组合-判断素数，一加一减显示递归的路径"><a href="#递归组合-判断素数，一加一减显示递归的路径" class="headerlink" title="递归组合+判断素数，一加一减显示递归的路径"></a>递归组合+判断素数，一加一减显示递归的路径</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,count;</span><br><span class="line"><span class="keyword">int</span> number[<span class="number">25</span>],sum;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> sqr=(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(<span class="number">1.0</span>*n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=sqr;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combine_judge</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> level)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(level==k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(isPrime(sum)==<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=pos;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum+=number[i];</span><br><span class="line">        combine_judge(i+<span class="number">1</span>,level+<span class="number">1</span>);</span><br><span class="line">      <span class="comment">//回退之后减去，目的是换下一条路径</span></span><br><span class="line">        sum-=number[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;k))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;number[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        count=<span class="number">0</span>;</span><br><span class="line">        sum=<span class="number">0</span>;</span><br><span class="line">        combine_judge(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="八皇后遍历全排列版-剪枝版"><a href="#八皇后遍历全排列版-剪枝版" class="headerlink" title="八皇后遍历全排列版+剪枝版"></a>八皇后遍历全排列版+剪枝版</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">26</span>;</span><br><span class="line"><span class="keyword">int</span> n,p[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> hashTable[maxn]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//要类比全排列，找出所有n*n行元素的排列方式，就是皇后可能排列的位置</span></span><br><span class="line"><span class="comment">//要筛选出其中在对角线上的</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="comment">//递归边界，表示已经处理完1-n位</span></span><br><span class="line">    <span class="keyword">if</span>(index==n+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//flag为true表示当前排列为合法方案</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="comment">//遍历任意两个皇后，判断是否合法</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                <span class="comment">//相当于两个坐标(i,p[i)和(j,p[j])进行比较</span></span><br><span class="line">                <span class="comment">//由于全排列行列肯定不一致，关键是看是否在同一对角线</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(i-j)==<span class="built_in">abs</span>(p[i]-p[j]))</span><br><span class="line">                flag=<span class="literal">false</span>;<span class="comment">//表示不合法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;p[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//此处是递归分叉</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(hashTable[i]==<span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="comment">//访问未访问</span></span><br><span class="line">            hashTable[i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//令p的第index位为i，就是把i带入当前排列</span></span><br><span class="line">            p[index]=i;</span><br><span class="line">            DFS(index+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//返回后如何进入下一个分叉</span></span><br><span class="line">            hashTable[i]=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        DFS(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//剪枝版，可以去掉多余的递归,对于p[index]=i表示index列的行号为i</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">26</span>;</span><br><span class="line"><span class="keyword">int</span> n,p[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> hashTable[maxn]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//要类比全排列，找出所有n*n行元素的排列方式，就是皇后可能排列的位置</span></span><br><span class="line"><span class="comment">//要筛选出其中在对角线上的</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="comment">//递归边界，表示已经处理完1-n位</span></span><br><span class="line">    <span class="keyword">if</span>(index==n+<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//出口不变，判定的地方会变,能到这里的一定是合法的</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;p[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//此处是递归分叉</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(hashTable[i]==<span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="keyword">bool</span> flag=<span class="literal">true</span>; <span class="comment">//表示当前皇后不会和之前的皇后冲突</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> pre=<span class="number">1</span>;pre&lt;index;pre++)&#123;</span><br><span class="line">                <span class="comment">//第index列皇后的行号为x，第pre列皇后的行号为p[pre]</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(index-pre)==<span class="built_in">abs</span>(i-p[pre]))&#123;</span><br><span class="line">                    flag=<span class="literal">false</span>; <span class="comment">//冲突，是与之前的皇后在对角线，而不是全部选出来再判断</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">             <span class="comment">//这里变成可以吧皇后放在第x行</span></span><br><span class="line">                hashTable[i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//令p的第index位为i，就是把i带入当前排列</span></span><br><span class="line">                p[index]=i;</span><br><span class="line">                DFS(index+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//返回后如何进入下一个分叉</span></span><br><span class="line">                hashTable[i]=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        DFS(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="走迷宫-深度遍历DFS版"><a href="#走迷宫-深度遍历DFS版" class="headerlink" title="走迷宫-深度遍历DFS版"></a>走迷宫-深度遍历DFS版</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//深度优先遍历解决迷宫问题</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果不想递归当中带太多的内容，就应该多定义全局变量</span></span><br><span class="line"><span class="keyword">int</span> m,n,last_x,last_y,start_x,start_y;</span><br><span class="line"><span class="keyword">int</span> atlas[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="comment">//存放矩阵</span></span><br><span class="line"><span class="keyword">bool</span> flag[<span class="number">20</span>][<span class="number">20</span>]=&#123;<span class="literal">false</span>&#125;; <span class="comment">//还是得要定义是否访问过，不走回头路</span></span><br><span class="line"><span class="keyword">int</span> direct[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> index,cnt; <span class="comment">//记录index是为了知道结果中有几个点</span></span><br><span class="line"><span class="keyword">int</span> answer[<span class="number">250</span>][<span class="number">2</span>]; <span class="comment">//存放x，y坐标的办法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>||y==<span class="number">0</span>||y&gt;n||x&gt;m)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//当前位置为0或者(x,y)已经访问过了或者越界返回false</span></span><br><span class="line">    <span class="keyword">if</span>(atlas[x][y]==<span class="number">0</span>||flag[x][y]==<span class="literal">true</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispose</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="comment">//出口地址</span></span><br><span class="line">    <span class="keyword">if</span>(x==last_x&amp;&amp;y==last_y)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;index;i++)&#123;</span><br><span class="line">                <span class="comment">//格式的问题，不要当成大问题</span></span><br><span class="line">            <span class="keyword">if</span>(i!=index<span class="number">-1</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"(%d,%d)-&gt;"</span>,answer[i][<span class="number">0</span>],answer[i][<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"(%d,%d)\n"</span>,answer[i][<span class="number">0</span>],answer[i][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> new_x=x+direct[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> new_y=y+direct[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(judge(new_x,new_y))&#123;</span><br><span class="line">                <span class="comment">//表示已经访问</span></span><br><span class="line">            flag[new_x][new_y]=<span class="literal">true</span>;</span><br><span class="line">            answer[index][<span class="number">0</span>]=new_x;</span><br><span class="line">            answer[index][<span class="number">1</span>]=new_y;</span><br><span class="line">            dispose(new_x,new_y,index+<span class="number">1</span>);</span><br><span class="line">            flag[new_x][new_y]=<span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//回退时候的操作</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;atlas[i][j];</span><br><span class="line">                flag[i][j]=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;start_x&gt;&gt;start_y;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;last_x&gt;&gt;last_y;</span><br><span class="line">        <span class="comment">//每次循环都要设定index和方案数位0，对全局变量的处理</span></span><br><span class="line">        index=<span class="number">0</span>;</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">      <span class="comment">//入口也得要判断处理</span></span><br><span class="line">        <span class="keyword">if</span>(judge(start_x,start_y))&#123;</span><br><span class="line">            flag[start_x][start_y]=<span class="literal">true</span>;</span><br><span class="line">            answer[index][<span class="number">0</span>]=start_x;</span><br><span class="line">            answer[index][<span class="number">1</span>]=start_y;</span><br><span class="line">            dispose(start_x,start_y,index+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(cnt==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="计算矩阵中含1块-BFS版"><a href="#计算矩阵中含1块-BFS版" class="headerlink" title="计算矩阵中含1块-BFS版"></a>计算矩阵中含1块-BFS版</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span> <span class="number">7</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn =<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y; <span class="comment">//坐标(x,y)</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m; <span class="comment">//矩阵大小</span></span><br><span class="line"><span class="keyword">int</span> matrix[maxn][maxn];  <span class="comment">//01矩阵</span></span><br><span class="line"><span class="keyword">bool</span> inq[maxn][maxn]=&#123;<span class="literal">false</span>&#125;;  <span class="comment">//记录位置是否已经入过队</span></span><br><span class="line"><span class="keyword">int</span> X[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;; <span class="comment">//增量数组，表示上下左右位置</span></span><br><span class="line"><span class="keyword">int</span> Y[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="comment">//判断坐标是否需要访问，越界返回false</span></span><br><span class="line">    <span class="keyword">if</span>(x&gt;=n||x&lt;<span class="number">0</span>||y&gt;=m||y&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//是因为入队了，所以暂时不访问，当不在队中的时候还是得要访问</span></span><br><span class="line">    <span class="keyword">if</span>(matrix[x][y]==<span class="number">0</span>||inq[x][y]==<span class="literal">true</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; Q; <span class="comment">//定义队列</span></span><br><span class="line">    Node.x=x,Node.y=y; <span class="comment">//当前结点的坐标</span></span><br><span class="line">    Q.push(Node);  <span class="comment">//将节点入队，从队尾进的</span></span><br><span class="line">    inq[x][y]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!Q.empty())&#123;</span><br><span class="line">        node top=Q.front();  <span class="comment">//从队首取出元素</span></span><br><span class="line">        Q.pop(); <span class="comment">//取出就可以出栈了</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//循环四次得到四个相邻位置，只能标识已经入队，不能标识已经访问</span></span><br><span class="line">            <span class="keyword">int</span> newX=top.x+X[i];</span><br><span class="line">            <span class="keyword">int</span> newY=top.y+Y[i];</span><br><span class="line">            <span class="keyword">if</span>(judge(newX,newY))&#123;</span><br><span class="line">                <span class="comment">//设置Node的新坐标</span></span><br><span class="line">                Node.x=newX,Node.y=newY;</span><br><span class="line">                Q.push(Node);</span><br><span class="line">              <span class="comment">//广义遍历不用回溯走回头路，去过了就去过了</span></span><br><span class="line">                inq[newX][newY]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求出给定矩阵若干个相邻1构成的块个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;n;x++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>;y&lt;m;y++)&#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;matrix[x][y];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>; <span class="comment">//存放块数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;n;x++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>;y&lt;m;y++)&#123;</span><br><span class="line">                <span class="comment">//循环所有元素，若元素为1且未入队</span></span><br><span class="line">            <span class="keyword">if</span>(matrix[x][y]==<span class="number">1</span>&amp;&amp;inq[x][y]==<span class="literal">false</span>)&#123;</span><br><span class="line">                ans++;</span><br><span class="line">                BFS(x,y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="BFS得出玛雅人密码交换次数"><a href="#BFS得出玛雅人密码交换次数" class="headerlink" title="BFS得出玛雅人密码交换次数"></a>BFS得出玛雅人密码交换次数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">玛雅人密码-BFS该怎么想</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">该题目的思路就是：</span></span><br><span class="line"><span class="comment">    如何用队列广度优先遍历所有可能性（QUEUE） +</span></span><br><span class="line"><span class="comment">    如何判别并标示某串是否访问过（MAP） +</span></span><br><span class="line"><span class="comment">    如何记录某串已经交换字符的次数 +</span></span><br><span class="line"><span class="comment">    子串2012是否存在</span></span><br><span class="line"><span class="comment">    这几个问题如果解决了我想你肯定能写出来。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; mp; <span class="comment">//mp[str]表示str交换次数</span></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="built_in">string</span>&gt; q; <span class="comment">//队列用于BFS</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">swapStr</span><span class="params">(<span class="built_in">string</span> str,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="comment">//分布思想，交换写一个办法</span></span><br><span class="line">    <span class="built_in">string</span> newStr=str;</span><br><span class="line">    <span class="keyword">char</span> tmp=newStr[i];</span><br><span class="line">    newStr[i]=newStr[i+<span class="number">1</span>];</span><br><span class="line">    newStr[i+<span class="number">1</span>]=tmp;</span><br><span class="line">    <span class="keyword">return</span> newStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//再分步，判断是否含有2012</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="built_in">string</span> str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(str.<span class="built_in">find</span>(<span class="string">"2012"</span>,<span class="number">0</span>)==<span class="built_in">string</span>::npos) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//广度优先搜索特点，扩展，遍历所有结果</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">(<span class="built_in">string</span> str)</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> newStr;</span><br><span class="line">    mp.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">    q.push(str); <span class="comment">//直接将初始字符串作为起点放入队列</span></span><br><span class="line"></span><br><span class="line">    mp[str]=<span class="number">0</span>; <span class="comment">//初始交换次数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        str=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="comment">//终于知道为啥要用BFS了，因为交换第一次算作第一层，交换第二层算第二层</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            newStr=swapStr(str,i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">find</span>(newStr)==mp.<span class="built_in">end</span>())  <span class="comment">//表示这个字符串没有出现</span></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                mp[newStr]=mp[str]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(judge(newStr)) <span class="keyword">return</span> mp[newStr];</span><br><span class="line">                <span class="keyword">else</span> q.push(newStr);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">continue</span>;  <span class="comment">//出现过的不用处理</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">//遍历完成，没发现符合要求的字符串</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;str;</span><br><span class="line">        <span class="keyword">if</span>(judge(str)) <span class="built_in">printf</span>(<span class="string">"0\n"</span>);  <span class="comment">//一开始就符合要求</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> ans=BFS(str);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="广度优先-迷宫"><a href="#广度优先-迷宫" class="headerlink" title="广度优先-迷宫"></a>广度优先-迷宫</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line">. . . . .</span><br><span class="line">. * . * .</span><br><span class="line">. * S * .</span><br><span class="line">. * * * .</span><br><span class="line">. . . T *</span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">step</span>;</span><br><span class="line">    <span class="comment">//step是从起点S到达该位置的最少步数即层数</span></span><br><span class="line">&#125;S,T,Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> maze[maxn][maxn]; <span class="comment">//迷宫信息</span></span><br><span class="line"><span class="keyword">bool</span> inq[maxn][maxn]=&#123;<span class="literal">false</span>&#125;; <span class="comment">//记录位置(x,y)是否已经入过队</span></span><br><span class="line"><span class="keyword">int</span> X[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> Y[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=n||x&lt;<span class="number">0</span>||y&gt;=m||y&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(maze[x][y]==<span class="string">'*'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//墙壁或者已经入过队</span></span><br><span class="line">    <span class="keyword">if</span>(inq[x][y]==<span class="literal">true</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">    q.push(S);  <span class="comment">//将起点S入队</span></span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        node top=q.front(); <span class="comment">//取出队首元素</span></span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(top.x==T.x&amp;&amp;top.y==T.y)&#123;</span><br><span class="line">            <span class="keyword">return</span> top.<span class="built_in">step</span>;  <span class="comment">//终点直接返回最少步数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//检查4个相邻位置</span></span><br><span class="line">            <span class="keyword">int</span> newX=top.x+X[i];</span><br><span class="line">            <span class="keyword">int</span> newY=top.y+Y[i];</span><br><span class="line">            <span class="keyword">if</span>(test(newX,newY))&#123;</span><br><span class="line">                    <span class="comment">//相当于创建新点了</span></span><br><span class="line">                Node.x=newX,Node.y=newY;</span><br><span class="line">                Node.<span class="built_in">step</span>=top.<span class="built_in">step</span>+<span class="number">1</span>;</span><br><span class="line">                q.push(Node);</span><br><span class="line">                inq[newX][newY]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;maze[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;S.x&gt;&gt;S.y&gt;&gt;T.x&gt;&gt;T.y;</span><br><span class="line">        S.<span class="built_in">step</span>=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;BFS()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="走巨石掉落迷宫，高级版"><a href="#走巨石掉落迷宫，高级版" class="headerlink" title="走巨石掉落迷宫，高级版"></a>走巨石掉落迷宫，高级版</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">8</span>][<span class="number">9</span>];</span><br><span class="line"><span class="keyword">int</span> dx[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">   <span class="keyword">int</span> x, y;</span><br><span class="line">   <span class="keyword">int</span> <span class="built_in">step</span>;</span><br><span class="line">&#125;s, temp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= <span class="number">8</span> || x &lt; <span class="number">0</span> || y &gt;= <span class="number">8</span> || y &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    s.x = <span class="number">7</span>;</span><br><span class="line">    s.y = <span class="number">0</span>;</span><br><span class="line">    s.<span class="built_in">step</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt;q;</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        s = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">9</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp.x = s.x + dx[i];</span><br><span class="line">            temp.y = s.y + dy[i];</span><br><span class="line">            temp.<span class="built_in">step</span> = s.<span class="built_in">step</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">/*因为我们记下来所走的步数为step，所以判断点a[temp.x-temp.step+1][temp.y]是否为石头即可知道所走的下一步是否为石头</span></span><br><span class="line"><span class="comment">            点a[temp.x-temp.step][temp.y]即为所走点的上面是否为石头*/</span></span><br><span class="line">            <span class="keyword">if</span>(check(temp.x, temp.y) &amp;&amp; a[temp.x-temp.<span class="built_in">step</span>][temp.y] != <span class="string">'S'</span> &amp;&amp; a[temp.x-temp.<span class="built_in">step</span>+<span class="number">1</span>][temp.y] != <span class="string">'S'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//用判断是否走满了八步来代替判重</span></span><br><span class="line">                <span class="keyword">if</span>(a[temp.x][temp.y] == <span class="string">'A'</span> || temp.<span class="built_in">step</span> &gt; <span class="number">8</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">return</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">                q.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, i, j, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    k = <span class="number">1</span>;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">             <span class="built_in">scanf</span>(<span class="string">"%s"</span>, a[i]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        bfs();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>, k);</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">         k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="求方程解，多重循环处理"><a href="#求方程解，多重循环处理" class="headerlink" title="求方程解，多重循环处理"></a>求方程解，多重循环处理</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//著名的八皇后问题</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//果然是逻辑关系没有理顺，要代入数学知识的！！</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n/<span class="number">5</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=(n-i*<span class="number">5</span>)/<span class="number">3</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=(n-i*<span class="number">5</span>-j*<span class="number">3</span>)/(<span class="number">1.0</span>/<span class="number">3.0</span>);k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i+k+j==<span class="number">100</span>)</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"x=%d,y=%d,z=%d\n"</span>,i,j,k);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//大佬的输入处理和轻描淡写的循环</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>],b[<span class="number">3</span>][<span class="number">2</span>],c[<span class="number">2</span>][<span class="number">2</span>],n;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">	&#123;</span><br><span class="line">		a[<span class="number">0</span>][<span class="number">0</span>]=n;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">				<span class="keyword">if</span>(i!=<span class="number">0</span>||j!=<span class="number">0</span>)</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i][j]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)</span><br><span class="line">			&#123;</span><br><span class="line">              <span class="comment">//此处的直接处理怎么想不到呢</span></span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i][<span class="number">0</span>]*b[<span class="number">0</span>][j]+a[i][<span class="number">1</span>]*b[<span class="number">1</span>][j]+a[i][<span class="number">2</span>]*b[<span class="number">2</span>][j]);</span><br><span class="line">				<span class="keyword">if</span>(j!=<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">				<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以下是我总结出来的规律，计算矩阵成绩的办法，要加入一层循环用来计算</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>],b[<span class="number">3</span>][<span class="number">2</span>],c[<span class="number">2</span>][<span class="number">2</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> a1,a2,a3;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a1&gt;&gt;a2&gt;&gt;a3)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">        a[<span class="number">0</span>][<span class="number">0</span>]=a1;</span><br><span class="line">        a[<span class="number">0</span>][<span class="number">1</span>]=a2;</span><br><span class="line">        a[<span class="number">0</span>][<span class="number">2</span>]=a3;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)&#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;b[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;<span class="number">2</span>;m++)&#123;</span><br><span class="line">                        <span class="comment">//最关键的在这里，m次表示一行分别乘以两列，而j则值控制每列乘以的次数</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">                    c[i][m]=c[i][m]+a[i][j]*b[j][m];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;c[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="分数矩阵乘法，简单版和复杂版"><a href="#分数矩阵乘法，简单版和复杂版" class="headerlink" title="分数矩阵乘法，简单版和复杂版"></a>分数矩阵乘法，简单版和复杂版</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1/1 1/2 1/3</span></span><br><span class="line"><span class="comment">1/2 1/1 1/2</span></span><br><span class="line"><span class="comment">1/3 1/2 1/1</span></span><br><span class="line"><span class="comment">矩阵对角线上的元素始终是1/1，对角线两边分数的分母逐个递增。</span></span><br><span class="line"><span class="comment">请求出这个矩阵的总和。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//充分利用对称性！！</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(n==<span class="number">0</span>)	<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">double</span> sum=<span class="number">0.0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">2</span>;i--)</span><br><span class="line">          <span class="comment">//这里很关键，只需要计算有几种分数相乘即可</span></span><br><span class="line">			sum+=<span class="number">1.0</span>/i*(n-i+<span class="number">1</span>)*<span class="number">2</span>;</span><br><span class="line">		sum+=n*<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>,sum);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找规律的办法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;N)&#123;</span><br><span class="line">        <span class="keyword">if</span>(N==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">double</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">double</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">                ans=ans+(<span class="number">1.0</span>/(<span class="number">1.0</span>+i-j));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">double</span> j=i+<span class="number">1</span>;j&lt;=N;j++)&#123;</span><br><span class="line">                ans=ans+(<span class="number">1.0</span>/(<span class="number">1.0</span>+j-i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="贪心算法，求代理服务器访问IP方法"><a href="#贪心算法，求代理服务器访问IP方法" class="headerlink" title="贪心算法，求代理服务器访问IP方法"></a>贪心算法，求代理服务器访问IP方法</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">基本贪心思想，要访问的全部server列表及顺序已经给定</span></span><br><span class="line"><span class="comment">并且***ip可以多次重复选择，每次选择能访问最远的ip地址进行访问</span></span><br><span class="line"><span class="comment">再从断点开始换下一个能访问最远的ip</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="built_in">string</span> ip[<span class="number">1005</span>];</span><br><span class="line">        <span class="built_in">string</span> server[<span class="number">5005</span>];</span><br><span class="line">        <span class="keyword">int</span> i,j,m;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;ip[i];</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;server[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断输出-1的情况</span></span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">           <span class="keyword">int</span> feasible=<span class="number">1</span>;</span><br><span class="line">           <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ip[<span class="number">0</span>]==server[i])</span><br><span class="line">                    feasible=<span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//遍历全部server,看唯一的ip是否在其中</span></span><br><span class="line">           <span class="keyword">if</span>(feasible)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">           <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>,start=<span class="number">0</span>,maxn=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//贪心的关键</span></span><br><span class="line">        <span class="keyword">while</span>(start!=m)&#123;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(j=start;j&lt;m;j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(ip[i]==server[j])</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//该循环结束后，如果j==m,则说明走通，否则表明最远可走到server[j]</span></span><br><span class="line">                <span class="keyword">if</span>(j&gt;maxn)</span><br><span class="line">                    maxn=j;</span><br><span class="line">            &#125;</span><br><span class="line">            start=maxn;</span><br><span class="line">            <span class="comment">//找到并记录所有ip中最远能走到的server,下次从这里开始</span></span><br><span class="line">            cnt++;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;cnt<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="大数专题"><a href="#大数专题" class="headerlink" title="大数专题"></a>大数专题</h2><h3 id="字符加减关系，实现任意长度整数相加"><a href="#字符加减关系，实现任意长度整数相加" class="headerlink" title="字符加减关系，实现任意长度整数相加"></a>字符加减关系，实现任意长度整数相加</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">Addition</span><span class="params">(<span class="built_in">string</span> one, <span class="built_in">string</span> two)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="built_in">string</span> first, second;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please enter two numbers: "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; first &gt;&gt; second;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The result is: "</span> &lt;&lt; Addition(first, second) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//return 0;</span></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">Addition</span><span class="params">(<span class="built_in">string</span> one, <span class="built_in">string</span> two)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j, <span class="built_in">max</span>;</span><br><span class="line">    <span class="comment">//分别表示第一，二个字符串的长度</span></span><br><span class="line">    <span class="keyword">int</span> flen, slen;</span><br><span class="line">    <span class="built_in">string</span> sum;</span><br><span class="line">    flen = one.<span class="built_in">size</span>();</span><br><span class="line">    slen = two.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span>(flen &gt;= slen)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = one;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;slen;j++)</span><br><span class="line">            sum[flen-j<span class="number">-1</span>] = sum[flen-j<span class="number">-1</span>] + two[slen-j<span class="number">-1</span>] - <span class="string">'0'</span>;</span><br><span class="line">        <span class="built_in">max</span> = flen;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        sum = two;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;flen;j++)</span><br><span class="line">            sum[slen-j<span class="number">-1</span>] = sum[slen-j<span class="number">-1</span>] + one[flen-j<span class="number">-1</span>] - <span class="string">'0'</span>;</span><br><span class="line">        <span class="built_in">max</span> = slen;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果第j位的数大于9，则将其减10，并向上一位进一</span></span><br><span class="line">    <span class="keyword">for</span>(j=<span class="built_in">max</span><span class="number">-1</span>;j&gt;=<span class="number">1</span>;j--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(sum[j] &gt; <span class="string">'9'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum[j] -= <span class="number">10</span>;</span><br><span class="line">            sum[j<span class="number">-1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum[<span class="number">0</span>] &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sum[<span class="number">0</span>] -= <span class="number">10</span>;</span><br><span class="line">        sum = <span class="string">"1"</span> + sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="大数加法，进阶转换版"><a href="#大数加法，进阶转换版" class="headerlink" title="大数加法，进阶转换版"></a>大数加法，进阶转换版</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bign</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> d[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    bign()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line">        len=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">bign <span class="title">change</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bign a;</span><br><span class="line">    a.len=s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.len;i++)</span><br><span class="line">    <span class="comment">//将字符换成整型</span></span><br><span class="line">    &#123;</span><br><span class="line">        a.d[i]=s[a.len-i<span class="number">-1</span>]-<span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">bign <span class="title">add</span><span class="params">(bign a,bign b)</span></span>&#123;</span><br><span class="line">    bign c;</span><br><span class="line">    <span class="keyword">int</span> carry=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//这里漏掉了i导致循环出错</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.len||i&lt;b.len;i++)&#123;</span><br><span class="line">        <span class="comment">//还是转换成整数来计算更保险</span></span><br><span class="line">        <span class="keyword">int</span> temp=a.d[i]+b.d[i]+carry;</span><br><span class="line">        c.d[c.len++]=temp%<span class="number">10</span>;</span><br><span class="line">        carry=temp/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对于最后一个carry的处理！！我的分情况处理太low了</span></span><br><span class="line">    <span class="keyword">if</span>(carry!=<span class="number">0</span>)</span><br><span class="line">        c.d[c.len++]=carry;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str1,str2;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str1&gt;&gt;str2)&#123;</span><br><span class="line">        bign a=change(str1);</span><br><span class="line">        bign b=change(str2);</span><br><span class="line">        bign c=add(a,b);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=c.len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;c.d[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="大数浮点数加法"><a href="#大数浮点数加法" class="headerlink" title="大数浮点数加法"></a>大数浮点数加法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bign</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> d[<span class="number">110</span>];</span><br><span class="line">	<span class="keyword">int</span> len;</span><br><span class="line">	bign()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line">		len=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;big[<span class="number">110</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">char</span> s[],bign &amp;a,bign &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len=<span class="built_in">strlen</span>(s),len1=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(s[i]==<span class="string">'.'</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			len1++;</span><br><span class="line">	&#125;</span><br><span class="line">	a.len=len1;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=len1<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">		a.d[len1<span class="number">-1</span>-i]=s[i]-<span class="string">'0'</span>;</span><br><span class="line">	b.len=len-len1<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=len1+<span class="number">1</span>;i&lt;len;i++)</span><br><span class="line">		b.d[i-len1<span class="number">-1</span>]=s[i]-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trans</span><span class="params">(bign &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> s[<span class="number">110</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.len;i++)</span><br><span class="line">		s[i]=a.d[a.len<span class="number">-1</span>-i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.len;i++)</span><br><span class="line">		a.d[i]=s[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add1</span><span class="params">(bign a,bign b,bign &amp;c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> carry=<span class="number">0</span>,temp;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=((a.len<span class="number">-1</span>)&gt;(b.len<span class="number">-1</span>)?(a.len<span class="number">-1</span>):(b.len<span class="number">-1</span>));i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		temp=a.d[i]+b.d[i]+carry;</span><br><span class="line">		c.d[c.len++]=temp%<span class="number">10</span>;</span><br><span class="line">		carry=temp/<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	trans(c);</span><br><span class="line">	<span class="keyword">while</span>(c.d[c.len<span class="number">-1</span>]==<span class="number">0</span>&amp;&amp;c.len&gt;=<span class="number">2</span>)</span><br><span class="line">		c.len--;</span><br><span class="line">	<span class="keyword">return</span> carry;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add2</span><span class="params">(bign a,bign b,bign &amp;c,<span class="keyword">int</span> carry)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.len||i&lt;b.len;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		temp=a.d[i]+b.d[i]+carry;</span><br><span class="line">		c.d[c.len++]=temp%<span class="number">10</span>;</span><br><span class="line">		carry=temp/<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(carry!=<span class="number">0</span>)</span><br><span class="line">		c.d[c.len++]=carry;</span><br><span class="line">	<span class="keyword">while</span>(c.d[c.len<span class="number">-1</span>]==<span class="number">0</span>&amp;&amp;c.len&gt;=<span class="number">2</span>)</span><br><span class="line">		c.len--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> a[<span class="number">110</span>],b[<span class="number">110</span>];</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			bign a1,b1,c1,d1,e,f;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%s"</span>,a);</span><br><span class="line">			change(a,a1,b1);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%s"</span>,b);</span><br><span class="line">			change(b,c1,d1);</span><br><span class="line">			<span class="keyword">int</span> carry=add1(b1,d1,f);</span><br><span class="line">			add2(a1,c1,e,carry);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=e.len<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%d"</span>,e.d[j]);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"."</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;f.len;j++)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%d"</span>,f.d[j]);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">			getchar();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="大数运算之阶乘"><a href="#大数运算之阶乘" class="headerlink" title="大数运算之阶乘"></a>大数运算之阶乘</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目描述</span></span><br><span class="line"><span class="comment">输入一个正整数N，输出N的阶乘。</span></span><br><span class="line"><span class="comment">输入描述:</span></span><br><span class="line"><span class="comment">正整数N(0&lt;=N&lt;=1000)</span></span><br><span class="line"><span class="comment">输出描述:</span></span><br><span class="line"><span class="comment">输入可能包括多组数据，对于每一组输入数据，输出N的阶乘</span></span><br><span class="line"><span class="comment">示例1</span></span><br><span class="line"><span class="comment">输入</span></span><br><span class="line"><span class="comment">n的阶乘简单写法，王道机试写得太复杂</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">5000</span>;</span><br><span class="line"><span class="keyword">int</span> str[maxx];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cal</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;maxx; i++)str[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//阶乘的初值赋值1，c是进位，由于改成数组装，所以进位加到下一位</span></span><br><span class="line">    str[<span class="number">1</span>] = <span class="number">1</span>; <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">1</span>, c = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//用len来确定结果有几位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= len; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//终于懂了！！，没问题24*23可以拆成20*23+4*23而这个20的0可以去掉，因为用位置来表示了10进制</span></span><br><span class="line">            str[j] = str[j] * i + c;</span><br><span class="line">            c = str[j] / <span class="number">10</span>;</span><br><span class="line">            str[j] = str[j] % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (c&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;   <span class="comment">//此时的j已经到len+1了。新开辟的一个点，要不停的往前放</span></span><br><span class="line">            str[j] = c % <span class="number">10</span>;</span><br><span class="line">            j++;</span><br><span class="line">            c /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//j就是当前最远的一位的位置</span></span><br><span class="line">        len = j - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//然后从逆开始输出！！，终于看懂了</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = len; j &gt;= <span class="number">1</span>; j--)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; str[j];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> Cal(n);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//阶乘新写法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt[<span class="number">1001</span>];</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">1</span>;</span><br><span class="line">        cnt[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> carry=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">                cnt[j]=cnt[j]*i+carry;</span><br><span class="line">                <span class="comment">//终于知道问题了！！顺序不大对，cnt[j]先变了！！</span></span><br><span class="line">                carry=cnt[j]/<span class="number">10</span>;</span><br><span class="line">                cnt[j]=cnt[j]%<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(carry!=<span class="number">0</span>)&#123;</span><br><span class="line">             <span class="keyword">while</span>(carry!=<span class="number">0</span>)&#123;</span><br><span class="line">                cnt[len]=carry%<span class="number">10</span>;</span><br><span class="line">                carry=carry/<span class="number">10</span>;</span><br><span class="line">                len++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;cnt[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="-2"><a href="#-2" class="headerlink" title=" "></a> </h2><h2 id="图专题"><a href="#图专题" class="headerlink" title="图专题"></a>图专题</h2><h3 id="并查集，寻找父节点，合并模板"><a href="#并查集，寻找父节点，合并模板" class="headerlink" title="并查集，寻找父节点，合并模板"></a>并查集，寻找父节点，合并模板</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这题有个小坑，当然也不算是坑，就是，看起来是求并查集的没错，但是额外附加了一个条件，单个端点只接收一次消息，所以，不能有环出现，排除也很简单，根据树的边数为n-1定则，而且要所有端点必须为同一集合，那么M必须等于N-1，否则，</span></span><br><span class="line"><span class="comment">所有端点无法连通，或出现环，so~题目就简单啦~~</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//通信系统，要求所有结点都能收到发端消息且不重复</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> father[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=a;</span><br><span class="line">    <span class="keyword">while</span>(x!=father[x])&#123;</span><br><span class="line">        x=father[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(a!=father[a])&#123;</span><br><span class="line">        <span class="keyword">int</span> z=a;</span><br><span class="line">        a=father[a];</span><br><span class="line">        father[z]=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        father[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> A=findFather(a);</span><br><span class="line">    <span class="keyword">int</span> B=findFather(b);</span><br><span class="line">    <span class="keyword">if</span>(A!=B)&#123;</span><br><span class="line">        father[A]=B;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k,a,b;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        init(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">            Union(a,b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(father[i]==i)</span><br><span class="line">                ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//边只能有n-1条时才不会有环！！</span></span><br><span class="line">        <span class="keyword">if</span>(ans==<span class="number">1</span>&amp;&amp;k==n<span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Yes"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"No"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="图的遍历DFS邻接矩阵和邻接表法"><a href="#图的遍历DFS邻接矩阵和邻接表法" class="headerlink" title="图的遍历DFS邻接矩阵和邻接表法"></a>图的遍历DFS邻接矩阵和邻接表法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给定一个无向图和所有边，判断这个图是否所有顶点都是联通的</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">bool</span> G[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> flag[maxn]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="comment">//n是点数，m是边数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    flag[x]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="comment">//由于是无向边true表示可达</span></span><br><span class="line">        <span class="keyword">if</span>(flag[i]==<span class="literal">false</span>&amp;&amp;G[x][i]==<span class="literal">true</span>)&#123;</span><br><span class="line">            G[x][i]=<span class="literal">false</span>;</span><br><span class="line">            G[i][x]=<span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//上面这个操作是为了提前清除已经访问边，这样就可以 不用下一组初始化</span></span><br><span class="line">            DFS(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,d1,d2;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;d1&gt;&gt;d2;</span><br><span class="line">            <span class="keyword">if</span>(G[d1][d2]==<span class="literal">false</span>)</span><br><span class="line">                G[d1][d2]=G[d2][d1]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> number=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span>(flag));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(flag[i]==<span class="literal">false</span>)&#123;</span><br><span class="line">                number++;</span><br><span class="line">                DFS(i);     </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(number==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//邻接矩阵法，其实就要最后的连通块只有一个，有点类似并查集！！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//邻接表法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1010</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Adj[maxn];</span><br><span class="line"><span class="keyword">bool</span> flag[maxn]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    flag[x]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Adj[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=Adj[x][i];</span><br><span class="line">        <span class="comment">//x的后继点！！</span></span><br><span class="line">        <span class="keyword">if</span>(flag[u]==<span class="literal">false</span>)&#123;</span><br><span class="line">            DFS(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//清空，这样不用初始化为空</span></span><br><span class="line">    Adj[x].<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,d1,d2;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;d1&gt;&gt;d2;</span><br><span class="line">            Adj[d1].push_back(d2);</span><br><span class="line">            Adj[d2].push_back(d1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> number=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span>(flag));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(flag[i]==<span class="literal">false</span>)&#123;</span><br><span class="line">                number++;</span><br><span class="line">                DFS(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(number==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="迪杰特斯拉求最短路径长度-从某点到另一点的路径"><a href="#迪杰特斯拉求最短路径长度-从某点到另一点的路径" class="headerlink" title="迪杰特斯拉求最短路径长度+从某点到另一点的路径"></a>迪杰特斯拉求最短路径长度+从某点到另一点的路径</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span> <span class="number">8</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">0</span> <span class="number">4</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">5</span> <span class="number">3</span> <span class="number">4</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//迪杰特斯拉最短路劲</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXV=<span class="number">1000</span>; <span class="comment">//最大顶点数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1000000000</span>; <span class="comment">//设置一个很大值表示不可达</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,s,G[MAXV][MAXV]; <span class="comment">//n为顶点数，m为边数，s为起点</span></span><br><span class="line"><span class="keyword">int</span> d[MAXV]; <span class="comment">//起点到各点的最短路径长度</span></span><br><span class="line"><span class="keyword">int</span> pre[MAXV];  <span class="comment">//prev【v】表示从起点到顶点v的最短路径上v的前一个顶点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[MAXV]=&#123;<span class="literal">false</span>&#125;;  <span class="comment">//标记数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="built_in">fill</span>(d,d+MAXV,INF);  <span class="comment">//s到所有点先设置成不可达</span></span><br><span class="line">    d[s]=<span class="number">0</span>; <span class="comment">//这个也很关键，s一开始到自己为0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=<span class="number">-1</span>,MIN=INF; <span class="comment">//找到使d[u]最小的u,MIn存放最小的d[u]</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="comment">//第一轮自由一个d[s]=0,之后每轮d[u]都是更新的！！</span></span><br><span class="line">            <span class="keyword">if</span>(vis[j]==<span class="literal">false</span>&amp;&amp;d[j]&lt;MIN)&#123;</span><br><span class="line">                u=j;</span><br><span class="line">                MIN=d[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(u==<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//找不到小于INF的d[u]说明剩下的顶点和起点s不连通</span></span><br><span class="line">        vis[u]=<span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//找到了标记成已访问</span></span><br><span class="line">        <span class="comment">//从u出发能到达的下一个点，这样每次相当于都知道了下一轮要访问的点的距离</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;n;v++)&#123;</span><br><span class="line">            <span class="comment">//如果v未访问&amp;&amp;u能到达v&amp;&amp;以u为中介点，可以使d[v]更优</span></span><br><span class="line">            <span class="keyword">if</span>(vis[v]==<span class="literal">false</span>&amp;&amp;G[u][v]!=INF&amp;&amp;d[u]+G[u][v]&lt;d[v])&#123;</span><br><span class="line">                d[v]=d[u]+G[u][v];</span><br><span class="line">                <span class="comment">//优化d[v]</span></span><br><span class="line">                pre[v]=u;</span><br><span class="line">                <span class="comment">//记录前驱顶点是u</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如何使用递归，根据前驱顶点，求最短路径</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="comment">//s为起点编号，v为当前访问的顶点编号，要从重点开始递归，这样才能从头输出</span></span><br><span class="line">    <span class="keyword">if</span>(v==s)&#123;</span><br><span class="line">        <span class="comment">//递归重点，就是达到起点</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,s);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    DFS(s,pre[v]);  <span class="comment">//递归访问v的前驱顶点pre[v]</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,v); <span class="comment">//从最深return回来之后再输出每一层</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u,v,w;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;s;</span><br><span class="line">    <span class="comment">//顶点个数，边数，起点编号</span></span><br><span class="line">    <span class="built_in">fill</span>(G[<span class="number">0</span>],G[<span class="number">0</span>]+MAXV*MAXV,INF);</span><br><span class="line">    <span class="comment">//对于矩阵如何初始化，学到了</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        G[u][v]=w;</span><br><span class="line">        <span class="comment">//输入u，v以及u-&gt;v的边权，有向图</span></span><br><span class="line">    &#125;</span><br><span class="line">    Dijkstra(s);</span><br><span class="line">    <span class="comment">//直接算法入口</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="comment">//输出s到所有顶点的最短距离</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,d[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    DFS(<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="优先队列实现地杰斯特拉"><a href="#优先队列实现地杰斯特拉" class="headerlink" title="优先队列实现地杰斯特拉"></a>优先队列实现地杰斯特拉</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">60</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3fffffff</span>;</span><br><span class="line"><span class="keyword">int</span> G[maxn][maxn],n,d[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v,dis;</span><br><span class="line">    <span class="comment">//这是有点队列所需要的！！</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp;a)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dis&gt;a.dis;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//结构定义</span></span><br><span class="line">    Node(<span class="keyword">int</span> x,<span class="keyword">int</span> y)&#123;</span><br><span class="line">        v=x;</span><br><span class="line">        dis=y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="built_in">fill</span>(d,d+maxn,INF);</span><br><span class="line">    d[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//使用优先队列查找未访问的距离最短结点</span></span><br><span class="line">    priority_queue&lt;Node&gt; q;</span><br><span class="line">    q.push(Node(s,d[s]));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(q.empty()==<span class="literal">true</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">while</span>(vis[q.top().v]==<span class="literal">true</span>)&#123;</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">if</span>(q.empty()==<span class="literal">true</span>) <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> u=q.top().v;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;n;v++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(G[u][v]!=<span class="number">0</span>&amp;&amp;vis[v]==<span class="literal">false</span>&amp;&amp;d[u]+G[u][v]&lt;d[v])&#123;</span><br><span class="line">                d[v]=d[u]+G[u][v];</span><br><span class="line">                q.push(Node(v,d[v]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;G[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Dijkstra(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i!=s)&#123;</span><br><span class="line">                <span class="keyword">if</span>(d[i]==INF)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"-1 "</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d "</span>,d[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="prim最小生成树算法"><a href="#prim最小生成树算法" class="headerlink" title="prim最小生成树算法"></a>prim最小生成树算法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3fffffff</span>;</span><br><span class="line"><span class="keyword">int</span> G[maxn][maxn],d[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fill</span>(d,d+maxn,INF);</span><br><span class="line">	<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">	d[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> <span class="built_in">min</span>=INF,u=<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(d[j]&lt;<span class="built_in">min</span>&amp;&amp;vis[j]==<span class="literal">false</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				u=j;</span><br><span class="line">				<span class="built_in">min</span>=d[j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">      <span class="comment">//终于知道-1的作用，表示存在没有联通的地方！！</span></span><br><span class="line">		<span class="keyword">if</span>(u==<span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		vis[u]=<span class="literal">true</span>;</span><br><span class="line">		ans+=d[u];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">1</span>;v&lt;=n;++v)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(vis[v]==<span class="literal">false</span>&amp;&amp;G[u][v]!=INF&amp;&amp;G[u][v]&lt;d[v])</span><br><span class="line">			&#123;</span><br><span class="line">				d[v]=G[u][v];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> w,u,v;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="built_in">fill</span>(G[<span class="number">0</span>],G[<span class="number">0</span>]+maxn*maxn,INF);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n*(n<span class="number">-1</span>)/<span class="number">2</span>;++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">			G[u][v]=G[v][u]=w;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=prim();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="并查集-最小生成树"><a href="#并查集-最小生成树" class="headerlink" title="并查集+最小生成树"></a>并查集+最小生成树</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 101</span></span><br><span class="line"><span class="keyword">int</span> Tree[N];</span><br><span class="line"><span class="comment">//关键算法，找到爸爸节结点的标号</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRoot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="comment">//查找代表集合的树的根节点，分成两个集合，以此来判断是否要合并两点到一个集合</span></span><br><span class="line">    <span class="keyword">if</span>(Tree[x]==<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//当Tree[x]=1时，表示x爸爸是1，Tree[1]=-1,return Tree[x]=1是一个整体！！</span></span><br><span class="line">        <span class="keyword">int</span> tmp=findRoot(Tree[x]);</span><br><span class="line">        <span class="comment">//找x的爸爸，递归</span></span><br><span class="line">        Tree[x]=tmp;</span><br><span class="line">        <span class="comment">//tmp确实是x的爸爸，爸爸存了</span></span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="comment">//边要有结构体，来进行排序</span></span><br><span class="line"><span class="keyword">int</span> a,b;<span class="comment">//顶点编号</span></span><br><span class="line"><span class="keyword">int</span> cost;</span><br><span class="line"><span class="comment">//重载小于运算符很关键！！</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Edge &amp;A) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cost&lt;A.cost;</span><br><span class="line">&#125;edge[<span class="number">6000</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n*(n<span class="number">-1</span>)/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;edge[i].a&gt;&gt;edge[i].b&gt;&gt;edge[i].cost;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(edge+<span class="number">1</span>,edge+<span class="number">1</span>+n*(n<span class="number">-1</span>)/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            Tree[i]=<span class="number">-1</span>;</span><br><span class="line">            <span class="comment">//初始所有边都处于孤立集合</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n*(n<span class="number">-1</span>)/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> a=findRoot(edge[i].a);</span><br><span class="line">            <span class="keyword">int</span> b=findRoot(edge[i].b);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//查找两个顶点的集合信息</span></span><br><span class="line">            <span class="keyword">if</span>(a!=b)&#123;</span><br><span class="line">                Tree[b]=a;</span><br><span class="line">                <span class="comment">//合并两个集合，加入了一个边</span></span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">" "</span>&lt;&lt;b&lt;&lt;<span class="string">" "</span>&lt;&lt;edge[i].cost&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                ans=ans+edge[i].cost;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="克鲁斯卡尔最小生成树"><a href="#克鲁斯卡尔最小生成树" class="headerlink" title="克鲁斯卡尔最小生成树"></a>克鲁斯卡尔最小生成树</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span> <span class="number">10</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">0</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">6</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">4</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//克鲁斯卡尔最小生成树算法</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;32/bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXV=<span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXE=<span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v;  <span class="comment">//边的两个端点编号</span></span><br><span class="line">    <span class="keyword">int</span> cost; <span class="comment">//边权</span></span><br><span class="line">&#125;E[MAXE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a,edge b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.cost&lt;b.cost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//并查集部分</span></span><br><span class="line"><span class="keyword">int</span> father[MAXV]; <span class="comment">//并查集数组</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="comment">//并查集查询函数</span></span><br><span class="line">    <span class="keyword">int</span> a=x;</span><br><span class="line">    <span class="keyword">while</span>(x!=father[x])&#123;</span><br><span class="line">        x=father[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//路径要锁，直接得到每个点的爸爸</span></span><br><span class="line">    <span class="keyword">while</span>(a!=father[a])&#123;</span><br><span class="line">        <span class="keyword">int</span> z=a;</span><br><span class="line">        a=father[a];</span><br><span class="line">        father[z]=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//n为顶点个数，m为图的边数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="comment">//ans为所求边权和，Num_Edge为当前生成树的边数</span></span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>,Num_Edge=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        father[i]=i;  <span class="comment">//并查集初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">    sort(E,E+m,cmp);  <span class="comment">//所有边按权值大小排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;E[i].v&lt;&lt;<span class="string">" "</span>&lt;&lt;E[i].u&lt;&lt;<span class="string">" "</span>&lt;&lt;E[i].cost&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"路径："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="comment">//枚举所有边</span></span><br><span class="line">        <span class="keyword">int</span> faU=findFather(E[i].u);  <span class="comment">//查询测试边两个端点所在集合根结点</span></span><br><span class="line">        <span class="keyword">int</span> faV=findFather(E[i].v);</span><br><span class="line"><span class="comment">//这就是合并了</span></span><br><span class="line">        <span class="keyword">if</span>(faU!=faV)&#123;</span><br><span class="line">            <span class="comment">//只有不在同一个集合才可以合并</span></span><br><span class="line"></span><br><span class="line">            father[faU]=faV;</span><br><span class="line">            ans+=E[i].cost;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;E[i].v&lt;&lt;<span class="string">"-&gt;"</span>&lt;&lt;E[i].u&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            Num_Edge++; <span class="comment">//当前生成树边数加1</span></span><br><span class="line">            <span class="keyword">if</span>(Num_Edge==n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//边数等于顶点数减一时结束算法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Num_Edge!=n<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//无法连通时返回-1</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ans; <span class="comment">//返回最小生成树的边权之和</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;  <span class="comment">//顶点数和边数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;E[i].u&gt;&gt;E[i].v&gt;&gt;E[i].cost;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=kruskal(n,m);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="动态规划专题"><a href="#动态规划专题" class="headerlink" title="动态规划专题"></a>动态规划专题</h2><h3 id="最大连续子序列求和"><a href="#最大连续子序列求和" class="headerlink" title="最大连续子序列求和"></a>最大连续子序列求和</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//最大连续子序列和,最简单基础班</span></span><br><span class="line"><span class="comment">//状态转移方程 dp[i]=max&#123;A[i],dp[i-1]+A[i]&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10010</span>;</span><br><span class="line"><span class="keyword">int</span> A[maxn],dp[maxn];  <span class="comment">//A[i]存放序列，dp[i]存放以A[i]为结尾的联系序列最大和</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;A[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//确定边界,相当于就是本身就是最大和</span></span><br><span class="line">        dp[<span class="number">0</span>]=A[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//是从i=1开始的，这是递推，而不是递归</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            dp[i]=<span class="built_in">max</span>(A[i],dp[i<span class="number">-1</span>]+A[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//dp[i]存放所有以A[i]为结尾的序列最大和，还需要比较最大值</span></span><br><span class="line">        <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//如何找最大值，排序也可，此处选择比较！！，值得学习</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i]&gt;dp[k]) k=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dp[k] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最大连续子序列和进阶版！！还要输出序列的头和尾</span></span><br><span class="line"><span class="comment">//状态转移方程 dp[i]=max&#123;A[i],dp[i-1]+A[i]&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10010</span>;</span><br><span class="line"><span class="keyword">int</span> A[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> start,<span class="built_in">end</span>,sum;</span><br><span class="line">&#125;dp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,data;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;A[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//确定边界,相当于就是本身就是最大和</span></span><br><span class="line">        dp[<span class="number">0</span>].sum=A[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>].start=dp[<span class="number">0</span>].<span class="built_in">end</span>=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//是从i=1开始的，这是递推，而不是递归</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">                <span class="comment">//把max函数拆解后的结果</span></span><br><span class="line">            <span class="keyword">if</span>(A[i]&gt;dp[i<span class="number">-1</span>].sum+A[i])&#123;</span><br><span class="line">                dp[i].start=dp[i].<span class="built_in">end</span>=i;</span><br><span class="line">                dp[i].sum=A[i];</span><br><span class="line">                <span class="comment">//就是自身了</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                dp[i].sum=A[i]+dp[i<span class="number">-1</span>].sum;</span><br><span class="line">                dp[i].start=dp[i<span class="number">-1</span>].start;</span><br><span class="line">                dp[i].<span class="built_in">end</span>=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//dp[i]存放所有以A[i]为结尾的序列最大和，还需要比较最大值</span></span><br><span class="line">        <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//如何找最大值，排序也可，此处选择比较！！，值得学习</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i].sum&gt;dp[k].sum) k=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dp[k].sum&lt;<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"0 %d %d\n"</span>,A[<span class="number">0</span>],A[n<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,dp[k].sum,A[dp[k].start],A[dp[k].<span class="built_in">end</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法二：很巧妙</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,i;</span><br><span class="line">    <span class="comment">//freopen("input.txt","r",stdin);</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">long</span> sum=<span class="number">0</span>,Max=<span class="number">-999999999</span>,x;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%ld"</span>,&amp;x);</span><br><span class="line">            sum=<span class="built_in">max</span>(sum+x,x);</span><br><span class="line">            Max=<span class="built_in">max</span>(Max,sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,Max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最大加权子矩阵-矩阵压缩"><a href="#最大加权子矩阵-矩阵压缩" class="headerlink" title="最大加权子矩阵-矩阵压缩"></a>最大加权子矩阵-矩阵压缩</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//最大加权矩形变形，只需要矩阵的和大于k来求矩阵的面积！！</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 150</span></span><br><span class="line"><span class="keyword">int</span> n,m,t;</span><br><span class="line"><span class="keyword">int</span> matrix[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">-21000000</span>;</span><br><span class="line"><span class="keyword">int</span> temp[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Arrsum</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        dp[i]=<span class="built_in">max</span>(dp[i],dp[i<span class="number">-1</span>]+temp[i]);</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,dp[i]);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MatrixSum</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(temp,<span class="number">0</span>,<span class="keyword">sizeof</span>(temp));</span><br><span class="line">        <span class="comment">//这个压缩是所有行分级压缩！！</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//temp是每一列的和</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line">                temp[k]=temp[k]+matrix[j][k];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//计算行中最大</span></span><br><span class="line">            Arrsum();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;matrix[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    MatrixSum();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最长不下降子序列"><a href="#最长不下降子序列" class="headerlink" title="最长不下降子序列"></a>最长不下降子序列</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//最长不下降子序列,此处不要求连续，只要求是递增，间隔也可,因而双循环</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> A[N],dp[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">cin</span>&gt;&gt;A[i];</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">-1</span>;  <span class="comment">//记录最大的dp[i]</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            dp[i]=<span class="number">1</span>;  <span class="comment">//边界初始条件，先假设每个元素自成一格子序列</span></span><br><span class="line">            <span class="comment">//i是最后一个点，就是边界</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(A[i]&gt;=A[j]&amp;&amp;(dp[j]+<span class="number">1</span>&gt;dp[i]))&#123;</span><br><span class="line">                    dp[i]=dp[j]+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans=<span class="built_in">max</span>(ans,dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最长不下降子序列应用"><a href="#最长不下降子序列应用" class="headerlink" title="最长不下降子序列应用"></a>最长不下降子序列应用</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*N位同学站成一排，音乐老师要请其中的(N-K)位同学出列，使得剩下的K位同学不交换位置就能排成合唱队形。 合唱队形是指这样的一种队形：设K位同学从左到右依次编号为1, 2, …, K，他们的身高分别为T1, T2, …, TK， 则他们的身高满足T1 &lt; T2 &lt; … &lt; Ti , Ti &gt; Ti+1 &gt; … &gt; TK (1 &lt;= i &lt;= K)。*/</span></span><br><span class="line"><span class="comment">/*动态规划的最长子列问题，分别从前往后和从后往前寻找以i点为尾的最长子列，</span></span><br><span class="line"><span class="comment">寻找两个子列和的最大值*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,i,j,maxn;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;N)&#123;</span><br><span class="line">        <span class="keyword">int</span> high[<span class="number">200</span>],marka[<span class="number">200</span>],markb[<span class="number">200</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;high[i];</span><br><span class="line">            marka[i]=markb[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//每点为尾的子列长度最小都为1</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=N;i++)           <span class="comment">/*从前往后寻找以i点为尾的最长递增子列*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            maxn=marka[i];</span><br><span class="line">            <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">1</span>;j--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(high[i]&gt;high[j])</span><br><span class="line">                    <span class="comment">//问题出在这里啊</span></span><br><span class="line">                    maxn=<span class="built_in">max</span>(maxn,marka[j]+<span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//maxn=(maxn&gt;marka[j]+1)?maxn:marka[j]+1;</span></span><br><span class="line">            &#125;</span><br><span class="line">            marka[i]=maxn;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=N<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)      <span class="comment">/*从后往前寻找以i点为尾的最长递增子列*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            maxn=markb[i];</span><br><span class="line">            <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=N;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(high[i]&gt;high[j])</span><br><span class="line">                   <span class="comment">// maxn=(maxn&gt;markb[j]+1)?maxn:markb[j]+1;</span></span><br><span class="line">                   maxn=<span class="built_in">max</span>(maxn,markb[j]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            markb[i]=maxn;</span><br><span class="line">        &#125;</span><br><span class="line">        maxn=marka[<span class="number">1</span>]+markb[<span class="number">1</span>];</span><br><span class="line">        <span class="comment">//寻找点i两个子列和的最大值</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=N;i++)&#123;</span><br><span class="line">            maxn=<span class="built_in">max</span>(maxn,marka[i]+markb[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;N-maxn+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最长公共子序列-字符串A，B"><a href="#最长公共子序列-字符串A，B" class="headerlink" title="最长公共子序列-字符串A，B"></a>最长公共子序列-字符串A，B</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sadstory</span><br><span class="line">adminsorry</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str1,str2;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//记住模板</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcs</span><span class="params">(<span class="built_in">string</span> str1,<span class="built_in">string</span> str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len1=str1.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> len2=str2.<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">//0位已经设置为边界，i and j都从1开始</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=len1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=len2; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str1[i<span class="number">-1</span>] == str2[j<span class="number">-1</span>])</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(dp[i<span class="number">-1</span>][j] &gt; dp[i][j<span class="number">-1</span>])</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][j] = dp[i][j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[len1][len2];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;str2;</span><br><span class="line">        <span class="comment">//此处为边界，很关键dp[0][j] and d[i][0]均表示字符串0位与其他各字符串的比较</span></span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans=lcs(str1, str2);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最长公共子序列求具体LCS"><a href="#最长公共子序列求具体LCS" class="headerlink" title="最长公共子序列求具体LCS"></a>最长公共子序列求具体LCS</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> dp[i][j] = max(dp[i-1][j], dp[i][j-1],dp[i-1][j-1] + (A[i]==B[j] ? 1 : 0))，表示在这三种状态中取到最大值，</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">（1）第一种状态表示不录入第一个序列的第i个字符时的最长公共子序列，</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">（2）第二种状态表示不录入第二个序列的第j个字符时的最长公共子序列，</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">（3）第三种状态表示第一个序列的前i-1个字符与第二个序列前j-1个字符的公共子序列加上最后一个字符的录入状态，如果最后的一个字符相等则录入状态为1，否则为0。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">然后根据动归的状态，来判断我们要求得的序列中的字符有哪些。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str1,str2;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//记住模板,在lcs求长度的基础上进行改变，求最长子序列具体</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lcs</span><span class="params">(<span class="built_in">string</span> str1,<span class="built_in">string</span> str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len1=str1.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> len2=str2.<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">//0位已经设置为边界，i and j都从1开始</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=len1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=len2; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str1[i<span class="number">-1</span>] == str2[j<span class="number">-1</span>])</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(dp[i<span class="number">-1</span>][j] &gt; dp[i][j<span class="number">-1</span>])</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][j] = dp[i][j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">llcs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,z=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> temp;</span><br><span class="line">    i=str1.<span class="built_in">size</span>(),j=str2.<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">//从尾到头的状态进行判断，根据判断可以知道字符加入没有</span></span><br><span class="line">    <span class="keyword">while</span>(i!=<span class="number">0</span>&amp;&amp;j!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str1[i<span class="number">-1</span>]==str2[j<span class="number">-1</span>])&#123;</span><br><span class="line">            <span class="comment">//只有当两个字符都相等时才可以加入输出字符串</span></span><br><span class="line">            temp[z++]=str1[--i];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(dp[i<span class="number">-1</span>][j]&lt;dp[i][j<span class="number">-1</span>])</span><br><span class="line">            <span class="comment">//判断的意思，此时没有相等，且j加的没效果，j不等</span></span><br><span class="line">            j--;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(dp[i][j<span class="number">-1</span>]&lt;=dp[i<span class="number">-1</span>][j])</span><br><span class="line">            i--;</span><br><span class="line">        <span class="comment">//还是看小的，此时是i加的不如j加的有效果，所以减i</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=z<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;temp[i];</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;str2;</span><br><span class="line">        <span class="comment">//此处为边界，很关键dp[0][j] and d[i][0]均表示字符串0位与其他各字符串的比较</span></span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line"></span><br><span class="line">        lcs(str1, str2);</span><br><span class="line">        llcs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="hash字符串求最长公共连续子串"><a href="#hash字符串求最长公共连续子串" class="headerlink" title="hash字符串求最长公共连续子串"></a>hash字符串求最长公共连续子串</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">求最长公共子串（连续）的方法，</span></span><br><span class="line"><span class="comment">可以用KMP，当然也可以用字符串hash，</span></span><br><span class="line"><span class="comment">分别计算两个字符串的所有子串的hash值，</span></span><br><span class="line"><span class="comment">然后一一对比，当两个字符串的hash值相等时，</span></span><br><span class="line"><span class="comment">如果长度大于之前访问得到的公共子串长度的最大值，</span></span><br><span class="line"><span class="comment">则更新最大值，并存储此子串的起始位置，</span></span><br><span class="line"><span class="comment">最终得到最长的公共子串~</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;32/bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">const</span> LL p=<span class="number">1e7</span>+<span class="number">19</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">LL powP[maxn],H1[maxn]=&#123;<span class="number">0</span>&#125;,H2[maxn]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> hashValue,length,start,<span class="built_in">end</span>;</span><br><span class="line">    Node(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c,<span class="keyword">int</span> d):hashValue(a),length(b),start(c),<span class="built_in">end</span>(d)&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt; pr1,pr2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    powP[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;++i)&#123;</span><br><span class="line">        powP[i]=(powP[i<span class="number">-1</span>]*p)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calH</span><span class="params">(LL H[],<span class="built_in">string</span> &amp;str)</span></span>&#123;</span><br><span class="line">    H[<span class="number">0</span>]=str[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;str.length();i++)&#123;</span><br><span class="line">        H[i]=(H[i<span class="number">-1</span>]*p+str[i])%mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calSingleSubH</span><span class="params">(LL H[],<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> H[j];</span><br><span class="line">    <span class="keyword">return</span> ((H[j]-H[i<span class="number">-1</span>]*powP[j-i+<span class="number">1</span>])%mod+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calSubH</span><span class="params">(LL H[],<span class="keyword">int</span> len,<span class="built_in">vector</span>&lt;Node&gt; &amp;p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;len;j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> value=calSingleSubH(H,i,j);</span><br><span class="line">            p.push_back(Node(value,j-i+<span class="number">1</span>,i,j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getMax</span><span class="params">(<span class="built_in">string</span> str1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> str;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pr1.<span class="built_in">size</span>();++i)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;pr2.<span class="built_in">size</span>();++j)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(pr1[i].hashValue==pr2[j].hashValue)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(pr1[i].length&gt;ans)</span><br><span class="line">				&#123;</span><br><span class="line">					ans=pr1[i].length;</span><br><span class="line">					str=str1.substr(pr1[i].start,pr1[i].<span class="built_in">end</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str1,str2;</span><br><span class="line">    getline(<span class="built_in">cin</span>,str1);</span><br><span class="line">    getline(<span class="built_in">cin</span>,str2);</span><br><span class="line">    init(<span class="built_in">max</span>(str1.length(),str2.length()));</span><br><span class="line">    calH(H1,str1);</span><br><span class="line">    calH(H2,str2);</span><br><span class="line">    calSubH(H1,str1.length(),pr1);</span><br><span class="line">    calSubH(H2,str2.length(),pr2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; getMax(str1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最长公共子串是最长公共子序列的的特殊情况"><a href="#最长公共子串是最长公共子序列的的特殊情况" class="headerlink" title="最长公共子串是最长公共子序列的的特殊情况"></a>最长公共子串是最长公共子序列的的特殊情况</h3><p><img src="https://img-blog.csdn.net/20161116111138893" alt=""></p>
<p><img src="https://img-blog.csdn.net/20161116110820862" alt=""></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lcs</span><span class="params">(<span class="keyword">String</span> str1, <span class="keyword">String</span> str2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len1 = str1.length();</span><br><span class="line">    <span class="keyword">int</span> len2 = str2.length();</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;     <span class="comment">//记录最长公共子串长度</span></span><br><span class="line">    <span class="keyword">int</span> c[][] = <span class="keyword">new</span> <span class="keyword">int</span>[len1+<span class="number">1</span>][len2+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len1; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= len2; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span> || j == <span class="number">0</span>) &#123;</span><br><span class="line">                c[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str1.charAt(i<span class="number">-1</span>) == str2.charAt(j<span class="number">-1</span>)) &#123;</span><br><span class="line">                c[i][j] = c[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">                result = <span class="built_in">max</span>(c[i][j], result);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                c[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最长回文子序列"><a href="#最长回文子序列" class="headerlink" title="最长回文子序列"></a>最长回文子序列</h3><p>方法一：递归方法，自顶向下</p>
<p>str[0…n-1]是给定的字符串序列，长度为n，假设lps(0,n-1)表示序列str[0…n-1]的最长回文子序列的长度。</p>
<p>1.如果str的最后一个元素和第一个元素是相同的，则有：lps(0,n-1)=lps(1,n-2)+2；例如字符串序列“AABACACBA”，第一个元素和最后一个元素相同，其中lps(1,n-2)表示红色部分的最长回文子序列的长度；</p>
<p>2.如果str的最后一个元素和第一个元素是不相同的，则有：lps(0,n-1)=max(lps(1,n-1),lps(0,n-2))；例如字符串序列“ABACACB”，其中lps(1,n-1)表示去掉第一元素的子序列，lps(0,n-2)表示去掉最后一个元素的子序列。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lps</span><span class="params">(<span class="built_in">string</span> str,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="comment">//递归出口</span></span><br><span class="line">    <span class="keyword">if</span>(i==j)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//只有一个元素，回文长度为1</span></span><br><span class="line">    <span class="keyword">if</span>(i&gt;j)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//字符序列str[i...j]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果首尾相同</span></span><br><span class="line">    <span class="keyword">if</span>(str[i]==str[j])</span><br><span class="line">        <span class="keyword">return</span> lps(str,i+<span class="number">1</span>,j<span class="number">-1</span>)+<span class="number">2</span>;</span><br><span class="line">    <span class="comment">//如果首尾不相同</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(lps(str,i,j<span class="number">-1</span>),lps(str,i+<span class="number">1</span>,j));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str)&#123;</span><br><span class="line">        <span class="keyword">int</span> n=str.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> ans=lps(str,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法二：自底向上动态规划方法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1000</span>][<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lpsDp</span><span class="params">(<span class="built_in">string</span> str,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="comment">//边界条件</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        dp[i][i]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//dp[j][i]的含义表示首为j，尾为i</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        temp=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//考虑所有连续的长度为i+!的子串，str[j...j+i</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j+i&lt;n;j++)&#123;</span><br><span class="line">            <span class="comment">//如果首尾相同</span></span><br><span class="line">            <span class="keyword">if</span>(str[j]==str[j+i])</span><br><span class="line">                temp=dp[j+<span class="number">1</span>][j+i<span class="number">-1</span>]+<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                temp=<span class="built_in">max</span>(dp[j+<span class="number">1</span>][j+i],dp[j][j+i<span class="number">-1</span>]);</span><br><span class="line">            dp[j][j+i]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回字符串str[0....n-1]的最长回文子序列长度</span></span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>][n<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str)&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=lpsDp(str,str.<span class="built_in">size</span>());</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最长回文子串，连续的！！"><a href="#最长回文子串，连续的！！" class="headerlink" title="最长回文子串，连续的！！"></a>最长回文子串，连续的！！</h3><p>动态规划法：</p>
<p>回文字符串的子串也是回文，比如P[i,j]（表示以i开始以j结束的子串）是回文字符串，那么P[i+1,j-1]也是回文字符串。这样最长回文子串就能分解成一系列子问题了。这样需要额外的空间O（N^2)，算法复杂度也是O(N^2)。</p>
<p>首先定义状态方程和转移方程：</p>
<p>P[i,j]=false:表示子串[i,j]不是回文串。P[i,j]=true:表示子串[i,j]是回文串。</p>
<p>P[i,i]=true:当且仅当P[i+1,j-1] = true &amp;&amp; (s[i]==s[j]）</p>
<p>否则p[i,j] =false;</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">PATZJUJZTACCBCC</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> dp[<span class="number">1000</span>][<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> maxlength=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">flp</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> start=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//子串长度为1和2的初始化,边界条件</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        dp[i][i]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;len<span class="number">-1</span>&amp;&amp;s[i]==s[i+<span class="number">1</span>])&#123;</span><br><span class="line">            dp[i][i+<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">            start=i;</span><br><span class="line">            maxlength=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用上述结果可以dp出子串长度为3~len-1的子串</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> <span class="built_in">strlen</span>=<span class="number">3</span>;<span class="built_in">strlen</span>&lt;len;<span class="built_in">strlen</span>++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len-<span class="built_in">strlen</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> j=i+<span class="built_in">strlen</span><span class="number">-1</span>; <span class="comment">//子串结束位置</span></span><br><span class="line">            <span class="keyword">if</span>(dp[i+<span class="number">1</span>][j<span class="number">-1</span>]&amp;&amp;s[i]==s[j])&#123;</span><br><span class="line">                dp[i][j]=<span class="literal">true</span>;</span><br><span class="line">                maxlength=<span class="built_in">strlen</span>;</span><br><span class="line">              <span class="comment">//这个start的记忆就很灵性</span></span><br><span class="line">                start=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(maxlength&gt;<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> s.substr(start,start+maxlength<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="built_in">string</span> ans=flp(str);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;maxlength&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>暴力法:</p>
<p>遍历字符串S的每一个子串，去判断这个子串是不是回文，是回文的话看看长度是不是比最大的长度maxlength大。遍历每一个子串的方法要O（n^2），判断每一个子串是不是回文的时间复杂度是O(n)，所以暴利方法的总时间复杂度是O（n^3）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">PATZJUJZTACCBCC</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> maxlength=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">flp</span><span class="params">(<span class="built_in">string</span> str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=str.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> start=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> index1 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> index2 = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 对每个子串都从两边开始向中间遍历</span></span><br><span class="line">                <span class="keyword">for</span>(index1 = i, index2 = j; index1 &lt; index2; index1 ++, index2--)					&#123;</span><br><span class="line">                    <span class="keyword">if</span>(str[index1] != str[index2])</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 若index1=index2,表示串是类似于abcba这种类型；若大于，则是abccba这种类型</span></span><br><span class="line">                <span class="keyword">if</span>(index1 &gt;= index2 &amp;&amp; j - i &gt; maxlength)&#123;</span><br><span class="line">                    maxlength = j - i + <span class="number">1</span>;</span><br><span class="line">                    start = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(maxlength&gt;<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> str.substr(start,start+maxlength<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str)&#123;</span><br><span class="line">        <span class="built_in">string</span> ans=flp(str);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; maxlength&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>中心扩展法：</p>
<p>中心扩展就是把给定的字符串的每一个字母当做中心，向两边扩展，这样来找最长的子回文串。算法复杂度为O(N^2)。</p>
<p>但是要考虑两种情况：</p>
<p>1、像aba，这样长度为奇数。</p>
<p>2、想abba，这样长度为偶数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">flp</span><span class="params">(<span class="built_in">string</span> str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=str.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> maxlength=<span class="number">0</span>,start=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//先处理aba情况</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> j=i<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> k=i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;=<span class="number">0</span> &amp;&amp; k&lt;len &amp;&amp; str[j]==str[k])&#123;</span><br><span class="line">            <span class="keyword">if</span>(k-j+<span class="number">1</span>&gt;maxlength)&#123;</span><br><span class="line">                maxlength=k-j+<span class="number">1</span>;</span><br><span class="line">                start=j;</span><br><span class="line">            &#125;</span><br><span class="line">            j--;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//类似于abba情况，以i,i+!为中心两边扩展</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> j=i;</span><br><span class="line">        <span class="keyword">int</span> k=i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;=<span class="number">0</span> &amp;&amp; k&lt;len&amp;&amp;str[j]==str[k])&#123;</span><br><span class="line">            <span class="keyword">if</span>(k-j+<span class="number">1</span>&gt;maxlength)&#123;</span><br><span class="line">                maxlength=k-j+<span class="number">1</span>;</span><br><span class="line">                start=j;</span><br><span class="line">            &#125;</span><br><span class="line">            j--;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(maxlength&gt;<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> str.substr(start,start+maxlength<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str)&#123;</span><br><span class="line">        <span class="built_in">string</span> ans=flp(str);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>判断是否为回文串:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//从中间往两边扫，就有两种情况</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str)&#123;</span><br><span class="line">        <span class="keyword">int</span> len=str.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> mid =len/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(len%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;mid+i&lt;len;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(str[mid-i]!=str[mid+i])</span><br><span class="line">                &#123;</span><br><span class="line">                    flag=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;mid+i&lt;len;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(str[mid+i]!=str[mid-i<span class="number">-1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    flag=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者从两端往中间扫</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> a[<span class="number">300</span>];</span><br><span class="line">	<span class="keyword">while</span>(gets(a))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> len=<span class="built_in">strlen</span>(a);</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len/<span class="number">2</span>;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]!=a[len-i<span class="number">-1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				flag=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s\n"</span>,flag?<span class="string">"YES"</span>:<span class="string">"NO"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="-3"><a href="#-3" class="headerlink" title=" "></a> </h2><h3 id="实际应用，输出回文子串"><a href="#实际应用，输出回文子串" class="headerlink" title="实际应用，输出回文子串"></a>实际应用，输出回文子串</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Confuciuss say:Madam,I<span class="number">'</span>m Adam.</span><br><span class="line"><span class="comment">//最长回文子串暴力法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> dp[<span class="number">5010</span>][<span class="number">5010</span>];</span><br><span class="line"><span class="keyword">int</span> pos[<span class="number">5010</span>];</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">flp</span><span class="params">(<span class="keyword">char</span> s[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxlength=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">int</span> start=<span class="number">0</span>,<span class="built_in">end</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//子串长度为1和2的初始化,边界条件</span></span><br><span class="line">    <span class="comment">//dp[i][j] 表示以i开始，j结尾的子串是否是回文字符串！！,则dp[i+1][j-1]也是回文字符串</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        dp[i][i]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;len<span class="number">-1</span>&amp;&amp;s[i]==s[i+<span class="number">1</span>])&#123;</span><br><span class="line">            dp[i][i+<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">            start=i;</span><br><span class="line">            maxlength=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用上述结果可以dp出子串长度为3~len-1的子串</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> <span class="built_in">strlen</span>=<span class="number">3</span>;<span class="built_in">strlen</span>&lt;len;<span class="built_in">strlen</span>++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len-<span class="built_in">strlen</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> j=i+<span class="built_in">strlen</span><span class="number">-1</span>; <span class="comment">//子串结束位置</span></span><br><span class="line">            <span class="keyword">if</span>(dp[i+<span class="number">1</span>][j<span class="number">-1</span>]&amp;&amp;s[i]==s[j])&#123;</span><br><span class="line">                dp[i][j]=<span class="literal">true</span>;</span><br><span class="line">                maxlength=<span class="built_in">strlen</span>;</span><br><span class="line">                start=pos[i];</span><br><span class="line">                <span class="built_in">end</span>=pos[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(maxlength&gt;<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> str.substr(start,<span class="built_in">end</span>-start+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//终于知道哪里错了</span></span><br><span class="line">    <span class="keyword">while</span>(getline(<span class="built_in">cin</span>,str))&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="built_in">memset</span>(pos,<span class="number">0</span>,<span class="keyword">sizeof</span>(pos));</span><br><span class="line">        <span class="keyword">char</span> temp[<span class="number">5010</span>];</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isalpha</span>(str[i]) || <span class="built_in">isdigit</span>(str[i]))&#123;</span><br><span class="line">                temp[num]=<span class="built_in">toupper</span>(str[i]);</span><br><span class="line">                pos[num]=i;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp[num]=<span class="string">'\0'</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;temp;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">string</span> ans=flp(temp);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isalpha</span>(str[i]) || <span class="built_in">isdigit</span>(str[i]))&#123;</span><br><span class="line">                <span class="keyword">char</span> c=<span class="built_in">toupper</span>(str[i]);</span><br><span class="line">                temp=temp+c;</span><br><span class="line">                pos[num]=i;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h3 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">01背包</span></span><br><span class="line"><span class="comment">5 8  //n==5,V==8</span></span><br><span class="line"><span class="comment">3 5 1 2 2 //w[i]</span></span><br><span class="line"><span class="comment">4 5 2 1 3 //c[i]</span></span><br><span class="line"><span class="comment">//表示用重量8达到最大价值c</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分为两种策略，</span></span><br><span class="line"><span class="comment">不放第i件物品，即i-1件物品满足条件 dp[i-1][v]</span></span><br><span class="line"><span class="comment">放第i件物品  dp[i-1][v-w[i]]+c[i]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">又由于dp[i][v]总是只需要dp[i-1][v]左半部分</span></span><br><span class="line"><span class="comment">故可以直接开一个dp[v]数组</span></span><br><span class="line"><span class="comment">但是枚举方向该位i从1到n，v从V到0（逆序！！！）</span></span><br><span class="line"><span class="comment">dp[v]=max(dp[v],dp[v-w[i]]+c[i])</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxv=<span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> w[maxn],c[maxn],dp[maxv];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,V;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;V;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//边界</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;=V;v++)&#123;</span><br><span class="line">        dp[v]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v=V;v&gt;=w[i];v--)&#123;</span><br><span class="line">            dp[v]=<span class="built_in">max</span>(dp[v],dp[v-w[i]]+c[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> maxans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;=V;v++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(dp[v]&gt;maxans)&#123;</span><br><span class="line">            maxans=dp[v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;maxans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="完全背包-拆分整数成2的幂的和"><a href="#完全背包-拆分整数成2的幂的和" class="headerlink" title="完全背包-拆分整数成2的幂的和"></a>完全背包-拆分整数成2的幂的和</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*这道题确实可以用动态规划来解,它其实是一个完全背包求恰装满背包时的方案总数</span></span><br><span class="line"><span class="comment">问题.具体是,因为每一个拆分必须是1,2,4,2^3,...2^19(考虑n最大为10^6),</span></span><br><span class="line"><span class="comment">所以对于一个整数n,看它的这种拆分数有多少个,就相当于现在有20种物品,第i种物品</span></span><br><span class="line"><span class="comment">的花费是2^(i-1),每一种可以重复取, dp[i][j]表示前i种物品恰装满容量为j的物品时</span></span><br><span class="line"><span class="comment">的方案总数,从而dp[i][j] = dp[i-1][j] + dp[i][j-a[i]]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,dp[<span class="number">1000002</span>],a[<span class="number">21</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,t;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;i++)&#123;</span><br><span class="line">        a[i]=(<span class="number">1</span> &lt;&lt; (i<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp+<span class="number">1</span>,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j=a[i];j&lt;=n;j++)&#123;</span><br><span class="line">                    <span class="comment">//终于明白滚动数字的含义，二维降一维</span></span><br><span class="line">                dp[j]=dp[j]+dp[j-a[i]];</span><br><span class="line">                dp[j]=dp[j]%<span class="number">1000000000</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;dp[n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="动态规划解决括号最长匹配长度"><a href="#动态规划解决括号最长匹配长度" class="headerlink" title="动态规划解决括号最长匹配长度"></a>动态规划解决括号最长匹配长度</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*方法一没怎么看懂，不过dp[i]应当表示以i号开头时最长长度*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;str;</span><br><span class="line">    <span class="keyword">int</span> maxn=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(str.<span class="built_in">size</span>(),<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="comment">//vector高级用法，快速初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=str.<span class="built_in">size</span>()<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'('</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> j=i+<span class="number">1</span>+dp[i+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(j&lt;str.<span class="built_in">size</span>()&amp;&amp;str[j]==<span class="string">')'</span>)&#123;</span><br><span class="line">                dp[i]=dp[i]+dp[i+<span class="number">1</span>]+<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(j+<span class="number">1</span>&lt;str.<span class="built_in">size</span>())</span><br><span class="line">                    dp[i]=dp[i]+dp[j+<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(maxn&lt;dp[i])</span><br><span class="line">                maxn=dp[i];</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;maxn &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法二：更容易理解，但是一用例居然没有通过</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxAvailiable</span><span class="params">(<span class="built_in">string</span> str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxn=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">int</span> len=str.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *dp=(<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*len);</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//至少有两个才可以匹配，故从i=2开始</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="comment">//这个才是以i结尾，j是匹配头部</span></span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">')'</span>)&#123;</span><br><span class="line">            j=i<span class="number">-1</span>-dp[i<span class="number">-1</span>];</span><br><span class="line">        <span class="comment">//减去i-1匹配的</span></span><br><span class="line">            <span class="keyword">if</span>(j&gt;=<span class="number">0</span>&amp;&amp;str[j]==<span class="string">'('</span>)&#123;</span><br><span class="line">                dp[i]=dp[i<span class="number">-1</span>]+<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;<span class="number">0</span>)</span><br><span class="line">                    <span class="comment">//终于懂这里了，j前面的也算是匹配了</span></span><br><span class="line">                    dp[i]=dp[i]+dp[j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            maxn=maxn&lt;dp[i]?dp[i]:maxn;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(dp);</span><br><span class="line">    <span class="keyword">return</span> maxn;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;str;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;maxAvailiable(str)&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="动态规划花钱类问题两种思路"><a href="#动态规划花钱类问题两种思路" class="headerlink" title="动态规划花钱类问题两种思路"></a>动态规划花钱类问题两种思路</h3><p>动态规划自底向上方法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">若干邮票，选取最小张数凑成一个给定总值</span></span><br><span class="line"><span class="comment">不是贪心算法，居然是0-1背包，求的是最小数量</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">dp[i][j]表示i个邮票，j表示总量面额，dp表示最小邮票数量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    最少邮票数 &gt;&gt; 01动态规划</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    状态</span></span><br><span class="line"><span class="comment">    集合中数字</span></span><br><span class="line"><span class="comment">    dp[i][j]    0   1   2   3   4   5   6   7   8   9   10</span></span><br><span class="line"><span class="comment">    1           0   1   ∞   ∞   ∞   ∞   ∞   ∞   ∞   ∞   ∞</span></span><br><span class="line"><span class="comment">    1 3         0   1   ∞   1   2   ∞   ∞   ∞   ∞   ∞   ∞</span></span><br><span class="line"><span class="comment">    1 3 3       0   1   ∞   1   2   ∞   2   3   ∞   ∞   ∞</span></span><br><span class="line"><span class="comment">    1 3 3 3     0   1   ∞   1   2   ∞   2   ∞   ∞   3   4</span></span><br><span class="line"><span class="comment">    1 3 3 3 4   0   1   ∞   1   2   2   2   2   3   3   3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    状态迁移方程</span></span><br><span class="line"><span class="comment">    dp[j] = min&#123;dp[j],dp[j-stamp[i]]+1&#125;</span></span><br><span class="line"><span class="comment">    其中dp[j-stamp[i]]+1，表示将第i个邮票加入集合后 凑总量为j的面额 所需要的最少邮票数量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1000</span></span><br><span class="line"><span class="keyword">int</span> stamp[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minStamp</span><span class="params">(<span class="keyword">int</span> num,<span class="keyword">int</span> deno)</span></span>&#123;</span><br><span class="line">    <span class="comment">//邮票个数和总额</span></span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态全部初始化</span></span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=deno;j++)&#123;</span><br><span class="line">        dp[j]=(j==<span class="number">0</span>)?<span class="number">0</span>:INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="comment">//从后往前寻找若能凑成，且使数量变少就使用</span></span><br><span class="line">        <span class="keyword">for</span>(j=deno;j&gt;=stamp[i];j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[j-stamp[i]]!=INF)</span><br><span class="line">                dp[j]= (dp[j]&lt;dp[j-stamp[i]]+<span class="number">1</span>)? dp[j]:dp[j-stamp[i]]+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[deno]==INF?<span class="number">0</span>:dp[deno];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num,deno;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;deno&gt;&gt;num)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;stamp[i];</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;minStamp(num,deno);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>递归方法，自顶向下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">递归法解决问题,自顶向下方法，</span></span><br><span class="line"><span class="comment">动态规划确实自底向上！！一个问题两个方向</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> M;  <span class="comment">//邮票总价值</span></span><br><span class="line"><span class="keyword">int</span> N; <span class="comment">//n张邮票</span></span><br><span class="line"><span class="keyword">int</span> minn; <span class="comment">//最小票数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">compute</span><span class="params">(<span class="keyword">int</span> data[],<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="comment">//m是递归中几张邮票面值的和，n表示data还未参与递归的最高位，num表示m由num张邮票相加得到</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(m==M)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num&lt;minn) minn=num;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(m&gt;M) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=n;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    <span class="comment">//更好理解</span></span><br><span class="line">        compute(data,m+data[i],i<span class="number">-1</span>,num+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;M&gt;&gt;N)&#123;</span><br><span class="line">        minn=N+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> data[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        compute(data,<span class="number">0</span>,N<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(minn==N+<span class="number">1</span>)</span><br><span class="line">            <span class="comment">//如果可以凑成M，则minn&lt;=N;</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,minn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="递归-动态规划解决组合数问题"><a href="#递归-动态规划解决组合数问题" class="headerlink" title="递归+动态规划解决组合数问题"></a>递归+动态规划解决组合数问题</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">放苹果，递归+动态规划</span></span><br><span class="line"><span class="comment">把M个同样的苹果放在N个同样的盘子里，允许有的盘子空着不放，</span></span><br><span class="line"><span class="comment">问共有多少种不同的分法？</span></span><br><span class="line"><span class="comment">（用K表示）5，1，1和1，5，1 是同一种分法。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    M个苹果放在N个盘子里分法有:dp[M][N], 0 &lt;= M,N &lt;= 10</span></span><br><span class="line"><span class="comment">    设dp(m,n) 为m个苹果，n个盘子的放法数目，则先对n作讨论，</span></span><br><span class="line"><span class="comment">    当m&lt;n：必定有n-m个盘子永远空着，去掉它们对摆放苹果方法数目不产生影响。dp(m,n) = dp(m,m)</span></span><br><span class="line"><span class="comment">    当m&gt;=n：不同的放法可以分成两类：</span></span><br><span class="line"><span class="comment">        1、有至少一个盘子空着，即相当于dp(m,n) = dp(m,n-1);</span></span><br><span class="line"><span class="comment">        2、所有盘子都有苹果，相当于可以从每个盘子中拿掉一个苹果，不影响不同放法的数目，即dp(m,n) = dp(m-n,n).</span></span><br><span class="line"><span class="comment">        而总的放苹果的放法数目等于两者的和，即 dp(m,n) =dp(m,n-1)+dp(m-n,n)</span></span><br><span class="line"><span class="comment">    初始条件说明</span></span><br><span class="line"><span class="comment">        当m=0，n=0时，没苹果，没盘子，定为0种放法。这个条件在计算的时候用不到。题设至少一个盘子一个苹果。</span></span><br><span class="line"><span class="comment">        当m=0，n&gt;0时，没苹果，有盘子，定为1种放法。这个有点抽象，考虑：dp[1][1]=dp[1][0]+dp[0][1]=0+1。</span></span><br><span class="line"><span class="comment">        当m&gt;0，n=0时，有苹果，没盘子，定为0种放法。</span></span><br><span class="line"><span class="comment">        dp两条路，第一条n会逐渐减少，终会到达出口n=0;</span></span><br><span class="line"><span class="comment">        第二条m会逐渐减少，因为n&gt;m时，会计算dp(m,m)　所以终会到达出口m=0．</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">using namespace std;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int dfs(int m,int n)&#123;</span></span><br><span class="line"><span class="comment">    if(m&gt;=0&amp;&amp;n==0)</span></span><br><span class="line"><span class="comment">        return 0;</span></span><br><span class="line"><span class="comment">    else if(m==0&amp;&amp;n&gt;0)</span></span><br><span class="line"><span class="comment">        return 1;</span></span><br><span class="line"><span class="comment">    else if(m&gt;=n)</span></span><br><span class="line"><span class="comment">        return dfs(m,n-1)+dfs(m-n,n);</span></span><br><span class="line"><span class="comment">    else</span></span><br><span class="line"><span class="comment">        return dfs(m,m);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int m,n;</span></span><br><span class="line"><span class="comment">    while(cin&gt;&gt;m&gt;&gt;n)&#123;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;dfs(m,n)&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            dp[<span class="number">0</span>][j]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;=j)</span><br><span class="line">                    dp[i][j]=dp[i][j<span class="number">-1</span>]+dp[i-j][j];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][j]=dp[i][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;dp[m][n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="字符串专题"><a href="#字符串专题" class="headerlink" title="字符串专题"></a>字符串专题</h2><h3 id="1-统计单词频率"><a href="#1-统计单词频率" class="headerlink" title="1.统计单词频率"></a>1.统计单词频率</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(getline(<span class="built_in">cin</span>,str))&#123;</span><br><span class="line">        <span class="keyword">int</span> hashTable[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> maxn=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isalpha</span>(str[i]))&#123;</span><br><span class="line">                str[i]=<span class="built_in">tolower</span>(str[i]);</span><br><span class="line">                hashTable[str[i]-<span class="string">'a'</span>]++;</span><br><span class="line">                maxn=<span class="built_in">max</span>(maxn,hashTable[str[i]-<span class="string">'a'</span>]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(hashTable[i]==maxn)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%c %d\n"</span>,i+<span class="string">'a'</span>,maxn);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">int</span> hashTable[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> anum=<span class="number">0</span>,wnum=<span class="number">0</span>,cntMax=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str)&#123;</span><br><span class="line">        anum=anum+str.<span class="built_in">size</span>();</span><br><span class="line">        wnum++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            str[i]=<span class="built_in">tolower</span>(str[i]);</span><br><span class="line">            hashTable[str[i]-<span class="string">'a'</span>]++;</span><br><span class="line">            cntMax=<span class="built_in">max</span>(cntMax,hashTable[str[i]-<span class="string">'a'</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//这个要用对地方！！，用在前面没处理，少读字符串</span></span><br><span class="line">        <span class="keyword">char</span> ch=getchar();</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'\n'</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"字母个数：%d\n"</span>,anum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"单词个数：%d\n"</span>,wnum);</span><br><span class="line">    <span class="keyword">bool</span> nofirst=<span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"最多的字母:"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(hashTable[i]==cntMax)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(nofirst)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">",%c"</span>,i+<span class="string">'a'</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                nofirst=<span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%c"</span>,i+<span class="string">'a'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n出现的次数：%d\n"</span>,cntMax);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-密文加密"><a href="#2-密文加密" class="headerlink" title="2.密文加密"></a>2.密文加密</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(getline(<span class="built_in">cin</span>,str))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isalpha</span>(str[i]))&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">islower</span>(str[i]))&#123;</span><br><span class="line">                    str[i]=(str[i]+<span class="number">3</span>-<span class="string">'a'</span>)%<span class="number">26</span>+<span class="string">'a'</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    str[i]=(str[i]+<span class="number">3</span>-<span class="string">'A'</span>)%<span class="number">26</span>+<span class="string">'A'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;str&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>cctype头文件中处理字符函数</p>
<p><img src="C:\Users\decade\Desktop\复试\v2-94c2a8501687810e30d1aaae267aa394_hd.jpg" alt="v2-94c2a8501687810e30d1aaae267aa394_hd"></p>
<h3 id="3-find使用，删除指定子串-transform使用"><a href="#3-find使用，删除指定子串-transform使用" class="headerlink" title="3.find使用，删除指定子串,transform使用"></a>3.find使用，删除指定子串,transform使用</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">对于字符串<span class="built_in">string</span>，需要使用<span class="built_in">string</span>头文件，包含以下常用方法：</span><br><span class="line"></span><br><span class="line">s.<span class="built_in">find</span>(str,[pos]):在字符串s中从第 pos 个字符开始寻找 str ，并返回位置，如果找不到返回<span class="number">-1</span>。pos 可省略，默认为<span class="number">0</span></span><br><span class="line"></span><br><span class="line">s.erase(pos,n):从给定起始位置 pos 处开始删除，要删除字符的长度为n，返回修改后的<span class="built_in">string</span>对象</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str)&#123;</span><br><span class="line">        <span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">string</span> <span class="keyword">word</span>=<span class="string">"gzu"</span>;</span><br><span class="line">        <span class="comment">//果然字符串还是得要用双引号稳妥，pos放在下面也更稳妥</span></span><br><span class="line">        <span class="keyword">while</span>(str.<span class="built_in">find</span>(<span class="keyword">word</span>,pos)!=<span class="built_in">string</span>::npos)&#123;</span><br><span class="line">            pos=str.<span class="built_in">find</span>(<span class="keyword">word</span>,pos);</span><br><span class="line"></span><br><span class="line">            str.erase(pos,<span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;str&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进阶版</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str)&#123;</span><br><span class="line">        <span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">string</span> <span class="keyword">word</span>=<span class="string">"gzu"</span>;</span><br><span class="line">        <span class="built_in">string</span> temp=str;</span><br><span class="line">        transform(str.<span class="built_in">begin</span>(),str.<span class="built_in">end</span>(),str.<span class="built_in">begin</span>(),::<span class="built_in">tolower</span>);</span><br><span class="line">      <span class="comment">//while ((pos = str1.find("gzu")) != -1)也可！！</span></span><br><span class="line">        <span class="keyword">while</span>(str.<span class="built_in">find</span>(<span class="keyword">word</span>,pos)!=<span class="built_in">string</span>::npos)&#123;</span><br><span class="line">            pos=str.<span class="built_in">find</span>(<span class="keyword">word</span>,pos);</span><br><span class="line">            str.erase(pos,<span class="number">3</span>);</span><br><span class="line">            temp.erase(pos,<span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;temp&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-字符串前缀识别"><a href="#4-字符串前缀识别" class="headerlink" title="4.字符串前缀识别"></a>4.字符串前缀识别</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> str[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n&amp;&amp; n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; str[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (i == j)<span class="keyword">continue</span>;<span class="comment">//比较不同字符串</span></span><br><span class="line">				<span class="keyword">if</span> (str[i][<span class="number">0</span>] == <span class="string">'@'</span>)<span class="keyword">continue</span>;<span class="comment">//已经修改过的就不用再判断了</span></span><br><span class="line">				<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="built_in">strlen</span>(str[i])&amp;&amp; flag; k++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (str[i][<span class="number">0</span>] == <span class="string">'@'</span>)</span><br><span class="line">						flag = <span class="literal">false</span>;</span><br><span class="line">					<span class="keyword">if</span> (str[i][k] != str[j][k])</span><br><span class="line">						flag = <span class="literal">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (flag)</span><br><span class="line">				&#123;</span><br><span class="line">					str[i][<span class="number">0</span>] = <span class="string">'@'</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (str[i][<span class="number">0</span>] != <span class="string">'@'</span>)</span><br><span class="line">				ans++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="给定字符串找出重复字符和位置，-号法"><a href="#给定字符串找出重复字符和位置，-号法" class="headerlink" title="给定字符串找出重复字符和位置，*号法"></a>给定字符串找出重复字符和位置，*号法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*对于给定字符串，找出有重复的字符，并给出其位置*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str)&#123;</span><br><span class="line">        <span class="keyword">int</span> len=str.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">bool</span> first=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">bool</span> isDup=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(str[i]!=<span class="string">'*'</span>)&#123;</span><br><span class="line">                    <span class="comment">//i.j不要老搞错</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;len;j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(str[i]==str[j])&#123;</span><br><span class="line">                        isDup=<span class="literal">true</span>;</span><br><span class="line">                        str[j]=<span class="string">'*'</span>;</span><br><span class="line">                        <span class="keyword">if</span>(first)&#123;</span><br><span class="line">                            <span class="built_in">cout</span>&lt;&lt;str[i]&lt;&lt;<span class="string">","</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">";"</span>&lt;&lt;str[i]&lt;&lt;<span class="string">","</span>&lt;&lt;j+<span class="number">1</span>;</span><br><span class="line">                            first=<span class="literal">false</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="built_in">cout</span>&lt;&lt;<span class="string">";"</span>&lt;&lt;str[i]&lt;&lt;<span class="string">","</span>&lt;&lt;j+<span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(isDup)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-string循环截取的两种办法"><a href="#5-string循环截取的两种办法" class="headerlink" title="5.string循环截取的两种办法"></a>5.string循环截取的两种办法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//记录当前位置截取法,有当前位置和新位置，不改变原来字符串</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CutString</span><span class="params">(<span class="built_in">string</span> <span class="built_in">line</span>,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;subline,<span class="keyword">char</span> a)</span></span>&#123;</span><br><span class="line">	<span class="comment">//a就是截取的标号</span></span><br><span class="line">	<span class="keyword">size_t</span> pos=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(pos&lt;<span class="built_in">line</span>.length()) &#123;</span><br><span class="line">		<span class="keyword">size_t</span> curpos=pos;</span><br><span class="line">		pos=<span class="built_in">line</span>.<span class="built_in">find</span>(a,curpos);</span><br><span class="line">		<span class="keyword">if</span>(pos==<span class="built_in">string</span>::npos)</span><br><span class="line">		&#123;</span><br><span class="line">			pos=<span class="built_in">line</span>.length();</span><br><span class="line">		&#125;</span><br><span class="line">		subline.push_back(<span class="built_in">line</span>.substr(curpos,pos-curpos));</span><br><span class="line">		pos++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找截取之后删除法,不管咋样，pos还是不要放在判定中</span></span><br><span class="line">        <span class="keyword">while</span>(str.<span class="built_in">find</span>(<span class="string">'.'</span>)!=<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="comment">//观念一直没有改过来，pos是位置，pos-0就是长度，0-pos长度就是pos+!</span></span><br><span class="line">         <span class="comment">//pos用法果然有问题</span></span><br><span class="line">          pos=str.<span class="built_in">find</span>(<span class="string">'.'</span>);</span><br><span class="line">          <span class="comment">//下面逻辑没得问题</span></span><br><span class="line">          temp=str.substr(<span class="number">0</span>,pos);</span><br><span class="line">          arr.push_back(temp);</span><br><span class="line">          str=str.erase(<span class="number">0</span>,pos+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        arr.push_back(str);</span><br></pre></td></tr></table></figure>
<h3 id="6-读入用户输入的，以“-”结尾的一行文字，统计一共有多少个单词"><a href="#6-读入用户输入的，以“-”结尾的一行文字，统计一共有多少个单词" class="headerlink" title="6.读入用户输入的，以“.”结尾的一行文字，统计一共有多少个单词"></a>6.读入用户输入的，以“.”结尾的一行文字，统计一共有多少个单词</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span>、	<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="number">3</span>、	<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="number">4</span>、	<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="number">5</span>、		<span class="keyword">char</span> s[<span class="number">1000</span>];</span><br><span class="line"><span class="number">6</span>、		<span class="keyword">int</span> len,a[<span class="number">1000</span>]=&#123;<span class="number">0</span>&#125;,i,cnt;</span><br><span class="line"><span class="number">7</span>、		gets(s);</span><br><span class="line"><span class="number">8</span>、		len=<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="number">9</span>、		<span class="built_in">printf</span>(<span class="string">"len=%d\n"</span>,len);</span><br><span class="line"><span class="number">10</span>、		cnt=<span class="number">0</span>;<span class="comment">//记录单词数；</span></span><br><span class="line"><span class="number">11</span>、		i=<span class="number">0</span>;</span><br><span class="line">  <span class="comment">//如果是这样计算就不要老想着for循环，while自己i++</span></span><br><span class="line"><span class="number">12</span>、		<span class="keyword">while</span>(i&lt;len<span class="number">-1</span>&amp;&amp;s[i]==<span class="string">' '</span>)&#123;<span class="comment">//去掉开头的空格；</span></span><br><span class="line"><span class="number">13</span>、			i++;</span><br><span class="line"><span class="number">14</span>、		&#125;</span><br><span class="line"><span class="number">15</span>、			<span class="keyword">while</span>(i&lt;len<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="number">16</span>、				<span class="keyword">if</span>(s[i]!=<span class="string">' '</span>)&#123;<span class="comment">//遇到字符；</span></span><br><span class="line"><span class="number">17</span>、					a[cnt]+=<span class="number">1</span>;</span><br><span class="line"><span class="number">18</span>、					i++;</span><br><span class="line"><span class="number">19</span>、				&#125;</span><br><span class="line"><span class="number">20</span>、				<span class="keyword">else</span>&#123;<span class="comment">//遇到空格；</span></span><br><span class="line"><span class="number">21</span>、					cnt++;<span class="comment">//下一个单词；</span></span><br><span class="line"><span class="number">22</span>、					<span class="keyword">while</span>(i&lt;len<span class="number">-1</span>&amp;&amp;s[i]==<span class="string">' '</span>)&#123;<span class="comment">//去掉中间的连续空格；</span></span><br><span class="line"><span class="number">23</span>、						i++;</span><br><span class="line"><span class="number">24</span>、					&#125;</span><br><span class="line"><span class="number">25</span>、				&#125;</span><br><span class="line"><span class="number">26</span>、			&#125;</span><br><span class="line"><span class="number">27</span>、			<span class="built_in">printf</span>(<span class="string">"单词个数：%d.\n"</span>,cnt+<span class="number">1</span>);</span><br><span class="line"><span class="number">28</span>、			<span class="built_in">printf</span>(<span class="string">"每个单词所含有的字符数是：\n"</span>);</span><br><span class="line"><span class="number">29</span>、			<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;cnt+<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="number">30</span>、				<span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line"><span class="number">31</span>、			&#125;</span><br><span class="line"><span class="number">32</span>、	&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7-找出数组中最长无重复子串的长度"><a href="#7-找出数组中最长无重复子串的长度" class="headerlink" title="7.找出数组中最长无重复子串的长度"></a>7.找出数组中最长无重复子串的长度</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出一个整数，代表arr的最长无重复字符的长度。</span></span><br><span class="line"><span class="comment">不要和最长公共子串搞混，这个就是自己的子串</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> A[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; A[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>; <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = start; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[j] == A[i]) &#123;</span><br><span class="line">                start = j + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                temp++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (temp &gt; length)length = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; length;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法二：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> *arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line"></span><br><span class="line">        arr[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> length =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> left  = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; rec;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt; n &amp;&amp; right &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> cur = arr[right];</span><br><span class="line">        <span class="comment">//终于明白了，end()相当于a[n]指向最后一个后一个元素</span></span><br><span class="line">        <span class="keyword">if</span> (rec.<span class="built_in">end</span>() == rec.<span class="built_in">find</span>(cur))</span><br><span class="line">        &#123;</span><br><span class="line">            rec.insert(cur);</span><br><span class="line">            right++;</span><br><span class="line">            length = (right - left) &gt; length?(right - left):length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;   <span class="comment">//没有指向最后一个，也就是说找到了！！，这个意思也就是起点需要后移</span></span><br><span class="line">            <span class="comment">//如果一直都是找到的，那么就得一直后移</span></span><br><span class="line">            rec.erase(arr[left]);</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;length&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">delete</span> [] arr;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8-手机键盘按键，find和hash办法"><a href="#8-手机键盘按键，find和hash办法" class="headerlink" title="8.手机键盘按键，find和hash办法"></a>8.手机键盘按键，find和hash办法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">手机键盘</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> arr[<span class="number">8</span>]=&#123;<span class="string">"abc"</span>,<span class="string">"def"</span>,<span class="string">"ghi"</span>,<span class="string">"jkl"</span>,<span class="string">"mno"</span>,<span class="string">"pqrs"</span>,<span class="string">"tuv"</span>,<span class="string">"wxyz"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str)&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> pos;</span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">8</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j].<span class="built_in">find</span>(str[i])!=<span class="number">-1</span>)&#123;</span><br><span class="line">                        <span class="comment">//找到的意思</span></span><br><span class="line">                    pos=arr[j].<span class="built_in">find</span>(str[i]);</span><br><span class="line">                    <span class="keyword">if</span>(i+<span class="number">1</span>&lt;str.<span class="built_in">size</span>()&amp;&amp;arr[j].<span class="built_in">find</span>(str[i+<span class="number">1</span>])!=<span class="number">-1</span>)&#123;</span><br><span class="line">                        cnt=cnt+<span class="number">2</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cnt=cnt+pos+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好方法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1</span>其实只需要一个数组就够用了啊。用key顺序记录<span class="number">26</span>个字母按键次数，</span><br><span class="line"><span class="number">2</span>然后判断两个字母是否在同一个按键上，如果在同一个按键上，那么下标差（字母间距）</span><br><span class="line">就等于按键次数差。</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> key[<span class="number">26</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> count = key[str[<span class="number">0</span>]-<span class="string">'a'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;str.<span class="built_in">size</span>();++i)</span><br><span class="line">        &#123;</span><br><span class="line">            count += key[str[i]-<span class="string">'a'</span>];</span><br><span class="line">            <span class="keyword">if</span>(key[str[i]-<span class="string">'a'</span>]-key[str[i<span class="number">-1</span>]-<span class="string">'a'</span>]==str[i]-str[i<span class="number">-1</span>])<span class="comment">//判断是否在同一个按键上</span></span><br><span class="line">                count+=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;count&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="9-给定一个0字符串，求出全部子串出现次数"><a href="#9-给定一个0字符串，求出全部子串出现次数" class="headerlink" title="9.给定一个0字符串，求出全部子串出现次数"></a>9.给定一个0字符串，求出全部子串出现次数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*map方法，自动按照字典序增序</span></span><br><span class="line"><span class="comment">使用substr轻松截取子串，为啥老是忘记了！！*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">                m[s.substr(j,i-j)]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it=m.<span class="built_in">begin</span>();it!=m.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(it-&gt;second&gt;<span class="number">1</span>)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;it-&gt;first&lt;&lt;<span class="string">" "</span>&lt;&lt;it-&gt;second&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法二：朴素手写方法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一前一后两个指针来截取子串</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 5050</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">STR</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">unsigned</span> cnt;</span><br><span class="line">&#125;buf[N]; <span class="comment">//子串集合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n; <span class="comment">//子串数量</span></span><br><span class="line"><span class="built_in">string</span> str;  <span class="comment">//读取的字符串</span></span><br><span class="line"><span class="built_in">string</span> child;  <span class="comment">//临时存储子串</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeChild</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    child.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="comment">//果然在于这里的处理方式</span></span><br><span class="line">        child=child+str[from+i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(STR a,STR b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.s&lt;b.s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">letsGo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//生成子串列表并完成统计</span></span><br><span class="line">    <span class="keyword">int</span> len=str.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="comment">//i是子串长度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> from=<span class="number">0</span>;from+i&lt;=len;from++)&#123;</span><br><span class="line">            MakeChild(from,i);  <span class="comment">//生成子串</span></span><br><span class="line">            <span class="keyword">bool</span> repeat=<span class="literal">false</span>;  <span class="comment">//用来检查这个子串以前是否出现</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(buf[i].s==child)&#123;</span><br><span class="line">                    buf[i].cnt++;</span><br><span class="line">                    repeat=<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!repeat)&#123;</span><br><span class="line">                <span class="comment">//这个字串以前没有出现过</span></span><br><span class="line">                buf[n].cnt=<span class="number">1</span>;</span><br><span class="line">                buf[n].s=child;</span><br><span class="line">                n++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str)&#123;</span><br><span class="line">        n=<span class="number">0</span>;  <span class="comment">//子串个数</span></span><br><span class="line">        letsGo();</span><br><span class="line">        sort(buf,buf+n,cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(buf[i].cnt&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;buf[i].s&lt;&lt;<span class="string">" "</span>&lt;&lt;buf[i].cnt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数学专题，模拟"><a href="#数学专题，模拟" class="headerlink" title="数学专题，模拟"></a>数学专题，模拟</h2><h3 id="素数问题，普通筛和埃氏筛"><a href="#素数问题，普通筛和埃氏筛" class="headerlink" title="素数问题，普通筛和埃氏筛"></a>素数问题，普通筛和埃氏筛</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">int</span> bound=(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(x)+<span class="number">1</span>;</span><br><span class="line">  <span class="comment">//计算枚举上界，采用根号值取整后再加1</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;bound;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  或者直接for(int i=2,i*i&lt;=n,i++) 会更省事</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//埃氏筛法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//必须得要const int变量才可s</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10001</span>;</span><br><span class="line"><span class="keyword">int</span> prime[maxn],num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> p[maxn]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find_Prime</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p[i]==<span class="literal">false</span>)&#123;</span><br><span class="line">            prime[num++]=i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+i;j&lt;maxn;j=j+i)&#123;</span><br><span class="line">              <span class="comment">//倍数全都不是素数</span></span><br><span class="line">                p[j]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    Find_Prime();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prime[i]&lt;n&amp;&amp;prime[i]%<span class="number">10</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;prime[i];</span><br><span class="line">                <span class="keyword">if</span>(i!=num<span class="number">-1</span>)</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(prime[i]&gt;=n)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count==<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="另一种筛法，连续素数求和得超级素数"><a href="#另一种筛法，连续素数求和得超级素数" class="headerlink" title="另一种筛法，连续素数求和得超级素数"></a>另一种筛法，连续素数求和得超级素数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//超级素数要求是连续几个素数之和</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//知识点：素数大表，计算小于N的素数并存储</span></span><br><span class="line"><span class="comment">//若N不是素数，返回结束</span></span><br><span class="line"><span class="comment">//若N是素数，用i，j对连续素数表进行遍历，若连续素数之和小于N</span></span><br><span class="line"><span class="comment">//j指针向后移动，累加求和，若连续素数之和大于N，将当前</span></span><br><span class="line"><span class="comment">//连续素数之和sum减去当前i指针指向素数，i指针向后移动</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;32/bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">100000</span>];</span><br><span class="line"><span class="keyword">int</span> prime[<span class="number">100000</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//素数打表部分</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_prime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="built_in">fill</span>(vis,vis+<span class="number">100000</span>,<span class="literal">true</span>);</span><br><span class="line">    vis[<span class="number">0</span>]=vis[<span class="number">1</span>]=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i]==<span class="literal">true</span>)&#123;</span><br><span class="line">            num++;</span><br><span class="line">            prime[num]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//j&lt;=num保证prime[]存在,prime[]*i保证数字在n的范围内</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;(j&lt;=num)&amp;&amp;(i*prime[j]&lt;=n);j++)&#123;</span><br><span class="line">            vis[i*prime[j]]=<span class="literal">false</span>;  <span class="comment">//prime[]倍数肯定不是素数</span></span><br><span class="line">            <span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init_prime(<span class="number">100000</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!vis[n])&#123;</span><br><span class="line">        <span class="comment">//若n不是素数，直接输出no，结束程序</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"no"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">1</span>,sum=<span class="number">0</span>,count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=j&amp;&amp;!flag)&#123;</span><br><span class="line">        sum+=prime[j];  <span class="comment">//将i~j之间的素数求和</span></span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span>(sum==n&amp;&amp;count&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            flag=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;n)&#123;</span><br><span class="line">            <span class="comment">//如果连续素数之和小于n，则j往后移动</span></span><br><span class="line">            j++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//sum超了的话，就移动i从小的减起</span></span><br><span class="line">        <span class="keyword">while</span>(sum&gt;n&amp;&amp;!flag&amp;&amp;count&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//连续素数之和大于n，减去i指针指向素数</span></span><br><span class="line">            sum=sum-prime[i];</span><br><span class="line">            count--;</span><br><span class="line">            <span class="keyword">if</span>(sum==n&amp;&amp;count&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                i++;</span><br><span class="line">                flag=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;n&amp;&amp;count&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                j++;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="comment">//指针向后移动</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"yes"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;=j;k++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;prime[k]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"no"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="质因数"><a href="#质因数" class="headerlink" title="质因数"></a>质因数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//埃氏筛法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//必须得要const int变量才可s</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000001</span>;</span><br><span class="line"><span class="keyword">int</span> prime[maxn],num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> p[maxn]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find_Prime</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p[i]==<span class="literal">false</span>)&#123;</span><br><span class="line">            prime[num++]=i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+i;j&lt;maxn;j=j+i)&#123;</span><br><span class="line">                p[j]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">factor</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> cnt,x;</span><br><span class="line">&#125;fac[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Find_Prime();</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">int</span> no=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sqr=(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(<span class="number">1.0</span>*n);</span><br><span class="line">        <span class="comment">//质因数一定是小于数的根号！！</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num&amp;&amp;prime[i]&lt;=sqr;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n%prime[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                fac[no].cnt=<span class="number">0</span>;</span><br><span class="line">                fac[no].x=prime[i];</span><br><span class="line">                <span class="comment">//重复除以当前质数，计算该质数的数量</span></span><br><span class="line">                <span class="keyword">while</span>(n%prime[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                    fac[no].cnt++;</span><br><span class="line">                    n=n/prime[i];</span><br><span class="line">                &#125;</span><br><span class="line">                no++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//次数的意思是n不为1，且n是质数时，自己是自己的质因数</span></span><br><span class="line">        <span class="keyword">if</span>(n!=<span class="number">1</span>)&#123;</span><br><span class="line">            fac[no].x=n;</span><br><span class="line">            fac[no].cnt=<span class="number">1</span>;</span><br><span class="line">            no++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;no;i++)</span><br><span class="line">          <span class="comment">//次数如果是求约数的话！！要用乘以所有质因数的办法</span></span><br><span class="line">          <span class="comment">//	count*=(fac[i].cnt+1);</span></span><br><span class="line">            count=count+fac[i].cnt;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;count&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">方法二：太强了！！，这个逻辑</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;m)&#123;</span><br><span class="line">        <span class="keyword">long</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> j=<span class="number">2</span>;j*j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(m%j==<span class="number">0</span>)&#123;</span><br><span class="line">                m=m/j;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="comment">//这个意思是质数本身么</span></span><br><span class="line">    <span class="keyword">if</span>(m&gt;<span class="number">1</span>) cnt++;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="奇数魔方图"><a href="#奇数魔方图" class="headerlink" title="奇数魔方图"></a>奇数魔方图</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C程序设计第五版（谭浩强）</span></span><br><span class="line"><span class="comment">//章节：第六章 利用数组处理批量数据</span></span><br><span class="line"><span class="comment">//题号：6.7</span></span><br><span class="line"><span class="comment">//题目：输出奇数阶魔方阵</span></span><br><span class="line"><span class="comment">// 将1放在第一行中间一列;</span></span><br><span class="line"><span class="comment">// 从2开始直到 n×n为止各数依次按照如下规则存放</span></span><br><span class="line"><span class="comment">// 1）每一个数存放的行是前一个数的行减去1，列数加1(例如三阶魔方阵，5在4的上一行后一列);</span></span><br><span class="line"><span class="comment">// 2）如果前一个数的行数为1，那么下一个数的行数为n（最后一行），列同样，如果前一个数的列数为n，那么下一个数的列数为1；</span></span><br><span class="line"><span class="comment">// 3）如果按照上面规则存放时发现位置上已存在数或者上一个数是第一行第n列时，则把下一个数放在上一个数的下面即可。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x[<span class="number">100</span>][<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;,i,j,n,a,b;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"您打算输出几阶魔方阵（奇数阶）："</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	a = <span class="number">0</span>;</span><br><span class="line">	b = n/<span class="number">2</span>;</span><br><span class="line">	x[a][b] = <span class="number">1</span>;  <span class="comment">// 1</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n*n;i++)&#123;</span><br><span class="line">            <span class="comment">//特殊情况都输出也不错</span></span><br><span class="line">		<span class="keyword">if</span>(a==<span class="number">0</span> &amp;&amp; b!=n<span class="number">-1</span>)&#123;  <span class="comment">// 前一个数在第一行但是不在最后一列</span></span><br><span class="line">			a = n<span class="number">-1</span>;</span><br><span class="line">			b = b+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(x[a][b]==<span class="number">0</span>)&#123;  <span class="comment">// 如果这个位置不存在数</span></span><br><span class="line">				x[a][b] = i;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;  <span class="comment">// 如果这个位置存在数,则把这个数放在上一个数的下方</span></span><br><span class="line">				a = <span class="number">1</span>;</span><br><span class="line">				b = b<span class="number">-1</span>;</span><br><span class="line">				x[a][b] = i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(a!=<span class="number">0</span> &amp;&amp; b==n<span class="number">-1</span>)&#123;  <span class="comment">// 前一个数不在第一行但是在最后一列</span></span><br><span class="line">			a = a<span class="number">-1</span>;</span><br><span class="line">			b = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(x[a][b]==<span class="number">0</span>)&#123;  <span class="comment">// 如果这个位置不存在数</span></span><br><span class="line">				x[a][b] = i;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;  <span class="comment">// 如果这个位置存在数</span></span><br><span class="line">				a = a+<span class="number">1</span>;</span><br><span class="line">				b = n<span class="number">-1</span>;</span><br><span class="line">				x[a][b] = i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">0</span> &amp;&amp; b==n<span class="number">-1</span>)&#123;  <span class="comment">// 前一个数在第一行同时在最后一列</span></span><br><span class="line">			a = n<span class="number">-1</span>;</span><br><span class="line">			b = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(x[a][b]==<span class="number">0</span>)&#123;  <span class="comment">// 如果这个位置不存在数</span></span><br><span class="line">				x[a][b] = i;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;  <span class="comment">// 如果这个位置存在数</span></span><br><span class="line">				a = <span class="number">1</span>;</span><br><span class="line">				b = n<span class="number">-1</span>;</span><br><span class="line">				x[a][b] = i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			a = a<span class="number">-1</span>;</span><br><span class="line">			b = b+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(x[a][b]==<span class="number">0</span>)&#123;  <span class="comment">// 如果这个位置不存在数</span></span><br><span class="line">				x[a][b] = i;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;  <span class="comment">// 如果这个位置存在数</span></span><br><span class="line">			    <span class="comment">//终于看懂了！！不变的意思，自己对自己操作！！</span></span><br><span class="line">				a = a+<span class="number">2</span>;</span><br><span class="line">				b = b<span class="number">-1</span>;</span><br><span class="line">				x[a][b] = i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%5d"</span>, x[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//优化版！！，主要是总结归纳特殊情况为a = (a-1+3)%3;b = (b+1+3)%3;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x[<span class="number">100</span>][<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;,i,j,n,a,b;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"您打算输出几阶魔方阵（奇数阶）："</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	a = <span class="number">0</span>;</span><br><span class="line">	b = n/<span class="number">2</span>;</span><br><span class="line">	x[a][b] = <span class="number">1</span>;  <span class="comment">// 1</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n*n;i++)&#123;</span><br><span class="line">            <span class="comment">//特殊情况都输出也不错,特殊情况应当优先判断！！！</span></span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">0</span> &amp;&amp; b==n<span class="number">-1</span>)&#123;  <span class="comment">// 前一个数在第一行同时在最后一列</span></span><br><span class="line">			a = n<span class="number">-1</span>;</span><br><span class="line">			b = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(x[a][b]==<span class="number">0</span>)&#123;  <span class="comment">// 如果这个位置不存在数</span></span><br><span class="line">				x[a][b] = i;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;  <span class="comment">// 如果这个位置存在数</span></span><br><span class="line">				a = <span class="number">1</span>;</span><br><span class="line">				b = n<span class="number">-1</span>;</span><br><span class="line">				x[a][b] = i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			a = (a<span class="number">-1</span>+<span class="number">3</span>)%<span class="number">3</span>;</span><br><span class="line">			b = (b+<span class="number">1</span>+<span class="number">3</span>)%<span class="number">3</span>;</span><br><span class="line">			<span class="keyword">if</span>(x[a][b]==<span class="number">0</span>)&#123;  <span class="comment">// 如果这个位置不存在数</span></span><br><span class="line">				x[a][b] = i;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;  <span class="comment">// 如果这个位置存在数</span></span><br><span class="line">			    <span class="comment">//终于看懂了！！不变的意思，自己对自己操作！！</span></span><br><span class="line">				a = a+<span class="number">2</span>;</span><br><span class="line">				b = b<span class="number">-1</span>;</span><br><span class="line">				x[a][b] = i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%5d"</span>, x[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="求小数的循环部分，模除法"><a href="#求小数的循环部分，模除法" class="headerlink" title="求小数的循环部分，模除法"></a>求小数的循环部分，模除法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">①11&lt;13,11*10/13=8,余数=6</span></span><br><span class="line"><span class="comment">②6&lt;13,6*10/13=4,余数=8</span></span><br><span class="line"><span class="comment">③8&lt;13,8*10/13=6,余数=2</span></span><br><span class="line"><span class="comment">④2&lt;13,2*10/13=1,余数=7</span></span><br><span class="line"><span class="comment">⑤7&lt;13,7*10/13=5,余数=5</span></span><br><span class="line"><span class="comment">⑥5&lt;13,5*10/13=3,余数=11</span></span><br><span class="line"><span class="comment">⑦11&lt;13,11*10/13=8,余数=6</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">都是用余数乘以10去除以的，最终商和余数都相等，则有循环节</span></span><br><span class="line"><span class="comment">分成两部分：</span></span><br><span class="line"><span class="comment">第一部分模拟除法运算，每进行一步除法运算，</span></span><br><span class="line"><span class="comment">都需要将得到的商和余数分别保存在数组中，商用来输出，余数用来</span></span><br><span class="line"><span class="comment">判断是否循环，要在第二部分当中检测。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第二部分：将传递进来的商和余数，和保存在数组中的历史商和余数进行比较</span></span><br><span class="line"><span class="comment">若不相等，第一部分继续运算，若相等，记下当前商的所在下标</span></span><br><span class="line"><span class="comment">下标即为循环节的起始位置</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//第二部分的判断</span></span><br><span class="line"><span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">findR</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rem, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dec, <span class="keyword">int</span> r, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dec.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (rem[i] == r &amp;&amp; dec[i] == c)</span><br><span class="line">        &#123;</span><br><span class="line">            pos = i;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dipose</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> fp = to_string(n / d) + <span class="string">"."</span>; <span class="comment">//整数部分</span></span><br><span class="line">    <span class="keyword">if</span> (n &gt; d)                          <span class="comment">//第一次除法</span></span><br><span class="line">    &#123;</span><br><span class="line">        n = n % d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> r, c; <span class="comment">//r是余数，c是商</span></span><br><span class="line">    c = n * <span class="number">10</span> / d;</span><br><span class="line">    r = (n * <span class="number">10</span>) % d;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rem, dec; <span class="comment">//rem是商数组保存之前的商，dec是余数数组保存之前的余数</span></span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (findR(rem, dec, r, c))</span><br><span class="line">    &#123;</span><br><span class="line">        dec.push_back(c);</span><br><span class="line">        rem.push_back(r);</span><br><span class="line">        r *= <span class="number">10</span>;</span><br><span class="line">        c = r / d;</span><br><span class="line">        r %= d;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="literal">false</span>; <span class="comment">//flag为true为循环小数，flag为false为不循环小数</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dec[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt; dec.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == pos &amp;&amp; flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dec[i];</span><br><span class="line">        <span class="keyword">if</span> (i == dec.<span class="built_in">size</span>() - <span class="number">1</span> &amp;&amp; flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">")"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a1,b1,a2,b2,a3,b3;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d/%d %d/%d %d/%d"</span>,&amp;a1,&amp;b1,&amp;a2,&amp;b2,&amp;a3,&amp;b3);</span><br><span class="line">    dipose(a1,b1);</span><br><span class="line">    dipose(a2,b2);</span><br><span class="line">    dipose(a3,b3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="求最大公约数"><a href="#求最大公约数" class="headerlink" title="求最大公约数"></a>求最大公约数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(b==<span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="求最小公约数"><a href="#求最小公约数" class="headerlink" title="求最小公约数"></a>求最小公约数</h3><p>求得A和B的最大公约数是C，则最小公倍数A*B/C</p>
<h3 id="矩阵排序思想"><a href="#矩阵排序思想" class="headerlink" title="矩阵排序思想"></a>矩阵排序思想</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*输入一个四行五列矩阵，找出每列对最大的两个数*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第二题：输入一个四行五列的矩阵，找出每列最大的两个数，如：</span></span><br><span class="line"><span class="comment">输入：</span></span><br><span class="line"><span class="comment">1 2 3 4 9</span></span><br><span class="line"><span class="comment">-1 4 9 8 8</span></span><br><span class="line"><span class="comment">12 9 8 7 0</span></span><br><span class="line"><span class="comment">7 8 9 7 0</span></span><br><span class="line"><span class="comment">输出：12 9 9 8 9</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 7 8 9 7 8*/</span></span><br><span class="line"><span class="comment">/*循环五次，每次对每一列进行快排(降序)，最后将前两行的结果输出即可*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//bool型返回值</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">comp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//好思想，先排序，排序好后再将原来的数字替换，输出前两行即可，关键是思想到位，知道怎样</span></span><br><span class="line"><span class="comment">//在矩阵当中对于列排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> buf[<span class="number">4</span>][<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">            buf[i][j]=x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tmp[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">                <span class="comment">//傻傻了，行列依然不变，i，j，这样就是(0,0)(1,0)(2,0)(3,0)</span></span><br><span class="line">            tmp[i]=buf[i][j];</span><br><span class="line">            <span class="comment">//不用会表达一列，只需要把它们可以取出来，用中间数列进行排序</span></span><br><span class="line">        &#125;</span><br><span class="line">        sort(tmp,tmp+<span class="number">4</span>,comp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            buf[i][j]=tmp[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;buf[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="求约数节省效率办法"><a href="#求约数节省效率办法" class="headerlink" title="求约数节省效率办法"></a>求约数节省效率办法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求约数的方法太落后了,没考虑时间复杂度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">yueshu</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i*i&lt;=x;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==i*i)</span><br><span class="line">            cnt=cnt+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x%i==<span class="number">0</span>)&#123;</span><br><span class="line">          <span class="comment">//仔细考虑一下确实是对称的！！</span></span><br><span class="line">             cnt=cnt+<span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">or</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//这个方法也不错</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">numOfDivisor</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i*i&lt;num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (num%i == <span class="number">0</span>)</span><br><span class="line">            ans += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i*i == num) ans++;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;yueshu(x)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="简单约瑟夫环"><a href="#简单约瑟夫环" class="headerlink" title="简单约瑟夫环"></a>简单约瑟夫环</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*n个人排一圈123报数，报到3的人退到圈外，直到剩最后一个人为止。*/</span></span><br><span class="line"><span class="comment">//终于自我分析出了约瑟夫环</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">int</span> count=n;</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//这样分配内存保险</span></span><br><span class="line">        <span class="keyword">int</span> arr[<span class="number">1000</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            arr[i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(count!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(arr[i]==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(num!=<span class="number">3</span>)&#123;</span><br><span class="line">                        num++;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                        num=<span class="number">1</span>;</span><br><span class="line">                        arr[i]=<span class="number">0</span>;</span><br><span class="line">                        count--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(i==n) i=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]==<span class="number">1</span>) <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="高级链表版约瑟夫环（单循环链表）"><a href="#高级链表版约瑟夫环（单循环链表）" class="headerlink" title="高级链表版约瑟夫环（单循环链表）"></a>高级链表版约瑟夫环（单循环链表）</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="comment">//链表结点数据结构定义；</span></span><br><span class="line">       <span class="keyword">int</span> data;</span><br><span class="line">       <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Josephus</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> k,<span class="keyword">int</span> m)</span></span>&#123;<span class="comment">//约瑟夫环问题；n：人数，k：开始计数位置，m：数到几退出一个人；</span></span><br><span class="line">     LinkList p,q,r;<span class="comment">//p指向表头；</span></span><br><span class="line">     <span class="keyword">int</span> i,cnt;</span><br><span class="line">     p=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">     p-&gt;data=<span class="number">1</span>;</span><br><span class="line">     p-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">     q=p;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)&#123;<span class="comment">//创建单循环链表；如何创建单循环链表</span></span><br><span class="line">          r=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">          r-&gt;data=i;</span><br><span class="line">          r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">          q-&gt;next=r;</span><br><span class="line">          q=q-&gt;next;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//此处指向队头，完成连接</span></span><br><span class="line">     q-&gt;next=p;</span><br><span class="line">     <span class="comment">//走到开始计数的位置</span></span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;k;i++)&#123;</span><br><span class="line">         q=p;<span class="comment">//q始终指向前驱；</span></span><br><span class="line">         p=p-&gt;next; <span class="comment">//p移到开始的结点；</span></span><br><span class="line">     &#125;</span><br><span class="line">     cnt=<span class="number">1</span>;</span><br><span class="line">     <span class="comment">//也就是说只剩最后一个结点时，自己指向自己</span></span><br><span class="line">     <span class="keyword">while</span>(q-&gt;next!=q)&#123;</span><br><span class="line">          cnt++;</span><br><span class="line">          q=p;</span><br><span class="line">          p=p-&gt;next;</span><br><span class="line">          <span class="keyword">if</span>(cnt%m==<span class="number">0</span>)&#123;<span class="comment">//将要退出一个人；</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>,p-&gt;data);</span><br><span class="line">                q-&gt;next=p-&gt;next;</span><br><span class="line">                p=p-&gt;next;</span><br><span class="line">                cnt++;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"%d/n"</span>,q-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入人数n、从谁开始数k:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;k);</span><br><span class="line">    Josephus(n,k,<span class="number">3</span>);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="约瑟夫环再进阶版，拆封成-h和-c多个文件"><a href="#约瑟夫环再进阶版，拆封成-h和-c多个文件" class="headerlink" title="约瑟夫环再进阶版，拆封成.h和.c多个文件"></a>约瑟夫环再进阶版，拆封成.h和.c多个文件</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">生成一个长度为21的数组，依次存入1到21；建立一个长度为21的单向链表，将上述数组中的数字依次存入链表每个结点中；将上述链表变为单向封闭(循环)链表；从头结点开始数，将第17个结点删除，将它的下一个结点作为新的头结点；重复上述过程，直到该链表中只剩一个结点，显示该结点中存入的数字。</span></span><br><span class="line"><span class="comment">分三个文件，一个main; 一个.h; 一个.c 文件。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">count21.h文件：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> COUNT_21_H_INCLUDED  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COUNT_21_H_INCLUDED  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM 21<span class="comment">//链表节点数；   </span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="comment">//链表结点数据结构定义；   </span></span><br><span class="line">     <span class="keyword">int</span> data;  </span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span>     </span><br><span class="line">&#125;LNode,*LinkList;  </span><br><span class="line">  </span><br><span class="line"><span class="function">LinkList <span class="title">CreateList</span><span class="params">()</span></span>;<span class="comment">//创建单循环链表；    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></span><br><span class="line"></span><br><span class="line">count21.c文件：</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"Count21.h"</span>  </span></span><br><span class="line"><span class="function">LinkList <span class="title">CreateList</span><span class="params">()</span></span>&#123;<span class="comment">//建立单循环链表；   </span></span><br><span class="line">      LinkList L,p,q;  </span><br><span class="line">      <span class="keyword">int</span> i;  </span><br><span class="line">      L=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));  </span><br><span class="line">      p=L;  </span><br><span class="line">      L-&gt;data=<span class="number">1</span>;  </span><br><span class="line">      L-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">      <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=NUM;i++)&#123;  </span><br><span class="line">           q=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));  </span><br><span class="line">           q-&gt;data=i;  </span><br><span class="line">           q-&gt;next=<span class="literal">NULL</span>;  </span><br><span class="line">           p-&gt;next=q;  </span><br><span class="line">           p=p-&gt;next;                 </span><br><span class="line">      &#125;  </span><br><span class="line">      p-&gt;next=L;<span class="comment">//构成循环链表；  </span></span><br><span class="line">      <span class="keyword">return</span> L;     </span><br><span class="line">&#125;  </span><br><span class="line">main.c文件</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"Count21.h"</span>  </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    LinkList L,p,q;  </span><br><span class="line">    L=CreateList();  </span><br><span class="line">    p=L;<span class="comment">//p指向当前节点；  </span></span><br><span class="line">    q=L;   </span><br><span class="line">    <span class="keyword">while</span>(q-&gt;next!=L)&#123;  </span><br><span class="line">          q=q-&gt;next;              </span><br><span class="line">    &#125;<span class="comment">//q指向前驱；   </span></span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">while</span>(q-&gt;next!=q)&#123;  </span><br><span class="line">         cnt++;  </span><br><span class="line">         q=p;  </span><br><span class="line">         p=p-&gt;next;               </span><br><span class="line">         <span class="keyword">if</span>(cnt%<span class="number">17</span>==<span class="number">0</span>)&#123;  </span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"%d "</span>,p-&gt;data);  </span><br><span class="line">              q-&gt;next=p-&gt;next;  </span><br><span class="line">              p=p-&gt;next;  </span><br><span class="line">              cnt++;           </span><br><span class="line">         &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d/n"</span>,p-&gt;data);  </span><br><span class="line">    system(<span class="string">"pause"</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="-4"><a href="#-4" class="headerlink" title=" "></a> </h2>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>机试</tag>
        <tag>总结</tag>
      </tags>
  </entry>
</search>
